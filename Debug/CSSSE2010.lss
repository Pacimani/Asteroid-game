
CSSSE2010.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006c  00800100  00002b66  00002bfa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002b66  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000174  0080016c  0080016c  00002c66  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002c66  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002cc4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000358  00000000  00000000  00002d04  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003c53  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000015a5  00000000  00000000  00006caf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002139  00000000  00000000  00008254  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a64  00000000  00000000  0000a390  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000fcd  00000000  00000000  0000adf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002a88  00000000  00000000  0000bdc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000308  00000000  00000000  0000e849  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 e8 00 	jmp	0x1d0	; 0x1d0 <__ctors_end>
       4:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
       8:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
       c:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      10:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      14:	0c 94 42 01 	jmp	0x284	; 0x284 <__vector_5>
      18:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      1c:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      20:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      24:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      28:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      2c:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      30:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      34:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      38:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      3c:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      40:	0c 94 67 0d 	jmp	0x1ace	; 0x1ace <__vector_16>
      44:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      48:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      4c:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      50:	0c 94 43 0c 	jmp	0x1886	; 0x1886 <__vector_20>
      54:	0c 94 01 0c 	jmp	0x1802	; 0x1802 <__vector_21>
      58:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      5c:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      60:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      64:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      68:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      6c:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      70:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      74:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      78:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>

0000007c <__trampolines_end>:
      7c:	50 72       	andi	r21, 0x20	; 32
      7e:	65 73       	andi	r22, 0x35	; 53
      80:	73 20       	and	r7, r3
      82:	61 20       	and	r6, r1
      84:	62 75       	andi	r22, 0x52	; 82
      86:	74 74       	andi	r23, 0x44	; 68
      88:	6f 6e       	ori	r22, 0xEF	; 239
      8a:	20 74       	andi	r18, 0x40	; 64
      8c:	6f 20       	and	r6, r15
      8e:	73 74       	andi	r23, 0x43	; 67
      90:	61 72       	andi	r22, 0x21	; 33
      92:	74 20       	and	r7, r4
      94:	61 67       	ori	r22, 0x71	; 113
      96:	61 69       	ori	r22, 0x91	; 145
      98:	6e 00       	.word	0x006e	; ????

0000009a <__c.2359>:
      9a:	47 41 4d 45 20 4f 56 45 52 00                       GAME OVER.

000000a4 <__c.2335>:
      a4:	43 53 53 45 32 30 31 30 2f 37 32 30 31 20 70 72     CSSE2010/7201 pr
      b4:	6f 6a 65 63 74 20 62 79 20 50 61 63 69 66 69 71     oject by Pacifiq
      c4:	75 65 20 52 75 6b 69 6b 7a 61 3b 20 53 34 35 32     ue Rukikza; S452
      d4:	31 37 31 37 00                                      1717.

000000d9 <__c.2333>:
      d9:	41 73 74 65 72 6f 69 64 73 00                       Asteroids.

000000e3 <numbers>:
      e3:	4e 01 4b 01 47 01 43 01 3f 01 3b 01 37 01 33 01     N.K.G.C.?.;.7.3.
      f3:	2f 01 2b 01                                         /.+.

000000f7 <letters>:
      f7:	bd 01 b9 01 b5 01 b1 01 ad 01 a9 01 a5 01 a1 01     ................
     107:	9e 01 9a 01 96 01 92 01 8d 01 89 01 85 01 81 01     ................
     117:	7c 01 78 01 74 01 6f 01 6b 01 66 01 61 01 5c 01     |.x.t.o.k.f.a.\.
     127:	57 01 52 01                                         W.R.

0000012b <cols_9>:
     12b:	64 92 92 7d                                         d..}

0000012f <cols_8>:
     12f:	6c 92 92 6d                                         l..m

00000133 <cols_7>:
     133:	80 9e a0 c1                                         ....

00000137 <cols_6>:
     137:	7c 92 92 4d                                         |..M

0000013b <cols_5>:
     13b:	e4 a2 a2 9d                                         ....

0000013f <cols_4>:
     13f:	18 28 48 ff                                         .(H.

00000143 <cols_3>:
     143:	44 92 92 6d                                         D..m

00000147 <cols_2>:
     147:	46 8a 92 63                                         F..c

0000014b <cols_1>:
     14b:	42 fe 03                                            B..

0000014e <cols_0>:
     14e:	7c 92 a2 7d                                         |..}

00000152 <cols_Z>:
     152:	86 8a 92 a2 c3                                      .....

00000157 <cols_Y>:
     157:	e0 10 0e 10 e1                                      .....

0000015c <cols_X>:
     15c:	c6 28 10 28 c7                                      .(.(.

00000161 <cols_W>:
     161:	fc 02 1c 02 fd                                      .....

00000166 <cols_V>:
     166:	f8 04 02 04 f9                                      .....

0000016b <cols_U>:
     16b:	fc 02 02 fd                                         ....

0000016f <cols_T>:
     16f:	80 80 fe 80 81                                      .....

00000174 <cols_S>:
     174:	64 92 92 4d                                         d..M

00000178 <cols_R>:
     178:	fe 90 98 67                                         ...g

0000017c <cols_Q>:
     17c:	7c 82 8a 7c 03                                      |..|.

00000181 <cols_P>:
     181:	fe 90 90 61                                         ...a

00000185 <cols_O>:
     185:	7c 82 82 7d                                         |..}

00000189 <cols_N>:
     189:	fe 20 10 ff                                         . ..

0000018d <cols_M>:
     18d:	fe 40 30 40 ff                                      .@0@.

00000192 <cols_L>:
     192:	fe 02 02 03                                         ....

00000196 <cols_K>:
     196:	fe 10 28 c7                                         ..(.

0000019a <cols_J>:
     19a:	04 02 02 fd                                         ....

0000019e <cols_I>:
     19e:	82 fe 83                                            ...

000001a1 <cols_H>:
     1a1:	fe 10 10 ff                                         ....

000001a5 <cols_G>:
     1a5:	7c 82 92 5d                                         |..]

000001a9 <cols_F>:
     1a9:	fe 90 90 81                                         ....

000001ad <cols_E>:
     1ad:	fe 92 92 83                                         ....

000001b1 <cols_D>:
     1b1:	fe 82 82 7d                                         ...}

000001b5 <cols_C>:
     1b5:	7c 82 82 45                                         |..E

000001b9 <cols_B>:
     1b9:	fe 92 92 6d                                         ...m

000001bd <cols_A>:
     1bd:	7e 90 90 7f                                         ~...

000001c1 <__c.2040>:
     1c1:	1b 5b 32 4a 00                                      .[2J.

000001c6 <__c.2025>:
     1c6:	1b 5b 25 64 3b 25 64 48 00 00                       .[%d;%dH..

000001d0 <__ctors_end>:
     1d0:	11 24       	eor	r1, r1
     1d2:	1f be       	out	0x3f, r1	; 63
     1d4:	cf ef       	ldi	r28, 0xFF	; 255
     1d6:	d8 e0       	ldi	r29, 0x08	; 8
     1d8:	de bf       	out	0x3e, r29	; 62
     1da:	cd bf       	out	0x3d, r28	; 61

000001dc <__do_copy_data>:
     1dc:	11 e0       	ldi	r17, 0x01	; 1
     1de:	a0 e0       	ldi	r26, 0x00	; 0
     1e0:	b1 e0       	ldi	r27, 0x01	; 1
     1e2:	e6 e6       	ldi	r30, 0x66	; 102
     1e4:	fb e2       	ldi	r31, 0x2B	; 43
     1e6:	02 c0       	rjmp	.+4      	; 0x1ec <__do_copy_data+0x10>
     1e8:	05 90       	lpm	r0, Z+
     1ea:	0d 92       	st	X+, r0
     1ec:	ac 36       	cpi	r26, 0x6C	; 108
     1ee:	b1 07       	cpc	r27, r17
     1f0:	d9 f7       	brne	.-10     	; 0x1e8 <__do_copy_data+0xc>

000001f2 <__do_clear_bss>:
     1f2:	22 e0       	ldi	r18, 0x02	; 2
     1f4:	ac e6       	ldi	r26, 0x6C	; 108
     1f6:	b1 e0       	ldi	r27, 0x01	; 1
     1f8:	01 c0       	rjmp	.+2      	; 0x1fc <.do_clear_bss_start>

000001fa <.do_clear_bss_loop>:
     1fa:	1d 92       	st	X+, r1

000001fc <.do_clear_bss_start>:
     1fc:	a0 3e       	cpi	r26, 0xE0	; 224
     1fe:	b2 07       	cpc	r27, r18
     200:	e1 f7       	brne	.-8      	; 0x1fa <.do_clear_bss_loop>
     202:	0e 94 3e 09 	call	0x127c	; 0x127c <main>
     206:	0c 94 b1 15 	jmp	0x2b62	; 0x2b62 <_exit>

0000020a <__bad_interrupt>:
     20a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000020e <init_button_interrupts>:
// using a pin change interrupt. These pins correspond to pin
// change interrupts PCINT8 to PCINT11 which are covered by
// Pin change interrupt 1.
void init_button_interrupts(void) {
	// Enable the interrupt (see datasheet page 77)
	PCICR |= (1<<PCIE1);
     20e:	e8 e6       	ldi	r30, 0x68	; 104
     210:	f0 e0       	ldi	r31, 0x00	; 0
     212:	80 81       	ld	r24, Z
     214:	82 60       	ori	r24, 0x02	; 2
     216:	80 83       	st	Z, r24
	
	// Make sure the interrupt flag is cleared (by writing a 
	// 1 to it) (see datasheet page 78)
	PCIFR |= (1<<PCIF1);
     218:	d9 9a       	sbi	0x1b, 1	; 27
	
	// Choose which pins we're interested in by setting
	// the relevant bits in the mask register (see datasheet page 78)
	PCMSK1 |= (1<<PCINT8)|(1<<PCINT9)|(1<<PCINT10)|(1<<PCINT11);	
     21a:	ec e6       	ldi	r30, 0x6C	; 108
     21c:	f0 e0       	ldi	r31, 0x00	; 0
     21e:	80 81       	ld	r24, Z
     220:	8f 60       	ori	r24, 0x0F	; 15
     222:	80 83       	st	Z, r24
	
	// Empty the button push queue
	queue_length = 0;
     224:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <__data_end>
     228:	08 95       	ret

0000022a <button_pushed>:
}

int8_t button_pushed(void) {
	int8_t return_value = NO_BUTTON_PUSHED;	// Assume no button pushed
	if(queue_length > 0) {
     22a:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <__data_end>
     22e:	18 16       	cp	r1, r24
     230:	3c f5       	brge	.+78     	; 0x280 <button_pushed+0x56>
		// Remove the first element off the queue and move all the other
		// entries closer to the front of the queue. We turn off interrupts (if on)
		// before we make any changes to the queue. If interrupts were on
		// we turn them back on when done.
		return_value = button_queue[0];
     232:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <button_queue>
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
     236:	6f b7       	in	r22, 0x3f	; 63
		cli();
     238:	f8 94       	cli
		
		for(uint8_t i = 1; i < queue_length; i++) {
     23a:	90 91 6c 01 	lds	r25, 0x016C	; 0x80016c <__data_end>
     23e:	92 30       	cpi	r25, 0x02	; 2
     240:	b4 f0       	brlt	.+44     	; 0x26e <button_pushed+0x44>
     242:	21 e0       	ldi	r18, 0x01	; 1
     244:	30 e0       	ldi	r19, 0x00	; 0
     246:	91 e0       	ldi	r25, 0x01	; 1
			button_queue[i-1] = button_queue[i];
     248:	f9 01       	movw	r30, r18
     24a:	e3 59       	subi	r30, 0x93	; 147
     24c:	fe 4f       	sbci	r31, 0xFE	; 254
     24e:	40 81       	ld	r20, Z
     250:	f9 01       	movw	r30, r18
     252:	e4 59       	subi	r30, 0x94	; 148
     254:	fe 4f       	sbci	r31, 0xFE	; 254
     256:	40 83       	st	Z, r20
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
		cli();
		
		for(uint8_t i = 1; i < queue_length; i++) {
     258:	9f 5f       	subi	r25, 0xFF	; 255
     25a:	29 2f       	mov	r18, r25
     25c:	30 e0       	ldi	r19, 0x00	; 0
     25e:	40 91 6c 01 	lds	r20, 0x016C	; 0x80016c <__data_end>
     262:	04 2e       	mov	r0, r20
     264:	00 0c       	add	r0, r0
     266:	55 0b       	sbc	r21, r21
     268:	24 17       	cp	r18, r20
     26a:	35 07       	cpc	r19, r21
     26c:	6c f3       	brlt	.-38     	; 0x248 <button_pushed+0x1e>
			button_queue[i-1] = button_queue[i];
		}
		queue_length--;
     26e:	90 91 6c 01 	lds	r25, 0x016C	; 0x80016c <__data_end>
     272:	91 50       	subi	r25, 0x01	; 1
     274:	90 93 6c 01 	sts	0x016C, r25	; 0x80016c <__data_end>
		
		if(interrupts_were_enabled) {
     278:	66 23       	and	r22, r22
     27a:	1c f4       	brge	.+6      	; 0x282 <button_pushed+0x58>
			// Turn them back on again
			sei();
     27c:	78 94       	sei
     27e:	08 95       	ret
	// Empty the button push queue
	queue_length = 0;
}

int8_t button_pushed(void) {
	int8_t return_value = NO_BUTTON_PUSHED;	// Assume no button pushed
     280:	8f ef       	ldi	r24, 0xFF	; 255
			// Turn them back on again
			sei();
		}
	}
	return return_value;
}
     282:	08 95       	ret

00000284 <__vector_5>:

// Interrupt handler for a change on buttons
ISR(PCINT1_vect) {
     284:	1f 92       	push	r1
     286:	0f 92       	push	r0
     288:	0f b6       	in	r0, 0x3f	; 63
     28a:	0f 92       	push	r0
     28c:	11 24       	eor	r1, r1
     28e:	2f 93       	push	r18
     290:	3f 93       	push	r19
     292:	4f 93       	push	r20
     294:	5f 93       	push	r21
     296:	6f 93       	push	r22
     298:	7f 93       	push	r23
     29a:	8f 93       	push	r24
     29c:	9f 93       	push	r25
     29e:	ef 93       	push	r30
     2a0:	ff 93       	push	r31
	// Get the current state of the buttons. We'll compare this with
	// the last state to see what has changed.
	uint8_t button_state = PINB & 0x0F;
     2a2:	43 b1       	in	r20, 0x03	; 3
     2a4:	4f 70       	andi	r20, 0x0F	; 15
     2a6:	80 e0       	ldi	r24, 0x00	; 0
     2a8:	90 e0       	ldi	r25, 0x00	; 0
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for(uint8_t pin=0; pin<=3; pin++) {
		if(queue_length < BUTTON_QUEUE_SIZE && 
     2aa:	64 2f       	mov	r22, r20
     2ac:	70 e0       	ldi	r23, 0x00	; 0
     2ae:	20 91 6c 01 	lds	r18, 0x016C	; 0x80016c <__data_end>
     2b2:	24 30       	cpi	r18, 0x04	; 4
     2b4:	04 f5       	brge	.+64     	; 0x2f6 <__vector_5+0x72>
     2b6:	9b 01       	movw	r18, r22
     2b8:	08 2e       	mov	r0, r24
     2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <__vector_5+0x3c>
     2bc:	35 95       	asr	r19
     2be:	27 95       	ror	r18
     2c0:	0a 94       	dec	r0
     2c2:	e2 f7       	brpl	.-8      	; 0x2bc <__vector_5+0x38>
     2c4:	20 ff       	sbrs	r18, 0
     2c6:	17 c0       	rjmp	.+46     	; 0x2f6 <__vector_5+0x72>
				(button_state & (1<<pin)) && 
				!(last_button_state & (1<<pin))) {
     2c8:	20 91 71 01 	lds	r18, 0x0171	; 0x800171 <last_button_state>
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for(uint8_t pin=0; pin<=3; pin++) {
		if(queue_length < BUTTON_QUEUE_SIZE && 
				(button_state & (1<<pin)) && 
     2cc:	30 e0       	ldi	r19, 0x00	; 0
     2ce:	08 2e       	mov	r0, r24
     2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <__vector_5+0x52>
     2d2:	35 95       	asr	r19
     2d4:	27 95       	ror	r18
     2d6:	0a 94       	dec	r0
     2d8:	e2 f7       	brpl	.-8      	; 0x2d2 <__vector_5+0x4e>
     2da:	20 fd       	sbrc	r18, 0
     2dc:	0c c0       	rjmp	.+24     	; 0x2f6 <__vector_5+0x72>
				!(last_button_state & (1<<pin))) {
			// Add the button push to the queue (and update the
			// length of the queue
			button_queue[queue_length++] = pin;
     2de:	e0 91 6c 01 	lds	r30, 0x016C	; 0x80016c <__data_end>
     2e2:	21 e0       	ldi	r18, 0x01	; 1
     2e4:	2e 0f       	add	r18, r30
     2e6:	20 93 6c 01 	sts	0x016C, r18	; 0x80016c <__data_end>
     2ea:	0e 2e       	mov	r0, r30
     2ec:	00 0c       	add	r0, r0
     2ee:	ff 0b       	sbc	r31, r31
     2f0:	e3 59       	subi	r30, 0x93	; 147
     2f2:	fe 4f       	sbci	r31, 0xFE	; 254
     2f4:	80 83       	st	Z, r24
     2f6:	01 96       	adiw	r24, 0x01	; 1
	// Iterate over all the buttons and see which ones have changed.
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for(uint8_t pin=0; pin<=3; pin++) {
     2f8:	84 30       	cpi	r24, 0x04	; 4
     2fa:	91 05       	cpc	r25, r1
     2fc:	c1 f6       	brne	.-80     	; 0x2ae <__vector_5+0x2a>
			button_queue[queue_length++] = pin;
		}
	}
	
	// Remember this button state
	last_button_state = button_state;
     2fe:	40 93 71 01 	sts	0x0171, r20	; 0x800171 <last_button_state>
     302:	ff 91       	pop	r31
     304:	ef 91       	pop	r30
     306:	9f 91       	pop	r25
     308:	8f 91       	pop	r24
     30a:	7f 91       	pop	r23
     30c:	6f 91       	pop	r22
     30e:	5f 91       	pop	r21
     310:	4f 91       	pop	r20
     312:	3f 91       	pop	r19
     314:	2f 91       	pop	r18
     316:	0f 90       	pop	r0
     318:	0f be       	out	0x3f, r0	; 63
     31a:	0f 90       	pop	r0
     31c:	1f 90       	pop	r1
     31e:	18 95       	reti

00000320 <asteroid_at>:
// Check whether there is an asteroid at a given position.
// Returns -1 if there is no asteroid, otherwise we return
// the asteroid number (from 0 to numAsteroids-1).
static int8_t asteroid_at(uint8_t x, uint8_t y){
	uint8_t i;
	uint8_t positionToCheck = GAME_POSITION(x,y);
     320:	20 e1       	ldi	r18, 0x10	; 16
     322:	82 9f       	mul	r24, r18
     324:	c0 01       	movw	r24, r0
     326:	11 24       	eor	r1, r1
     328:	6f 70       	andi	r22, 0x0F	; 15
     32a:	86 2b       	or	r24, r22
	for(i=0; i < numAsteroids; i++) {
     32c:	40 91 80 01 	lds	r20, 0x0180	; 0x800180 <numAsteroids>
     330:	04 2e       	mov	r0, r20
     332:	00 0c       	add	r0, r0
     334:	55 0b       	sbc	r21, r21
     336:	14 16       	cp	r1, r20
     338:	15 06       	cpc	r1, r21
     33a:	c4 f4       	brge	.+48     	; 0x36c <asteroid_at+0x4c>
		if(asteroids[i] == positionToCheck) {
     33c:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <asteroids>
     340:	89 17       	cp	r24, r25
     342:	49 f0       	breq	.+18     	; 0x356 <asteroid_at+0x36>
     344:	90 e0       	ldi	r25, 0x00	; 0
     346:	0a c0       	rjmp	.+20     	; 0x35c <asteroid_at+0x3c>
     348:	f9 01       	movw	r30, r18
     34a:	ea 57       	subi	r30, 0x7A	; 122
     34c:	fe 4f       	sbci	r31, 0xFE	; 254
     34e:	20 81       	ld	r18, Z
     350:	82 13       	cpse	r24, r18
     352:	04 c0       	rjmp	.+8      	; 0x35c <asteroid_at+0x3c>
     354:	01 c0       	rjmp	.+2      	; 0x358 <asteroid_at+0x38>
// Returns -1 if there is no asteroid, otherwise we return
// the asteroid number (from 0 to numAsteroids-1).
static int8_t asteroid_at(uint8_t x, uint8_t y){
	uint8_t i;
	uint8_t positionToCheck = GAME_POSITION(x,y);
	for(i=0; i < numAsteroids; i++) {
     356:	90 e0       	ldi	r25, 0x00	; 0
		if(asteroids[i] == positionToCheck) {
			// Asteroid i is at the given position
			return i;
     358:	89 2f       	mov	r24, r25
     35a:	08 95       	ret
// Returns -1 if there is no asteroid, otherwise we return
// the asteroid number (from 0 to numAsteroids-1).
static int8_t asteroid_at(uint8_t x, uint8_t y){
	uint8_t i;
	uint8_t positionToCheck = GAME_POSITION(x,y);
	for(i=0; i < numAsteroids; i++) {
     35c:	9f 5f       	subi	r25, 0xFF	; 255
     35e:	29 2f       	mov	r18, r25
     360:	30 e0       	ldi	r19, 0x00	; 0
     362:	24 17       	cp	r18, r20
     364:	35 07       	cpc	r19, r21
     366:	84 f3       	brlt	.-32     	; 0x348 <asteroid_at+0x28>
			// Asteroid i is at the given position
			return i;
		}
	}
	// No match was found - no asteroid at the given position
	return -1;
     368:	8f ef       	ldi	r24, 0xFF	; 255
     36a:	08 95       	ret
     36c:	8f ef       	ldi	r24, 0xFF	; 255
}
     36e:	08 95       	ret

00000370 <redraw_base>:
	redraw_base(COLOUR_BASE);
	redraw_all_asteroids();	
	redraw_all_projectiles();
}

static void redraw_base(uint8_t colour){
     370:	1f 93       	push	r17
     372:	cf 93       	push	r28
     374:	df 93       	push	r29
     376:	18 2f       	mov	r17, r24
	// Add the bottom row of the base first (0) followed by the single bit
	// in the next row (1)
	for(int8_t x = basePosition - 1; x <= basePosition+1; x++) {
     378:	90 91 9a 01 	lds	r25, 0x019A	; 0x80019a <basePosition>
     37c:	8f ef       	ldi	r24, 0xFF	; 255
     37e:	89 0f       	add	r24, r25
     380:	48 2f       	mov	r20, r24
     382:	08 2e       	mov	r0, r24
     384:	00 0c       	add	r0, r0
     386:	55 0b       	sbc	r21, r21
     388:	29 2f       	mov	r18, r25
     38a:	09 2e       	mov	r0, r25
     38c:	00 0c       	add	r0, r0
     38e:	33 0b       	sbc	r19, r19
     390:	2f 5f       	subi	r18, 0xFF	; 255
     392:	3f 4f       	sbci	r19, 0xFF	; 255
     394:	24 17       	cp	r18, r20
     396:	35 07       	cpc	r19, r21
     398:	e4 f0       	brlt	.+56     	; 0x3d2 <redraw_base+0x62>
     39a:	d8 e0       	ldi	r29, 0x08	; 8
     39c:	d9 1b       	sub	r29, r25
     39e:	c8 2f       	mov	r28, r24
		if (x >= 0 && x < FIELD_WIDTH) {
     3a0:	88 30       	cpi	r24, 0x08	; 8
     3a2:	28 f4       	brcc	.+10     	; 0x3ae <redraw_base+0x3e>
			ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_XY(x, 0), colour);
     3a4:	41 2f       	mov	r20, r17
     3a6:	6d 2f       	mov	r22, r29
     3a8:	80 e0       	ldi	r24, 0x00	; 0
     3aa:	0e 94 62 06 	call	0xcc4	; 0xcc4 <ledmatrix_update_pixel>
     3ae:	81 e0       	ldi	r24, 0x01	; 1
     3b0:	8c 0f       	add	r24, r28
}

static void redraw_base(uint8_t colour){
	// Add the bottom row of the base first (0) followed by the single bit
	// in the next row (1)
	for(int8_t x = basePosition - 1; x <= basePosition+1; x++) {
     3b2:	90 91 9a 01 	lds	r25, 0x019A	; 0x80019a <basePosition>
     3b6:	d1 50       	subi	r29, 0x01	; 1
     3b8:	48 2f       	mov	r20, r24
     3ba:	08 2e       	mov	r0, r24
     3bc:	00 0c       	add	r0, r0
     3be:	55 0b       	sbc	r21, r21
     3c0:	29 2f       	mov	r18, r25
     3c2:	09 2e       	mov	r0, r25
     3c4:	00 0c       	add	r0, r0
     3c6:	33 0b       	sbc	r19, r19
     3c8:	2f 5f       	subi	r18, 0xFF	; 255
     3ca:	3f 4f       	sbci	r19, 0xFF	; 255
     3cc:	24 17       	cp	r18, r20
     3ce:	35 07       	cpc	r19, r21
     3d0:	34 f7       	brge	.-52     	; 0x39e <redraw_base+0x2e>
		if (x >= 0 && x < FIELD_WIDTH) {
			ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_XY(x, 0), colour);
		}
	}
	ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_XY(basePosition, 1), colour);
     3d2:	67 e0       	ldi	r22, 0x07	; 7
     3d4:	69 1b       	sub	r22, r25
     3d6:	41 2f       	mov	r20, r17
     3d8:	81 e0       	ldi	r24, 0x01	; 1
     3da:	0e 94 62 06 	call	0xcc4	; 0xcc4 <ledmatrix_update_pixel>
}
     3de:	df 91       	pop	r29
     3e0:	cf 91       	pop	r28
     3e2:	1f 91       	pop	r17
     3e4:	08 95       	ret

000003e6 <redraw_asteroid>:
	}
}

static void redraw_asteroid(uint8_t asteroidNumber, uint8_t colour) {
	uint8_t asteroidPosn;
	if(asteroidNumber < numAsteroids) {
     3e6:	90 e0       	ldi	r25, 0x00	; 0
     3e8:	20 91 80 01 	lds	r18, 0x0180	; 0x800180 <numAsteroids>
     3ec:	02 2e       	mov	r0, r18
     3ee:	00 0c       	add	r0, r0
     3f0:	33 0b       	sbc	r19, r19
     3f2:	82 17       	cp	r24, r18
     3f4:	93 07       	cpc	r25, r19
     3f6:	6c f4       	brge	.+26     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     3f8:	46 2f       	mov	r20, r22
		asteroidPosn = asteroids[asteroidNumber];
     3fa:	fc 01       	movw	r30, r24
     3fc:	ea 57       	subi	r30, 0x7A	; 122
     3fe:	fe 4f       	sbci	r31, 0xFE	; 254
     400:	80 81       	ld	r24, Z
		ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_GAME_POSN(asteroidPosn), colour);
     402:	98 2f       	mov	r25, r24
     404:	92 95       	swap	r25
     406:	9f 70       	andi	r25, 0x0F	; 15
     408:	67 e0       	ldi	r22, 0x07	; 7
     40a:	69 1b       	sub	r22, r25
     40c:	8f 70       	andi	r24, 0x0F	; 15
     40e:	0e 94 62 06 	call	0xcc4	; 0xcc4 <ledmatrix_update_pixel>
     412:	08 95       	ret

00000414 <redraw_projectile>:

static void redraw_projectile(uint8_t projectileNumber, uint8_t colour) {
	uint8_t projectilePosn;
	
	// Check projectileNumber is valid - ignore otherwise
	if(projectileNumber < numProjectiles) {
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	20 91 85 01 	lds	r18, 0x0185	; 0x800185 <numProjectiles>
     41a:	02 2e       	mov	r0, r18
     41c:	00 0c       	add	r0, r0
     41e:	33 0b       	sbc	r19, r19
     420:	82 17       	cp	r24, r18
     422:	93 07       	cpc	r25, r19
     424:	6c f4       	brge	.+26     	; 0x440 <redraw_projectile+0x2c>
     426:	46 2f       	mov	r20, r22
		projectilePosn = projectiles[projectileNumber];
     428:	fc 01       	movw	r30, r24
     42a:	ef 57       	subi	r30, 0x7F	; 127
     42c:	fe 4f       	sbci	r31, 0xFE	; 254
     42e:	80 81       	ld	r24, Z
		ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_GAME_POSN(projectilePosn), colour);
     430:	98 2f       	mov	r25, r24
     432:	92 95       	swap	r25
     434:	9f 70       	andi	r25, 0x0F	; 15
     436:	67 e0       	ldi	r22, 0x07	; 7
     438:	69 1b       	sub	r22, r25
     43a:	8f 70       	andi	r24, 0x0F	; 15
     43c:	0e 94 62 06 	call	0xcc4	; 0xcc4 <ledmatrix_update_pixel>
     440:	08 95       	ret

00000442 <remove_projectile>:
	numAsteroids--;
}

// Remove projectile with the given projectile number (from 0 to
// numProjectiles - 1).
static void remove_projectile(int8_t projectileNumber) {	
     442:	cf 93       	push	r28
	if(projectileNumber < 0 || projectileNumber >= numProjectiles) {
     444:	88 23       	and	r24, r24
     446:	24 f1       	brlt	.+72     	; 0x490 <remove_projectile+0x4e>
     448:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <numProjectiles>
     44c:	89 17       	cp	r24, r25
     44e:	04 f5       	brge	.+64     	; 0x490 <remove_projectile+0x4e>
     450:	c8 2f       	mov	r28, r24
		// Invalid index - do nothing 
		return;
	}
	
	// Remove the projectile from the display
	redraw_projectile(projectileNumber, COLOUR_BLACK);
     452:	60 e0       	ldi	r22, 0x00	; 0
     454:	0e 94 0a 02 	call	0x414	; 0x414 <redraw_projectile>
	
	// Close up the gap in the list of projectiles - move any
	// projectiles after this in the list closer to the start of the list
	for(uint8_t i = projectileNumber+1; i < numProjectiles; i++) {
     458:	81 e0       	ldi	r24, 0x01	; 1
     45a:	8c 0f       	add	r24, r28
     45c:	28 2f       	mov	r18, r24
     45e:	30 e0       	ldi	r19, 0x00	; 0
     460:	60 91 85 01 	lds	r22, 0x0185	; 0x800185 <numProjectiles>
     464:	46 2f       	mov	r20, r22
     466:	06 2e       	mov	r0, r22
     468:	00 0c       	add	r0, r0
     46a:	55 0b       	sbc	r21, r21
     46c:	24 17       	cp	r18, r20
     46e:	35 07       	cpc	r19, r21
     470:	64 f4       	brge	.+24     	; 0x48a <remove_projectile+0x48>
		projectiles[i-1] = projectiles[i];
     472:	f9 01       	movw	r30, r18
     474:	ef 57       	subi	r30, 0x7F	; 127
     476:	fe 4f       	sbci	r31, 0xFE	; 254
     478:	90 81       	ld	r25, Z
     47a:	31 97       	sbiw	r30, 0x01	; 1
     47c:	90 83       	st	Z, r25
	// Remove the projectile from the display
	redraw_projectile(projectileNumber, COLOUR_BLACK);
	
	// Close up the gap in the list of projectiles - move any
	// projectiles after this in the list closer to the start of the list
	for(uint8_t i = projectileNumber+1; i < numProjectiles; i++) {
     47e:	8f 5f       	subi	r24, 0xFF	; 255
     480:	28 2f       	mov	r18, r24
     482:	30 e0       	ldi	r19, 0x00	; 0
     484:	24 17       	cp	r18, r20
     486:	35 07       	cpc	r19, r21
     488:	a4 f3       	brlt	.-24     	; 0x472 <remove_projectile+0x30>
		projectiles[i-1] = projectiles[i];
	}
	// Update projectile count - have one fewer projectiles now.
	numProjectiles--;
     48a:	61 50       	subi	r22, 0x01	; 1
     48c:	60 93 85 01 	sts	0x0185, r22	; 0x800185 <numProjectiles>
}
     490:	cf 91       	pop	r28
     492:	08 95       	ret

00000494 <initialise_game>:
 
// Initialise game field:
// (1) base starts in the centre (x=3)
// (2) no projectiles initially
// (3) the maximum number of asteroids, randomly distributed.
void initialise_game(void) {
     494:	4f 92       	push	r4
     496:	5f 92       	push	r5
     498:	6f 92       	push	r6
     49a:	7f 92       	push	r7
     49c:	af 92       	push	r10
     49e:	bf 92       	push	r11
     4a0:	cf 92       	push	r12
     4a2:	df 92       	push	r13
     4a4:	ef 92       	push	r14
     4a6:	ff 92       	push	r15
     4a8:	0f 93       	push	r16
     4aa:	1f 93       	push	r17
     4ac:	cf 93       	push	r28
     4ae:	df 93       	push	r29
	uint8_t x, y, i;
	
    basePosition = 3;
     4b0:	83 e0       	ldi	r24, 0x03	; 3
     4b2:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <basePosition>
	numProjectiles = 0;
     4b6:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <numProjectiles>
	numAsteroids = 0;
     4ba:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <numAsteroids>
	PORTC |= 0x78;
     4be:	88 b1       	in	r24, 0x08	; 8
     4c0:	88 67       	ori	r24, 0x78	; 120
     4c2:	88 b9       	out	0x08, r24	; 8
	
	
	PORTA = 0b01111100;
     4c4:	8c e7       	ldi	r24, 0x7C	; 124
     4c6:	82 b9       	out	0x02, r24	; 2
     4c8:	06 e8       	ldi	r16, 0x86	; 134
     4ca:	11 e0       	ldi	r17, 0x01	; 1
     4cc:	0f 2e       	mov	r0, r31
     4ce:	fa e9       	ldi	r31, 0x9A	; 154
     4d0:	af 2e       	mov	r10, r31
     4d2:	f1 e0       	ldi	r31, 0x01	; 1
     4d4:	bf 2e       	mov	r11, r31
     4d6:	f0 2d       	mov	r31, r0
			// to FIELD_WIDTH - 1
			x = (uint8_t)(random() % FIELD_WIDTH);
			// Generate random y position - somewhere from 3
			// to FIELD_HEIGHT - 1 (i.e., not in the lowest
			// three rows)
			y = (uint8_t)(3 + (random() % (FIELD_HEIGHT-3)));
     4d8:	0f 2e       	mov	r0, r31
     4da:	fd e0       	ldi	r31, 0x0D	; 13
     4dc:	4f 2e       	mov	r4, r31
     4de:	51 2c       	mov	r5, r1
     4e0:	61 2c       	mov	r6, r1
     4e2:	71 2c       	mov	r7, r1
     4e4:	f0 2d       	mov	r31, r0
		// Generate random position that does not already
		// have an asteroid.
		do {
			// Generate random x position - somewhere from 0
			// to FIELD_WIDTH - 1
			x = (uint8_t)(random() % FIELD_WIDTH);
     4e6:	0e 94 05 12 	call	0x240a	; 0x240a <random>
     4ea:	6b 01       	movw	r12, r22
     4ec:	7c 01       	movw	r14, r24
     4ee:	27 e0       	ldi	r18, 0x07	; 7
     4f0:	c2 22       	and	r12, r18
     4f2:	dd 24       	eor	r13, r13
     4f4:	ee 24       	eor	r14, r14
     4f6:	20 e8       	ldi	r18, 0x80	; 128
     4f8:	f2 22       	and	r15, r18
     4fa:	ff 20       	and	r15, r15
     4fc:	84 f4       	brge	.+32     	; 0x51e <initialise_game+0x8a>
     4fe:	81 e0       	ldi	r24, 0x01	; 1
     500:	c8 1a       	sub	r12, r24
     502:	d1 08       	sbc	r13, r1
     504:	e1 08       	sbc	r14, r1
     506:	f1 08       	sbc	r15, r1
     508:	e8 ef       	ldi	r30, 0xF8	; 248
     50a:	ce 2a       	or	r12, r30
     50c:	dd 24       	eor	r13, r13
     50e:	da 94       	dec	r13
     510:	ed 2c       	mov	r14, r13
     512:	fe 2c       	mov	r15, r14
     514:	ff ef       	ldi	r31, 0xFF	; 255
     516:	cf 1a       	sub	r12, r31
     518:	df 0a       	sbc	r13, r31
     51a:	ef 0a       	sbc	r14, r31
     51c:	ff 0a       	sbc	r15, r31
			// Generate random y position - somewhere from 3
			// to FIELD_HEIGHT - 1 (i.e., not in the lowest
			// three rows)
			y = (uint8_t)(3 + (random() % (FIELD_HEIGHT-3)));
     51e:	0e 94 05 12 	call	0x240a	; 0x240a <random>
     522:	a3 01       	movw	r20, r6
     524:	92 01       	movw	r18, r4
     526:	0e 94 8c 11 	call	0x2318	; 0x2318 <__divmodsi4>
     52a:	c3 e0       	ldi	r28, 0x03	; 3
     52c:	c6 0f       	add	r28, r22
		} while(asteroid_at(x,y) != -1);
     52e:	6c 2f       	mov	r22, r28
     530:	8c 2d       	mov	r24, r12
     532:	0e 94 90 01 	call	0x320	; 0x320 <asteroid_at>
     536:	8f 3f       	cpi	r24, 0xFF	; 255
     538:	b1 f6       	brne	.-84     	; 0x4e6 <initialise_game+0x52>
		// If we get here, we've now found an x,y location without
		// an existing asteroid - record the position
		asteroids[i] = GAME_POSITION(x,y);
     53a:	20 e1       	ldi	r18, 0x10	; 16
     53c:	c2 9e       	mul	r12, r18
     53e:	b0 01       	movw	r22, r0
     540:	11 24       	eor	r1, r1
     542:	cf 70       	andi	r28, 0x0F	; 15
     544:	c6 2b       	or	r28, r22
     546:	f8 01       	movw	r30, r16
     548:	c1 93       	st	Z+, r28
     54a:	8f 01       	movw	r16, r30
		numAsteroids++;
     54c:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <numAsteroids>
     550:	8f 5f       	subi	r24, 0xFF	; 255
     552:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <numAsteroids>
	
	
	PORTA = 0b01111100;
	

	for(i=0; i < MAX_ASTEROIDS ; i++) {
     556:	ea 15       	cp	r30, r10
     558:	fb 05       	cpc	r31, r11
     55a:	29 f6       	brne	.-118    	; 0x4e6 <initialise_game+0x52>

// Redraw the whole display - base, asteroids and projectiles.
// We assume all of the data structures have been appropriately poplulated
static void redraw_whole_display(void) {
	// clear the display
	ledmatrix_clear();
     55c:	0e 94 a5 06 	call	0xd4a	; 0xd4a <ledmatrix_clear>
	
	// Redraw each of the elements
	redraw_base(COLOUR_BASE);
     560:	8f ed       	ldi	r24, 0xDF	; 223
     562:	0e 94 b8 01 	call	0x370	; 0x370 <redraw_base>
	ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_XY(basePosition, 1), colour);
}

static void redraw_all_asteroids(void) {
	// For each asteroid, determine it's position and redraw it
	for(uint8_t i=0; i < numAsteroids; i++) {
     566:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <numAsteroids>
     56a:	18 16       	cp	r1, r24
     56c:	84 f4       	brge	.+32     	; 0x58e <initialise_game+0xfa>
     56e:	c0 e0       	ldi	r28, 0x00	; 0
		redraw_asteroid(i, COLOUR_ASTEROID);
     570:	60 ef       	ldi	r22, 0xF0	; 240
     572:	8c 2f       	mov	r24, r28
     574:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <redraw_asteroid>
	ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_XY(basePosition, 1), colour);
}

static void redraw_all_asteroids(void) {
	// For each asteroid, determine it's position and redraw it
	for(uint8_t i=0; i < numAsteroids; i++) {
     578:	cf 5f       	subi	r28, 0xFF	; 255
     57a:	2c 2f       	mov	r18, r28
     57c:	30 e0       	ldi	r19, 0x00	; 0
     57e:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <numAsteroids>
     582:	08 2e       	mov	r0, r24
     584:	00 0c       	add	r0, r0
     586:	99 0b       	sbc	r25, r25
     588:	28 17       	cp	r18, r24
     58a:	39 07       	cpc	r19, r25
     58c:	8c f3       	brlt	.-30     	; 0x570 <initialise_game+0xdc>
	}
}

static void redraw_all_projectiles(void){
	// For each projectile, determine its position and redraw it
	for(uint8_t i = 0; i < numProjectiles; i++) {
     58e:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <numProjectiles>
     592:	18 16       	cp	r1, r24
     594:	84 f4       	brge	.+32     	; 0x5b6 <initialise_game+0x122>
     596:	c0 e0       	ldi	r28, 0x00	; 0
		redraw_projectile(i, COLOUR_PROJECTILE);
     598:	6f e0       	ldi	r22, 0x0F	; 15
     59a:	8c 2f       	mov	r24, r28
     59c:	0e 94 0a 02 	call	0x414	; 0x414 <redraw_projectile>
	}
}

static void redraw_all_projectiles(void){
	// For each projectile, determine its position and redraw it
	for(uint8_t i = 0; i < numProjectiles; i++) {
     5a0:	cf 5f       	subi	r28, 0xFF	; 255
     5a2:	2c 2f       	mov	r18, r28
     5a4:	30 e0       	ldi	r19, 0x00	; 0
     5a6:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <numProjectiles>
     5aa:	08 2e       	mov	r0, r24
     5ac:	00 0c       	add	r0, r0
     5ae:	99 0b       	sbc	r25, r25
     5b0:	28 17       	cp	r18, r24
     5b2:	39 07       	cpc	r19, r25
     5b4:	8c f3       	brlt	.-30     	; 0x598 <initialise_game+0x104>
		asteroids[i] = GAME_POSITION(x,y);
		numAsteroids++;
	}
	redraw_whole_display();

}
     5b6:	df 91       	pop	r29
     5b8:	cf 91       	pop	r28
     5ba:	1f 91       	pop	r17
     5bc:	0f 91       	pop	r16
     5be:	ff 90       	pop	r15
     5c0:	ef 90       	pop	r14
     5c2:	df 90       	pop	r13
     5c4:	cf 90       	pop	r12
     5c6:	bf 90       	pop	r11
     5c8:	af 90       	pop	r10
     5ca:	7f 90       	pop	r7
     5cc:	6f 90       	pop	r6
     5ce:	5f 90       	pop	r5
     5d0:	4f 90       	pop	r4
     5d2:	08 95       	ret

000005d4 <move_base>:
	// is. This may cause the base to move off the game field
	// (and eventually wrap around - e.g. subtracting 1 from
	// basePosition 256 times will eventually bring it back to
	// same value.
	
	switch(direction){
     5d4:	81 11       	cpse	r24, r1
     5d6:	10 c0       	rjmp	.+32     	; 0x5f8 <move_base+0x24>
		case (MOVE_LEFT):
			//checking if the position is within the bound limit,
			// if so We erase the base from its current position first
			// and Redraw the base. Other wise we do nothing.
			if(basePosition > 0){
     5d8:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <basePosition>
     5dc:	18 16       	cp	r1, r24
     5de:	dc f4       	brge	.+54     	; 0x616 <move_base+0x42>
				redraw_base(COLOUR_BLACK);
     5e0:	80 e0       	ldi	r24, 0x00	; 0
     5e2:	0e 94 b8 01 	call	0x370	; 0x370 <redraw_base>
				basePosition--;
     5e6:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <basePosition>
     5ea:	81 50       	subi	r24, 0x01	; 1
     5ec:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <basePosition>
				redraw_base(COLOUR_BASE);
     5f0:	8f ed       	ldi	r24, 0xDF	; 223
     5f2:	0e 94 b8 01 	call	0x370	; 0x370 <redraw_base>
     5f6:	0f c0       	rjmp	.+30     	; 0x616 <move_base+0x42>
			}
			break;

		default:
			if(basePosition < 7){
     5f8:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <basePosition>
     5fc:	87 30       	cpi	r24, 0x07	; 7
     5fe:	5c f4       	brge	.+22     	; 0x616 <move_base+0x42>
				redraw_base(COLOUR_BLACK);
     600:	80 e0       	ldi	r24, 0x00	; 0
     602:	0e 94 b8 01 	call	0x370	; 0x370 <redraw_base>
				basePosition++;
     606:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <basePosition>
     60a:	8f 5f       	subi	r24, 0xFF	; 255
     60c:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <basePosition>
				redraw_base(COLOUR_BASE);
     610:	8f ed       	ldi	r24, 0xDF	; 223
     612:	0e 94 b8 01 	call	0x370	; 0x370 <redraw_base>
			}
		}

	return 1;
}
     616:	81 e0       	ldi	r24, 0x01	; 1
     618:	08 95       	ret

0000061a <fire_projectile>:
// there. We are also limited in the number of projectiles
// we can have in flight (to MAX_PROJECTILES).
// Returns 1 if projectile fired, 0 otherwise.
int8_t fire_projectile(void) {
	uint8_t newProjectileNumber;
	if(numProjectiles < MAX_PROJECTILES && 
     61a:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <numProjectiles>
     61e:	84 30       	cpi	r24, 0x04	; 4
     620:	c4 f5       	brge	.+112    	; 0x692 <fire_projectile+0x78>
			projectile_at(basePosition, 2) == -1) {
     622:	50 91 9a 01 	lds	r21, 0x019A	; 0x80019a <basePosition>
// Check whether there is a projectile at a given position.
// Returns -1 if there is no projectile, otherwise we return
// the projectile number (from 0 to numProjectiles-1).
static int8_t projectile_at(uint8_t x, uint8_t y){
	uint8_t i;
	uint8_t positionToCheck = GAME_POSITION(x,y);
     626:	90 e1       	ldi	r25, 0x10	; 16
     628:	59 9f       	mul	r21, r25
     62a:	90 01       	movw	r18, r0
     62c:	11 24       	eor	r1, r1
     62e:	42 2f       	mov	r20, r18
     630:	42 60       	ori	r20, 0x02	; 2
	for(i=0; i < numProjectiles; i++) {
     632:	68 2f       	mov	r22, r24
     634:	08 2e       	mov	r0, r24
     636:	00 0c       	add	r0, r0
     638:	77 0b       	sbc	r23, r23
     63a:	16 16       	cp	r1, r22
     63c:	17 06       	cpc	r1, r23
     63e:	b4 f4       	brge	.+44     	; 0x66c <fire_projectile+0x52>
		if(projectiles[i] == positionToCheck) {
     640:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <projectiles>
     644:	94 17       	cp	r25, r20
     646:	39 f1       	breq	.+78     	; 0x696 <fire_projectile+0x7c>
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	0a c0       	rjmp	.+20     	; 0x660 <fire_projectile+0x46>
     64c:	f9 01       	movw	r30, r18
     64e:	ef 57       	subi	r30, 0x7F	; 127
     650:	fe 4f       	sbci	r31, 0xFE	; 254
     652:	20 81       	ld	r18, Z
     654:	42 13       	cpse	r20, r18
     656:	04 c0       	rjmp	.+8      	; 0x660 <fire_projectile+0x46>
// there. We are also limited in the number of projectiles
// we can have in flight (to MAX_PROJECTILES).
// Returns 1 if projectile fired, 0 otherwise.
int8_t fire_projectile(void) {
	uint8_t newProjectileNumber;
	if(numProjectiles < MAX_PROJECTILES && 
     658:	9f 3f       	cpi	r25, 0xFF	; 255
     65a:	41 f0       	breq	.+16     	; 0x66c <fire_projectile+0x52>
		newProjectileNumber = numProjectiles++;
		projectiles[newProjectileNumber] = GAME_POSITION(basePosition, 2);
		redraw_projectile(newProjectileNumber, COLOUR_PROJECTILE);
		return 1;
	} else {
		return 0;
     65c:	80 e0       	ldi	r24, 0x00	; 0
     65e:	08 95       	ret
// Returns -1 if there is no projectile, otherwise we return
// the projectile number (from 0 to numProjectiles-1).
static int8_t projectile_at(uint8_t x, uint8_t y){
	uint8_t i;
	uint8_t positionToCheck = GAME_POSITION(x,y);
	for(i=0; i < numProjectiles; i++) {
     660:	9f 5f       	subi	r25, 0xFF	; 255
     662:	29 2f       	mov	r18, r25
     664:	30 e0       	ldi	r19, 0x00	; 0
     666:	26 17       	cp	r18, r22
     668:	37 07       	cpc	r19, r23
     66a:	84 f3       	brlt	.-32     	; 0x64c <fire_projectile+0x32>
	uint8_t newProjectileNumber;
	if(numProjectiles < MAX_PROJECTILES && 
			projectile_at(basePosition, 2) == -1) {
		// Have space to add projectile - add it at the x position of
		// the base, in row 2(y=2)
		newProjectileNumber = numProjectiles++;
     66c:	91 e0       	ldi	r25, 0x01	; 1
     66e:	98 0f       	add	r25, r24
     670:	90 93 85 01 	sts	0x0185, r25	; 0x800185 <numProjectiles>
		projectiles[newProjectileNumber] = GAME_POSITION(basePosition, 2);
     674:	e8 2f       	mov	r30, r24
     676:	f0 e0       	ldi	r31, 0x00	; 0
     678:	ef 57       	subi	r30, 0x7F	; 127
     67a:	fe 4f       	sbci	r31, 0xFE	; 254
     67c:	90 e1       	ldi	r25, 0x10	; 16
     67e:	59 02       	muls	r21, r25
     680:	90 01       	movw	r18, r0
     682:	11 24       	eor	r1, r1
     684:	22 60       	ori	r18, 0x02	; 2
     686:	20 83       	st	Z, r18
		redraw_projectile(newProjectileNumber, COLOUR_PROJECTILE);
     688:	6f e0       	ldi	r22, 0x0F	; 15
     68a:	0e 94 0a 02 	call	0x414	; 0x414 <redraw_projectile>
		return 1;
     68e:	81 e0       	ldi	r24, 0x01	; 1
     690:	08 95       	ret
	} else {
		return 0;
     692:	80 e0       	ldi	r24, 0x00	; 0
     694:	08 95       	ret
     696:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     698:	08 95       	ret

0000069a <is_game_over>:
}

// Returns 1 if the game is over, 0 otherwise. Initially, the game is
// never over.
int8_t is_game_over(void) {
	return terminate;
     69a:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <terminate>
}
     69e:	08 95       	ret

000006a0 <game_over>:

//A method which changes the state of the ga
void game_over(int8_t num){
	terminate = num;
     6a0:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <terminate>
     6a4:	08 95       	ret

000006a6 <check_lives>:
		projectilePosn = projectiles[projectileNumber];
		ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_GAME_POSN(projectilePosn), colour);
	}
}

void check_lives(uint8_t x, uint8_t y){
     6a6:	cf 93       	push	r28
     6a8:	df 93       	push	r29
	if((x  == basePosition  &&  y == 1 ) || (basePosition -1 == x && y == 1) || (basePosition + 1 == x && y == 1) ) {
     6aa:	28 2f       	mov	r18, r24
     6ac:	30 e0       	ldi	r19, 0x00	; 0
     6ae:	90 91 9a 01 	lds	r25, 0x019A	; 0x80019a <basePosition>
     6b2:	49 2f       	mov	r20, r25
     6b4:	09 2e       	mov	r0, r25
     6b6:	00 0c       	add	r0, r0
     6b8:	55 0b       	sbc	r21, r21
     6ba:	24 17       	cp	r18, r20
     6bc:	35 07       	cpc	r19, r21
     6be:	51 f0       	breq	.+20     	; 0x6d4 <check_lives+0x2e>
     6c0:	fa 01       	movw	r30, r20
     6c2:	31 97       	sbiw	r30, 0x01	; 1
     6c4:	2e 17       	cp	r18, r30
     6c6:	3f 07       	cpc	r19, r31
     6c8:	29 f0       	breq	.+10     	; 0x6d4 <check_lives+0x2e>
     6ca:	32 96       	adiw	r30, 0x02	; 2
     6cc:	2e 17       	cp	r18, r30
     6ce:	3f 07       	cpc	r19, r31
     6d0:	09 f0       	breq	.+2      	; 0x6d4 <check_lives+0x2e>
     6d2:	74 c0       	rjmp	.+232    	; 0x7bc <check_lives+0x116>
     6d4:	61 30       	cpi	r22, 0x01	; 1
     6d6:	09 f0       	breq	.+2      	; 0x6da <check_lives+0x34>
     6d8:	71 c0       	rjmp	.+226    	; 0x7bc <check_lives+0x116>
		for(int8_t x = basePosition - 1; x <= basePosition+1; x++) {
     6da:	8f ef       	ldi	r24, 0xFF	; 255
     6dc:	89 0f       	add	r24, r25
     6de:	28 2f       	mov	r18, r24
     6e0:	08 2e       	mov	r0, r24
     6e2:	00 0c       	add	r0, r0
     6e4:	33 0b       	sbc	r19, r19
     6e6:	4f 5f       	subi	r20, 0xFF	; 255
     6e8:	5f 4f       	sbci	r21, 0xFF	; 255
     6ea:	42 17       	cp	r20, r18
     6ec:	53 07       	cpc	r21, r19
     6ee:	14 f1       	brlt	.+68     	; 0x734 <check_lives+0x8e>
     6f0:	d8 e0       	ldi	r29, 0x08	; 8
     6f2:	d9 1b       	sub	r29, r25
     6f4:	c8 2f       	mov	r28, r24
			if (x >= 0 && x < FIELD_WIDTH) {
     6f6:	88 30       	cpi	r24, 0x08	; 8
     6f8:	58 f4       	brcc	.+22     	; 0x710 <check_lives+0x6a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6fa:	8b e7       	ldi	r24, 0x7B	; 123
     6fc:	92 e9       	ldi	r25, 0x92	; 146
     6fe:	01 97       	sbiw	r24, 0x01	; 1
     700:	f1 f7       	brne	.-4      	; 0x6fe <check_lives+0x58>
     702:	00 c0       	rjmp	.+0      	; 0x704 <check_lives+0x5e>
     704:	00 00       	nop
				_delay_ms(150);
				ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_XY(x, 1), COLOUR_RED);
     706:	4f e0       	ldi	r20, 0x0F	; 15
     708:	6d 2f       	mov	r22, r29
     70a:	81 e0       	ldi	r24, 0x01	; 1
     70c:	0e 94 62 06 	call	0xcc4	; 0xcc4 <ledmatrix_update_pixel>
     710:	81 e0       	ldi	r24, 0x01	; 1
     712:	8c 0f       	add	r24, r28
	}
}

void check_lives(uint8_t x, uint8_t y){
	if((x  == basePosition  &&  y == 1 ) || (basePosition -1 == x && y == 1) || (basePosition + 1 == x && y == 1) ) {
		for(int8_t x = basePosition - 1; x <= basePosition+1; x++) {
     714:	90 91 9a 01 	lds	r25, 0x019A	; 0x80019a <basePosition>
     718:	d1 50       	subi	r29, 0x01	; 1
     71a:	48 2f       	mov	r20, r24
     71c:	08 2e       	mov	r0, r24
     71e:	00 0c       	add	r0, r0
     720:	55 0b       	sbc	r21, r21
     722:	29 2f       	mov	r18, r25
     724:	09 2e       	mov	r0, r25
     726:	00 0c       	add	r0, r0
     728:	33 0b       	sbc	r19, r19
     72a:	2f 5f       	subi	r18, 0xFF	; 255
     72c:	3f 4f       	sbci	r19, 0xFF	; 255
     72e:	24 17       	cp	r18, r20
     730:	35 07       	cpc	r19, r21
     732:	04 f7       	brge	.-64     	; 0x6f4 <check_lives+0x4e>
			if (x >= 0 && x < FIELD_WIDTH) {
				_delay_ms(150);
				ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_XY(x, 1), COLOUR_RED);
			}
		}
		ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_XY(basePosition, 2), COLOUR_RED);
     734:	67 e0       	ldi	r22, 0x07	; 7
     736:	69 1b       	sub	r22, r25
     738:	4f e0       	ldi	r20, 0x0F	; 15
     73a:	82 e0       	ldi	r24, 0x02	; 2
     73c:	0e 94 62 06 	call	0xcc4	; 0xcc4 <ledmatrix_update_pixel>
		
		for(int8_t x = basePosition - 1; x <= basePosition+1; x++) {
     740:	90 91 9a 01 	lds	r25, 0x019A	; 0x80019a <basePosition>
     744:	8f ef       	ldi	r24, 0xFF	; 255
     746:	89 0f       	add	r24, r25
     748:	48 2f       	mov	r20, r24
     74a:	08 2e       	mov	r0, r24
     74c:	00 0c       	add	r0, r0
     74e:	55 0b       	sbc	r21, r21
     750:	29 2f       	mov	r18, r25
     752:	09 2e       	mov	r0, r25
     754:	00 0c       	add	r0, r0
     756:	33 0b       	sbc	r19, r19
     758:	2f 5f       	subi	r18, 0xFF	; 255
     75a:	3f 4f       	sbci	r19, 0xFF	; 255
     75c:	24 17       	cp	r18, r20
     75e:	35 07       	cpc	r19, r21
     760:	14 f1       	brlt	.+68     	; 0x7a6 <check_lives+0x100>
     762:	d8 e0       	ldi	r29, 0x08	; 8
     764:	d9 1b       	sub	r29, r25
     766:	c8 2f       	mov	r28, r24
			if (x >= 0 && x < FIELD_WIDTH) {
     768:	88 30       	cpi	r24, 0x08	; 8
     76a:	58 f4       	brcc	.+22     	; 0x782 <check_lives+0xdc>
     76c:	8b e7       	ldi	r24, 0x7B	; 123
     76e:	92 e9       	ldi	r25, 0x92	; 146
     770:	01 97       	sbiw	r24, 0x01	; 1
     772:	f1 f7       	brne	.-4      	; 0x770 <check_lives+0xca>
     774:	00 c0       	rjmp	.+0      	; 0x776 <check_lives+0xd0>
     776:	00 00       	nop
				_delay_ms(150);
				ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_XY(x, 1), COLOUR_BLACK);
     778:	40 e0       	ldi	r20, 0x00	; 0
     77a:	6d 2f       	mov	r22, r29
     77c:	81 e0       	ldi	r24, 0x01	; 1
     77e:	0e 94 62 06 	call	0xcc4	; 0xcc4 <ledmatrix_update_pixel>
     782:	81 e0       	ldi	r24, 0x01	; 1
     784:	8c 0f       	add	r24, r28
				ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_XY(x, 1), COLOUR_RED);
			}
		}
		ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_XY(basePosition, 2), COLOUR_RED);
		
		for(int8_t x = basePosition - 1; x <= basePosition+1; x++) {
     786:	90 91 9a 01 	lds	r25, 0x019A	; 0x80019a <basePosition>
     78a:	d1 50       	subi	r29, 0x01	; 1
     78c:	48 2f       	mov	r20, r24
     78e:	08 2e       	mov	r0, r24
     790:	00 0c       	add	r0, r0
     792:	55 0b       	sbc	r21, r21
     794:	29 2f       	mov	r18, r25
     796:	09 2e       	mov	r0, r25
     798:	00 0c       	add	r0, r0
     79a:	33 0b       	sbc	r19, r19
     79c:	2f 5f       	subi	r18, 0xFF	; 255
     79e:	3f 4f       	sbci	r19, 0xFF	; 255
     7a0:	24 17       	cp	r18, r20
     7a2:	35 07       	cpc	r19, r21
     7a4:	04 f7       	brge	.-64     	; 0x766 <check_lives+0xc0>
			if (x >= 0 && x < FIELD_WIDTH) {
				_delay_ms(150);
				ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_XY(x, 1), COLOUR_BLACK);
			}
		}
		ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_XY(basePosition, 2), COLOUR_BLACK);
     7a6:	67 e0       	ldi	r22, 0x07	; 7
     7a8:	69 1b       	sub	r22, r25
     7aa:	40 e0       	ldi	r20, 0x00	; 0
     7ac:	82 e0       	ldi	r24, 0x02	; 2
     7ae:	0e 94 62 06 	call	0xcc4	; 0xcc4 <ledmatrix_update_pixel>
		redraw_base(COLOUR_BASE);
     7b2:	8f ed       	ldi	r24, 0xDF	; 223
     7b4:	0e 94 b8 01 	call	0x370	; 0x370 <redraw_base>
		set_lives();
     7b8:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <set_lives>
		
	}
}
     7bc:	df 91       	pop	r29
     7be:	cf 91       	pop	r28
     7c0:	08 95       	ret

000007c2 <game_animation>:

void game_animation(uint8_t p, uint8_t y){
     7c2:	bf 92       	push	r11
     7c4:	cf 92       	push	r12
     7c6:	df 92       	push	r13
     7c8:	ef 92       	push	r14
     7ca:	ff 92       	push	r15
     7cc:	0f 93       	push	r16
     7ce:	1f 93       	push	r17
     7d0:	cf 93       	push	r28
     7d2:	df 93       	push	r29
     7d4:	d8 2e       	mov	r13, r24
     7d6:	c6 2e       	mov	r12, r22
	for(int8_t x = p - 1; x <= p+1; x++) {
     7d8:	cf ef       	ldi	r28, 0xFF	; 255
     7da:	c8 0f       	add	r28, r24
     7dc:	e8 2e       	mov	r14, r24
     7de:	f1 2c       	mov	r15, r1
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	e8 1a       	sub	r14, r24
     7e4:	f8 0a       	sbc	r15, r24
     7e6:	8c 2f       	mov	r24, r28
     7e8:	0c 2e       	mov	r0, r28
     7ea:	00 0c       	add	r0, r0
     7ec:	99 0b       	sbc	r25, r25
     7ee:	e8 16       	cp	r14, r24
     7f0:	f9 06       	cpc	r15, r25
     7f2:	0c f4       	brge	.+2      	; 0x7f6 <game_animation+0x34>
     7f4:	4a c0       	rjmp	.+148    	; 0x88a <game_animation+0xc8>
     7f6:	18 e0       	ldi	r17, 0x08	; 8
     7f8:	1d 19       	sub	r17, r13
     7fa:	01 2f       	mov	r16, r17
     7fc:	9c 2f       	mov	r25, r28
		if (x >= 0 && x < FIELD_WIDTH) {
			_delay_ms(150);
			ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_XY(x, y+1), COLOUR_ORANGE);
     7fe:	bb 24       	eor	r11, r11
     800:	b3 94       	inc	r11
     802:	b6 0e       	add	r11, r22
     804:	d9 2f       	mov	r29, r25
	}
}

void game_animation(uint8_t p, uint8_t y){
	for(int8_t x = p - 1; x <= p+1; x++) {
		if (x >= 0 && x < FIELD_WIDTH) {
     806:	98 30       	cpi	r25, 0x08	; 8
     808:	58 f4       	brcc	.+22     	; 0x820 <game_animation+0x5e>
     80a:	8b e7       	ldi	r24, 0x7B	; 123
     80c:	92 e9       	ldi	r25, 0x92	; 146
     80e:	01 97       	sbiw	r24, 0x01	; 1
     810:	f1 f7       	brne	.-4      	; 0x80e <game_animation+0x4c>
     812:	00 c0       	rjmp	.+0      	; 0x814 <game_animation+0x52>
     814:	00 00       	nop
			_delay_ms(150);
			ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_XY(x, y+1), COLOUR_ORANGE);
     816:	4c e3       	ldi	r20, 0x3C	; 60
     818:	60 2f       	mov	r22, r16
     81a:	8b 2d       	mov	r24, r11
     81c:	0e 94 62 06 	call	0xcc4	; 0xcc4 <ledmatrix_update_pixel>
     820:	91 e0       	ldi	r25, 0x01	; 1
     822:	9d 0f       	add	r25, r29
     824:	01 50       	subi	r16, 0x01	; 1
		
	}
}

void game_animation(uint8_t p, uint8_t y){
	for(int8_t x = p - 1; x <= p+1; x++) {
     826:	29 2f       	mov	r18, r25
     828:	09 2e       	mov	r0, r25
     82a:	00 0c       	add	r0, r0
     82c:	33 0b       	sbc	r19, r19
     82e:	e2 16       	cp	r14, r18
     830:	f3 06       	cpc	r15, r19
     832:	44 f7       	brge	.-48     	; 0x804 <game_animation+0x42>
     834:	1c c0       	rjmp	.+56     	; 0x86e <game_animation+0xac>
		}
	}
	ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_XY(p, y+2), COLOUR_ORANGE);
	
	for(int8_t x = p - 1; x <= p+1; x++) {
		if (x >= 0 && x < FIELD_WIDTH) {
     836:	c8 30       	cpi	r28, 0x08	; 8
     838:	58 f4       	brcc	.+22     	; 0x850 <game_animation+0x8e>
     83a:	8b e7       	ldi	r24, 0x7B	; 123
     83c:	92 e9       	ldi	r25, 0x92	; 146
     83e:	01 97       	sbiw	r24, 0x01	; 1
     840:	f1 f7       	brne	.-4      	; 0x83e <game_animation+0x7c>
     842:	00 c0       	rjmp	.+0      	; 0x844 <game_animation+0x82>
     844:	00 00       	nop
			_delay_ms(150);
			ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_XY(x, y+1), COLOUR_BLACK);
     846:	40 e0       	ldi	r20, 0x00	; 0
     848:	61 2f       	mov	r22, r17
     84a:	80 2f       	mov	r24, r16
     84c:	0e 94 62 06 	call	0xcc4	; 0xcc4 <ledmatrix_update_pixel>
     850:	cf 5f       	subi	r28, 0xFF	; 255
     852:	11 50       	subi	r17, 0x01	; 1
			ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_XY(x, y+1), COLOUR_ORANGE);
		}
	}
	ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_XY(p, y+2), COLOUR_ORANGE);
	
	for(int8_t x = p - 1; x <= p+1; x++) {
     854:	8c 2f       	mov	r24, r28
     856:	0c 2e       	mov	r0, r28
     858:	00 0c       	add	r0, r0
     85a:	99 0b       	sbc	r25, r25
     85c:	e8 16       	cp	r14, r24
     85e:	f9 06       	cpc	r15, r25
     860:	54 f7       	brge	.-44     	; 0x836 <game_animation+0x74>
		if (x >= 0 && x < FIELD_WIDTH) {
			_delay_ms(150);
			ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_XY(x, y+1), COLOUR_BLACK);
		}
	}
	ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_XY(p, y+2), COLOUR_BLACK);
     862:	40 e0       	ldi	r20, 0x00	; 0
     864:	6d 2f       	mov	r22, r29
     866:	8d 2d       	mov	r24, r13
     868:	0e 94 62 06 	call	0xcc4	; 0xcc4 <ledmatrix_update_pixel>
}
     86c:	1a c0       	rjmp	.+52     	; 0x8a2 <game_animation+0xe0>
		if (x >= 0 && x < FIELD_WIDTH) {
			_delay_ms(150);
			ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_XY(x, y+1), COLOUR_ORANGE);
		}
	}
	ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_XY(p, y+2), COLOUR_ORANGE);
     86e:	d7 e0       	ldi	r29, 0x07	; 7
     870:	dd 19       	sub	r29, r13
     872:	68 94       	set
     874:	dd 24       	eor	r13, r13
     876:	d1 f8       	bld	r13, 1
     878:	dc 0c       	add	r13, r12
     87a:	4c e3       	ldi	r20, 0x3C	; 60
     87c:	6d 2f       	mov	r22, r29
     87e:	8d 2d       	mov	r24, r13
     880:	0e 94 62 06 	call	0xcc4	; 0xcc4 <ledmatrix_update_pixel>
	
	for(int8_t x = p - 1; x <= p+1; x++) {
		if (x >= 0 && x < FIELD_WIDTH) {
			_delay_ms(150);
			ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_XY(x, y+1), COLOUR_BLACK);
     884:	01 e0       	ldi	r16, 0x01	; 1
     886:	0c 0d       	add	r16, r12
     888:	d6 cf       	rjmp	.-84     	; 0x836 <game_animation+0x74>
		if (x >= 0 && x < FIELD_WIDTH) {
			_delay_ms(150);
			ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_XY(x, y+1), COLOUR_ORANGE);
		}
	}
	ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_XY(p, y+2), COLOUR_ORANGE);
     88a:	d7 e0       	ldi	r29, 0x07	; 7
     88c:	dd 19       	sub	r29, r13
     88e:	68 94       	set
     890:	dd 24       	eor	r13, r13
     892:	d1 f8       	bld	r13, 1
     894:	d6 0e       	add	r13, r22
     896:	4c e3       	ldi	r20, 0x3C	; 60
     898:	6d 2f       	mov	r22, r29
     89a:	8d 2d       	mov	r24, r13
     89c:	0e 94 62 06 	call	0xcc4	; 0xcc4 <ledmatrix_update_pixel>
     8a0:	e0 cf       	rjmp	.-64     	; 0x862 <game_animation+0xa0>
			_delay_ms(150);
			ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_XY(x, y+1), COLOUR_BLACK);
		}
	}
	ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_XY(p, y+2), COLOUR_BLACK);
}
     8a2:	df 91       	pop	r29
     8a4:	cf 91       	pop	r28
     8a6:	1f 91       	pop	r17
     8a8:	0f 91       	pop	r16
     8aa:	ff 90       	pop	r15
     8ac:	ef 90       	pop	r14
     8ae:	df 90       	pop	r13
     8b0:	cf 90       	pop	r12
     8b2:	bf 90       	pop	r11
     8b4:	08 95       	ret

000008b6 <advance_asteroids>:
		return 0;
	}
}
// Returns 1 if projectile fired, 0 otherwise.

void advance_asteroids(void) {
     8b6:	bf 92       	push	r11
     8b8:	cf 92       	push	r12
     8ba:	df 92       	push	r13
     8bc:	ef 92       	push	r14
     8be:	ff 92       	push	r15
     8c0:	0f 93       	push	r16
     8c2:	1f 93       	push	r17
     8c4:	cf 93       	push	r28
     8c6:	df 93       	push	r29
	int8_t x, y;
	int8_t asteroidNumber;
	asteroidNumber = 0;
     8c8:	d1 2c       	mov	r13, r1
// the projectile number (from 0 to numProjectiles-1).
static int8_t projectile_at(uint8_t x, uint8_t y){
	uint8_t i;
	uint8_t positionToCheck = GAME_POSITION(x,y);
	for(i=0; i < numProjectiles; i++) {
		if(projectiles[i] == positionToCheck) {
     8ca:	0f 2e       	mov	r0, r31
     8cc:	f1 e8       	ldi	r31, 0x81	; 129
     8ce:	ef 2e       	mov	r14, r31
     8d0:	f1 e0       	ldi	r31, 0x01	; 1
     8d2:	ff 2e       	mov	r15, r31
     8d4:	f0 2d       	mov	r31, r0

void advance_asteroids(void) {
	int8_t x, y;
	int8_t asteroidNumber;
	asteroidNumber = 0;
	while(asteroidNumber < numAsteroids) {
     8d6:	cc c0       	rjmp	.+408    	; 0xa70 <__stack+0x171>
		// Get the current position of the projectile
		x = GET_X_POSITION(asteroids[asteroidNumber]);
     8d8:	0d 2d       	mov	r16, r13
     8da:	0d 2c       	mov	r0, r13
     8dc:	00 0c       	add	r0, r0
     8de:	11 0b       	sbc	r17, r17
     8e0:	f8 01       	movw	r30, r16
     8e2:	ea 57       	subi	r30, 0x7A	; 122
     8e4:	fe 4f       	sbci	r31, 0xFE	; 254
     8e6:	60 81       	ld	r22, Z
     8e8:	d6 2f       	mov	r29, r22
     8ea:	d2 95       	swap	r29
     8ec:	df 70       	andi	r29, 0x0F	; 15
		y = GET_Y_POSITION(asteroids[asteroidNumber]);
		// Work out the new position (but don't update the projectil
		// location yet - we only do that if we know the move is valid)
		y = y-1;
     8ee:	c6 2f       	mov	r28, r22
     8f0:	cf 70       	andi	r28, 0x0F	; 15
     8f2:	cc 24       	eor	r12, r12
     8f4:	ca 94       	dec	r12
     8f6:	cc 0e       	add	r12, r28
		// Chek if new position would be off the top of the display
		if(y == 0) {
     8f8:	89 f5       	brne	.+98     	; 0x95c <__stack+0x5d>
			
			redraw_asteroid(asteroidNumber, COLOUR_BLACK);
     8fa:	cd 2c       	mov	r12, r13
     8fc:	60 e0       	ldi	r22, 0x00	; 0
     8fe:	8d 2d       	mov	r24, r13
     900:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <redraw_asteroid>
			// Update the asteroid's position
			int newColumn;
			while(1){
				newColumn = (uint8_t)(random() % FIELD_WIDTH);
				if(newColumn != x){
     904:	cd 2f       	mov	r28, r29
     906:	dd 0f       	add	r29, r29
     908:	dd 0b       	sbc	r29, r29
			
			redraw_asteroid(asteroidNumber, COLOUR_BLACK);
			// Update the asteroid's position
			int newColumn;
			while(1){
				newColumn = (uint8_t)(random() % FIELD_WIDTH);
     90a:	0e 94 05 12 	call	0x240a	; 0x240a <random>
     90e:	dc 01       	movw	r26, r24
     910:	cb 01       	movw	r24, r22
     912:	87 70       	andi	r24, 0x07	; 7
     914:	99 27       	eor	r25, r25
     916:	aa 27       	eor	r26, r26
     918:	b0 78       	andi	r27, 0x80	; 128
     91a:	bb 23       	and	r27, r27
     91c:	54 f4       	brge	.+20     	; 0x932 <__stack+0x33>
     91e:	01 97       	sbiw	r24, 0x01	; 1
     920:	a1 09       	sbc	r26, r1
     922:	b1 09       	sbc	r27, r1
     924:	88 6f       	ori	r24, 0xF8	; 248
     926:	9f 6f       	ori	r25, 0xFF	; 255
     928:	af 6f       	ori	r26, 0xFF	; 255
     92a:	bf 6f       	ori	r27, 0xFF	; 255
     92c:	01 96       	adiw	r24, 0x01	; 1
     92e:	a1 1d       	adc	r26, r1
     930:	b1 1d       	adc	r27, r1
     932:	68 2f       	mov	r22, r24
     934:	70 e0       	ldi	r23, 0x00	; 0
				if(newColumn != x){
     936:	6c 17       	cp	r22, r28
     938:	7d 07       	cpc	r23, r29
     93a:	39 f3       	breq	.-50     	; 0x90a <__stack+0xb>
					break;
				}
			}
			asteroids[asteroidNumber] = GAME_POSITION(newColumn,FIELD_HEIGHT-1);
     93c:	f8 01       	movw	r30, r16
     93e:	ea 57       	subi	r30, 0x7A	; 122
     940:	fe 4f       	sbci	r31, 0xFE	; 254
     942:	62 95       	swap	r22
     944:	72 95       	swap	r23
     946:	70 7f       	andi	r23, 0xF0	; 240
     948:	76 27       	eor	r23, r22
     94a:	60 7f       	andi	r22, 0xF0	; 240
     94c:	76 27       	eor	r23, r22
     94e:	6f 60       	ori	r22, 0x0F	; 15
     950:	60 83       	st	Z, r22
			// Redraw the projectile
			redraw_asteroid(asteroidNumber, COLOUR_ASTEROID);
     952:	60 ef       	ldi	r22, 0xF0	; 240
     954:	8c 2d       	mov	r24, r12
     956:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <redraw_asteroid>
     95a:	8a c0       	rjmp	.+276    	; 0xa70 <__stack+0x171>
			// Move on to the next projectile (we don't do this if a projectile
			//asteroidNumber++;
			// decreased by 1
		} else {
			check_lives(x,y);
     95c:	6c 2d       	mov	r22, r12
     95e:	8d 2f       	mov	r24, r29
     960:	0e 94 53 03 	call	0x6a6	; 0x6a6 <check_lives>
			redraw_base(COLOUR_BASE);
     964:	8f ed       	ldi	r24, 0xDF	; 223
     966:	0e 94 b8 01 	call	0x370	; 0x370 <redraw_base>
			if(asteroid_at(x,y + 1) != -1  && projectile_at(x, y) != -1){  //
     96a:	6c 2f       	mov	r22, r28
     96c:	8d 2f       	mov	r24, r29
     96e:	0e 94 90 01 	call	0x320	; 0x320 <asteroid_at>
     972:	8f 3f       	cpi	r24, 0xFF	; 255
     974:	09 f4       	brne	.+2      	; 0x978 <__stack+0x79>
     976:	68 c0       	rjmp	.+208    	; 0xa48 <__stack+0x149>
// Check whether there is a projectile at a given position.
// Returns -1 if there is no projectile, otherwise we return
// the projectile number (from 0 to numProjectiles-1).
static int8_t projectile_at(uint8_t x, uint8_t y){
	uint8_t i;
	uint8_t positionToCheck = GAME_POSITION(x,y);
     978:	20 e1       	ldi	r18, 0x10	; 16
     97a:	d2 9f       	mul	r29, r18
     97c:	c0 01       	movw	r24, r0
     97e:	11 24       	eor	r1, r1
     980:	4c 2d       	mov	r20, r12
     982:	4f 70       	andi	r20, 0x0F	; 15
     984:	48 2b       	or	r20, r24
	for(i=0; i < numProjectiles; i++) {
     986:	60 91 85 01 	lds	r22, 0x0185	; 0x800185 <numProjectiles>
     98a:	06 2e       	mov	r0, r22
     98c:	00 0c       	add	r0, r0
     98e:	77 0b       	sbc	r23, r23
     990:	16 16       	cp	r1, r22
     992:	17 06       	cpc	r1, r23
     994:	0c f0       	brlt	.+2      	; 0x998 <__stack+0x99>
     996:	58 c0       	rjmp	.+176    	; 0xa48 <__stack+0x149>
		if(projectiles[i] == positionToCheck) {
     998:	f7 01       	movw	r30, r14
     99a:	80 81       	ld	r24, Z
     99c:	48 17       	cp	r20, r24
     99e:	99 f0       	breq	.+38     	; 0x9c6 <__stack+0xc7>
     9a0:	80 e0       	ldi	r24, 0x00	; 0
     9a2:	0a c0       	rjmp	.+20     	; 0x9b8 <__stack+0xb9>
     9a4:	f9 01       	movw	r30, r18
     9a6:	ef 57       	subi	r30, 0x7F	; 127
     9a8:	fe 4f       	sbci	r31, 0xFE	; 254
     9aa:	90 81       	ld	r25, Z
     9ac:	49 13       	cpse	r20, r25
     9ae:	04 c0       	rjmp	.+8      	; 0x9b8 <__stack+0xb9>
			// Projectile i is at the given position
			return i;
     9b0:	c8 2f       	mov	r28, r24
			//asteroidNumber++;
			// decreased by 1
		} else {
			check_lives(x,y);
			redraw_base(COLOUR_BASE);
			if(asteroid_at(x,y + 1) != -1  && projectile_at(x, y) != -1){  //
     9b2:	8f 3f       	cpi	r24, 0xFF	; 255
     9b4:	49 f4       	brne	.+18     	; 0x9c8 <__stack+0xc9>
     9b6:	48 c0       	rjmp	.+144    	; 0xa48 <__stack+0x149>
// Returns -1 if there is no projectile, otherwise we return
// the projectile number (from 0 to numProjectiles-1).
static int8_t projectile_at(uint8_t x, uint8_t y){
	uint8_t i;
	uint8_t positionToCheck = GAME_POSITION(x,y);
	for(i=0; i < numProjectiles; i++) {
     9b8:	8f 5f       	subi	r24, 0xFF	; 255
     9ba:	28 2f       	mov	r18, r24
     9bc:	30 e0       	ldi	r19, 0x00	; 0
     9be:	26 17       	cp	r18, r22
     9c0:	37 07       	cpc	r19, r23
     9c2:	84 f3       	brlt	.-32     	; 0x9a4 <__stack+0xa5>
     9c4:	41 c0       	rjmp	.+130    	; 0xa48 <__stack+0x149>
		if(projectiles[i] == positionToCheck) {
			// Projectile i is at the given position
			return i;
     9c6:	c0 e0       	ldi	r28, 0x00	; 0
			check_lives(x,y);
			redraw_base(COLOUR_BASE);
			if(asteroid_at(x,y + 1) != -1  && projectile_at(x, y) != -1){  //
				//int8_t asteroid_position = asteroid_at(x,y + 1);
				uint8_t projectileNumber = projectile_at(x,y);
				game_animation(x,y);
     9c8:	6c 2d       	mov	r22, r12
     9ca:	8d 2f       	mov	r24, r29
     9cc:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <game_animation>
				//remove_asteroid(asteroid_at(x,y + 1));
				remove_projectile(projectileNumber);
     9d0:	8c 2f       	mov	r24, r28
     9d2:	0e 94 21 02 	call	0x442	; 0x442 <remove_projectile>
				asteroidNumber ++;
     9d6:	dd 2d       	mov	r29, r13
     9d8:	d3 94       	inc	r13
				add_to_score(1);
     9da:	81 e0       	ldi	r24, 0x01	; 1
     9dc:	90 e0       	ldi	r25, 0x00	; 0
     9de:	0e 94 98 09 	call	0x1330	; 0x1330 <add_to_score>
				y = (uint8_t)(FIELD_HEIGHT-1);
				
				do {
					//Generate random x position - somewhere from 0
					//// to FIELD_WIDTH - 1
					x = (uint8_t)(random() % FIELD_WIDTH);
     9e2:	0e 94 05 12 	call	0x240a	; 0x240a <random>
     9e6:	dc 01       	movw	r26, r24
     9e8:	cb 01       	movw	r24, r22
     9ea:	87 70       	andi	r24, 0x07	; 7
     9ec:	99 27       	eor	r25, r25
     9ee:	aa 27       	eor	r26, r26
     9f0:	b0 78       	andi	r27, 0x80	; 128
     9f2:	bb 23       	and	r27, r27
     9f4:	54 f4       	brge	.+20     	; 0xa0a <__stack+0x10b>
     9f6:	01 97       	sbiw	r24, 0x01	; 1
     9f8:	a1 09       	sbc	r26, r1
     9fa:	b1 09       	sbc	r27, r1
     9fc:	88 6f       	ori	r24, 0xF8	; 248
     9fe:	9f 6f       	ori	r25, 0xFF	; 255
     a00:	af 6f       	ori	r26, 0xFF	; 255
     a02:	bf 6f       	ori	r27, 0xFF	; 255
     a04:	01 96       	adiw	r24, 0x01	; 1
     a06:	a1 1d       	adc	r26, r1
     a08:	b1 1d       	adc	r27, r1
     a0a:	c8 2f       	mov	r28, r24
					

				} while(asteroid_at(x,y) != -1 );
     a0c:	6f e0       	ldi	r22, 0x0F	; 15
     a0e:	0e 94 90 01 	call	0x320	; 0x320 <asteroid_at>
     a12:	8f 3f       	cpi	r24, 0xFF	; 255
     a14:	31 f7       	brne	.-52     	; 0x9e2 <__stack+0xe3>
				// Remove the projectile from the display
				redraw_asteroid(asteroidNumber, COLOUR_BLACK);
     a16:	60 e0       	ldi	r22, 0x00	; 0
     a18:	8d 2d       	mov	r24, r13
     a1a:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <redraw_asteroid>
				// Update the projectile's position
				asteroids[asteroidNumber] = GAME_POSITION(x,y);
     a1e:	ed 2d       	mov	r30, r13
     a20:	0d 2c       	mov	r0, r13
     a22:	00 0c       	add	r0, r0
     a24:	ff 0b       	sbc	r31, r31
     a26:	ea 57       	subi	r30, 0x7A	; 122
     a28:	fe 4f       	sbci	r31, 0xFE	; 254
     a2a:	20 e1       	ldi	r18, 0x10	; 16
     a2c:	c2 02       	muls	r28, r18
     a2e:	c0 01       	movw	r24, r0
     a30:	11 24       	eor	r1, r1
     a32:	8f 60       	ori	r24, 0x0F	; 15
     a34:	80 83       	st	Z, r24
				// Redraw the projectile
				redraw_asteroid(asteroidNumber, COLOUR_ASTEROID);
     a36:	60 ef       	ldi	r22, 0xF0	; 240
     a38:	8d 2d       	mov	r24, r13
     a3a:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <redraw_asteroid>
				// Move on to the next projectile (we don't do this if a projectile
				asteroidNumber++;
     a3e:	68 94       	set
     a40:	dd 24       	eor	r13, r13
     a42:	d1 f8       	bld	r13, 1
     a44:	dd 0e       	add	r13, r29
			//asteroidNumber++;
			// decreased by 1
		} else {
			check_lives(x,y);
			redraw_base(COLOUR_BASE);
			if(asteroid_at(x,y + 1) != -1  && projectile_at(x, y) != -1){  //
     a46:	14 c0       	rjmp	.+40     	; 0xa70 <__stack+0x171>
				// Move on to the next projectile (we don't do this if a projectile
				asteroidNumber++;
				
			} else {
				// Remove the projectile from the display
				redraw_asteroid(asteroidNumber, COLOUR_BLACK);
     a48:	60 e0       	ldi	r22, 0x00	; 0
     a4a:	8d 2d       	mov	r24, r13
     a4c:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <redraw_asteroid>
				// Update the projectile's position
				asteroids[asteroidNumber] = GAME_POSITION(x,y);
     a50:	f8 01       	movw	r30, r16
     a52:	ea 57       	subi	r30, 0x7A	; 122
     a54:	fe 4f       	sbci	r31, 0xFE	; 254
     a56:	20 e1       	ldi	r18, 0x10	; 16
     a58:	d2 9f       	mul	r29, r18
     a5a:	c0 01       	movw	r24, r0
     a5c:	11 24       	eor	r1, r1
     a5e:	dc 2d       	mov	r29, r12
     a60:	df 70       	andi	r29, 0x0F	; 15
     a62:	d8 2b       	or	r29, r24
     a64:	d0 83       	st	Z, r29
				// Redraw the projectile
				redraw_asteroid(asteroidNumber, COLOUR_ASTEROID);
     a66:	60 ef       	ldi	r22, 0xF0	; 240
     a68:	8d 2d       	mov	r24, r13
     a6a:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <redraw_asteroid>
				// Move on to the next projectile (we don't do this if a projectile
				asteroidNumber++;
     a6e:	d3 94       	inc	r13

void advance_asteroids(void) {
	int8_t x, y;
	int8_t asteroidNumber;
	asteroidNumber = 0;
	while(asteroidNumber < numAsteroids) {
     a70:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <numAsteroids>
     a74:	d8 16       	cp	r13, r24
     a76:	0c f4       	brge	.+2      	; 0xa7a <__stack+0x17b>
     a78:	2f cf       	rjmp	.-418    	; 0x8d8 <advance_asteroids+0x22>
			}
		}
	}
	//redraw_all_asteroids();

}
     a7a:	df 91       	pop	r29
     a7c:	cf 91       	pop	r28
     a7e:	1f 91       	pop	r17
     a80:	0f 91       	pop	r16
     a82:	ff 90       	pop	r15
     a84:	ef 90       	pop	r14
     a86:	df 90       	pop	r13
     a88:	cf 90       	pop	r12
     a8a:	bf 90       	pop	r11
     a8c:	08 95       	ret

00000a8e <advance_projectiles>:

// Move projectiles up by one position, and remove those that 
// have gone off the top or that hit an asteroid.
void advance_projectiles(void) {
     a8e:	ef 92       	push	r14
     a90:	ff 92       	push	r15
     a92:	0f 93       	push	r16
     a94:	1f 93       	push	r17
     a96:	cf 93       	push	r28
     a98:	df 93       	push	r29
	uint8_t x, y;
	int8_t projectileNumber;

	projectileNumber = 0;
     a9a:	d0 e0       	ldi	r29, 0x00	; 0
	while(projectileNumber < numProjectiles) {
     a9c:	8c c0       	rjmp	.+280    	; 0xbb6 <advance_projectiles+0x128>
		// Get the current position of the projectile
		x = GET_X_POSITION(projectiles[projectileNumber]);
     a9e:	ed 2e       	mov	r14, r29
     aa0:	0d 2e       	mov	r0, r29
     aa2:	00 0c       	add	r0, r0
     aa4:	ff 08       	sbc	r15, r15
     aa6:	f7 01       	movw	r30, r14
     aa8:	ef 57       	subi	r30, 0x7F	; 127
     aaa:	fe 4f       	sbci	r31, 0xFE	; 254
     aac:	80 81       	ld	r24, Z
		y = GET_Y_POSITION(projectiles[projectileNumber]);
     aae:	c8 2f       	mov	r28, r24
     ab0:	cf 70       	andi	r28, 0x0F	; 15
		
		// Work out the new position (but don't update the projectile 
		// location yet - we only do that if we know the move is valid)
		y = y+1;
     ab2:	cf 5f       	subi	r28, 0xFF	; 255
		
		// Check if new position would be off the top of the display
		if(y == FIELD_HEIGHT-1) {
     ab4:	cf 30       	cpi	r28, 0x0F	; 15
     ab6:	21 f4       	brne	.+8      	; 0xac0 <advance_projectiles+0x32>
			// Yes - remove the projectile. (Note that we haven't updated
			// the position of the projectile itself - so the projectile 
			// will be removed from its old location.)
			remove_projectile(projectileNumber);
     ab8:	8d 2f       	mov	r24, r29
     aba:	0e 94 21 02 	call	0x442	; 0x442 <remove_projectile>
     abe:	7b c0       	rjmp	.+246    	; 0xbb6 <advance_projectiles+0x128>
	int8_t projectileNumber;

	projectileNumber = 0;
	while(projectileNumber < numProjectiles) {
		// Get the current position of the projectile
		x = GET_X_POSITION(projectiles[projectileNumber]);
     ac0:	08 2f       	mov	r16, r24
     ac2:	02 95       	swap	r16
     ac4:	0f 70       	andi	r16, 0x0F	; 15
		} else {
			// Projectile is not going off the top of the display
			// CHECK HERE IF THE NEW PROJECTILE LOCATION CORRESPONDS TO
			// AN ASTEROID LOCATION. IF IT DOES, REMOVE THE PROJECTILE
			// AND THE ASTEROID.
			if(asteroid_at(x,y) != -1){
     ac6:	6c 2f       	mov	r22, r28
     ac8:	80 2f       	mov	r24, r16
     aca:	0e 94 90 01 	call	0x320	; 0x320 <asteroid_at>
     ace:	18 2f       	mov	r17, r24
     ad0:	8f 3f       	cpi	r24, 0xFF	; 255
     ad2:	09 f4       	brne	.+2      	; 0xad6 <advance_projectiles+0x48>
     ad4:	5d c0       	rjmp	.+186    	; 0xb90 <advance_projectiles+0x102>

/* Remove asteroid with the given index number (from 0 to
** numAsteroids - 1).
*/
static void remove_asteroid(int8_t asteroidNumber) {
	if(asteroidNumber < 0 || asteroidNumber >= numAsteroids) {
     ad6:	88 23       	and	r24, r24
     ad8:	0c f1       	brlt	.+66     	; 0xb1c <advance_projectiles+0x8e>
     ada:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <numAsteroids>
     ade:	18 17       	cp	r17, r24
     ae0:	ec f4       	brge	.+58     	; 0xb1c <advance_projectiles+0x8e>
		// Invalid index - do nothing
		return;
	}
	
	// Remove the asteroid from the display
	redraw_asteroid(asteroidNumber, COLOUR_BLACK);
     ae2:	60 e0       	ldi	r22, 0x00	; 0
     ae4:	81 2f       	mov	r24, r17
     ae6:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <redraw_asteroid>
	
	if(asteroidNumber < numAsteroids - 1) {
     aea:	81 2f       	mov	r24, r17
     aec:	11 0f       	add	r17, r17
     aee:	99 0b       	sbc	r25, r25
     af0:	40 91 80 01 	lds	r20, 0x0180	; 0x800180 <numAsteroids>
     af4:	24 2f       	mov	r18, r20
     af6:	04 2e       	mov	r0, r20
     af8:	00 0c       	add	r0, r0
     afa:	33 0b       	sbc	r19, r19
     afc:	21 50       	subi	r18, 0x01	; 1
     afe:	31 09       	sbc	r19, r1
     b00:	82 17       	cp	r24, r18
     b02:	93 07       	cpc	r25, r19
     b04:	44 f4       	brge	.+16     	; 0xb16 <advance_projectiles+0x88>
		// Asteroid is not the last one in the list
		// - move the last one in the list to this position
		asteroids[asteroidNumber] = asteroids[numAsteroids - 1];
     b06:	f9 01       	movw	r30, r18
     b08:	ea 57       	subi	r30, 0x7A	; 122
     b0a:	fe 4f       	sbci	r31, 0xFE	; 254
     b0c:	20 81       	ld	r18, Z
     b0e:	fc 01       	movw	r30, r24
     b10:	ea 57       	subi	r30, 0x7A	; 122
     b12:	fe 4f       	sbci	r31, 0xFE	; 254
     b14:	20 83       	st	Z, r18
	}
	// Last position in asteroids array is no longer used
	numAsteroids--;
     b16:	41 50       	subi	r20, 0x01	; 1
     b18:	40 93 80 01 	sts	0x0180, r20	; 0x800180 <numAsteroids>
			// AND THE ASTEROID.
			if(asteroid_at(x,y) != -1){
				//uint8_t asteroid_position = asteroid_at(x,y);
				
				remove_asteroid(asteroid_at(x,y));
				game_animation(x,y);
     b1c:	6c 2f       	mov	r22, r28
     b1e:	80 2f       	mov	r24, r16
     b20:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <game_animation>
				remove_projectile(projectileNumber);
     b24:	8d 2f       	mov	r24, r29
     b26:	0e 94 21 02 	call	0x442	; 0x442 <remove_projectile>
				add_to_score(1);
     b2a:	81 e0       	ldi	r24, 0x01	; 1
     b2c:	90 e0       	ldi	r25, 0x00	; 0
     b2e:	0e 94 98 09 	call	0x1330	; 0x1330 <add_to_score>
				y = (uint8_t)(FIELD_HEIGHT-1);
		
				do {
						 //Generate random x position - somewhere from 0
						//// to FIELD_WIDTH - 1
						x = (uint8_t)(random() % FIELD_WIDTH);
     b32:	0e 94 05 12 	call	0x240a	; 0x240a <random>
     b36:	dc 01       	movw	r26, r24
     b38:	cb 01       	movw	r24, r22
     b3a:	87 70       	andi	r24, 0x07	; 7
     b3c:	99 27       	eor	r25, r25
     b3e:	aa 27       	eor	r26, r26
     b40:	b0 78       	andi	r27, 0x80	; 128
     b42:	bb 23       	and	r27, r27
     b44:	54 f4       	brge	.+20     	; 0xb5a <advance_projectiles+0xcc>
     b46:	01 97       	sbiw	r24, 0x01	; 1
     b48:	a1 09       	sbc	r26, r1
     b4a:	b1 09       	sbc	r27, r1
     b4c:	88 6f       	ori	r24, 0xF8	; 248
     b4e:	9f 6f       	ori	r25, 0xFF	; 255
     b50:	af 6f       	ori	r26, 0xFF	; 255
     b52:	bf 6f       	ori	r27, 0xFF	; 255
     b54:	01 96       	adiw	r24, 0x01	; 1
     b56:	a1 1d       	adc	r26, r1
     b58:	b1 1d       	adc	r27, r1
     b5a:	c8 2f       	mov	r28, r24
						//// Generate random y position - somewhere from 3
						//// to FIELD_HEIGHT - 1 (i.e., not in the lowest
						//// three rows)
						
					} while(asteroid_at(x,y) != -1); //&& !(GAME_POSITION(x,y) != asteroid_position)
     b5c:	6f e0       	ldi	r22, 0x0F	; 15
     b5e:	0e 94 90 01 	call	0x320	; 0x320 <asteroid_at>
     b62:	8f 3f       	cpi	r24, 0xFF	; 255
     b64:	31 f7       	brne	.-52     	; 0xb32 <advance_projectiles+0xa4>
					////Now we check if this position does not correspond to the previous position.
					////if not, we redraw the asteroid.
					//if(GAME_POSITION(x,y) != asteroid_position) {
						asteroids[numAsteroids] = GAME_POSITION(x,y);
     b66:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <numAsteroids>
     b6a:	e8 2f       	mov	r30, r24
     b6c:	08 2e       	mov	r0, r24
     b6e:	00 0c       	add	r0, r0
     b70:	ff 0b       	sbc	r31, r31
     b72:	ea 57       	subi	r30, 0x7A	; 122
     b74:	fe 4f       	sbci	r31, 0xFE	; 254
     b76:	90 e1       	ldi	r25, 0x10	; 16
     b78:	c9 9f       	mul	r28, r25
     b7a:	90 01       	movw	r18, r0
     b7c:	11 24       	eor	r1, r1
     b7e:	2f 60       	ori	r18, 0x0F	; 15
     b80:	20 83       	st	Z, r18
						numAsteroids++;
     b82:	8f 5f       	subi	r24, 0xFF	; 255
     b84:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <numAsteroids>
						redraw_asteroid(numAsteroids, COLOUR_ASTEROID);
     b88:	60 ef       	ldi	r22, 0xF0	; 240
     b8a:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <redraw_asteroid>
     b8e:	13 c0       	rjmp	.+38     	; 0xbb6 <advance_projectiles+0x128>
						//i = MAX_ASTEROIDS;
				
			} else {
				// OTHERWISE..
				//Remove the projectile from the display
				redraw_projectile(projectileNumber, COLOUR_BLACK);
     b90:	60 e0       	ldi	r22, 0x00	; 0
     b92:	8d 2f       	mov	r24, r29
     b94:	0e 94 0a 02 	call	0x414	; 0x414 <redraw_projectile>

				// Update the projectile's position
				projectiles[projectileNumber] = GAME_POSITION(x,y);
     b98:	f7 01       	movw	r30, r14
     b9a:	ef 57       	subi	r30, 0x7F	; 127
     b9c:	fe 4f       	sbci	r31, 0xFE	; 254
     b9e:	20 e1       	ldi	r18, 0x10	; 16
     ba0:	02 9f       	mul	r16, r18
     ba2:	c0 01       	movw	r24, r0
     ba4:	11 24       	eor	r1, r1
     ba6:	cf 70       	andi	r28, 0x0F	; 15
     ba8:	c8 2b       	or	r28, r24
     baa:	c0 83       	st	Z, r28

				// Redraw the projectile
				redraw_projectile(projectileNumber, COLOUR_PROJECTILE);
     bac:	6f e0       	ldi	r22, 0x0F	; 15
     bae:	8d 2f       	mov	r24, r29
     bb0:	0e 94 0a 02 	call	0x414	; 0x414 <redraw_projectile>

				// Move on to the next projectile (we don't do this if a projectile
				// is removed since projectiles will be shuffled in the list and the
				// next projectile (if any) will take on the same projectile number)
				projectileNumber++;
     bb4:	df 5f       	subi	r29, 0xFF	; 255
void advance_projectiles(void) {
	uint8_t x, y;
	int8_t projectileNumber;

	projectileNumber = 0;
	while(projectileNumber < numProjectiles) {
     bb6:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <numProjectiles>
     bba:	d8 17       	cp	r29, r24
     bbc:	0c f4       	brge	.+2      	; 0xbc0 <advance_projectiles+0x132>
     bbe:	6f cf       	rjmp	.-290    	; 0xa9e <advance_projectiles+0x10>
				// next projectile (if any) will take on the same projectile number)
				projectileNumber++;
			}
		}			
	}
}
     bc0:	df 91       	pop	r29
     bc2:	cf 91       	pop	r28
     bc4:	1f 91       	pop	r17
     bc6:	0f 91       	pop	r16
     bc8:	ff 90       	pop	r15
     bca:	ef 90       	pop	r14
     bcc:	08 95       	ret

00000bce <game_visual>:
	}
	ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_XY(p, y+2), COLOUR_BLACK);
}


void game_visual(void) {
     bce:	1f 93       	push	r17
     bd0:	cf 93       	push	r28
     bd2:	df 93       	push	r29
	int8_t x = 0;
	ledmatrix_clear();
     bd4:	0e 94 a5 06 	call	0xd4a	; 0xd4a <ledmatrix_clear>
	for(int8_t x = 0; x <= 7; x++) {
     bd8:	80 e0       	ldi	r24, 0x00	; 0
		if (x >= 0 && x < FIELD_WIDTH) {
			_delay_ms(150);
			ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_XY(x, (FIELD_HEIGHT-1)-x), COLOUR_ORANGE);
     bda:	17 e0       	ldi	r17, 0x07	; 7
     bdc:	df e0       	ldi	r29, 0x0F	; 15
     bde:	c8 2f       	mov	r28, r24

void game_visual(void) {
	int8_t x = 0;
	ledmatrix_clear();
	for(int8_t x = 0; x <= 7; x++) {
		if (x >= 0 && x < FIELD_WIDTH) {
     be0:	88 30       	cpi	r24, 0x08	; 8
     be2:	70 f4       	brcc	.+28     	; 0xc00 <game_visual+0x32>
     be4:	eb e7       	ldi	r30, 0x7B	; 123
     be6:	f2 e9       	ldi	r31, 0x92	; 146
     be8:	31 97       	sbiw	r30, 0x01	; 1
     bea:	f1 f7       	brne	.-4      	; 0xbe8 <game_visual+0x1a>
     bec:	00 c0       	rjmp	.+0      	; 0xbee <game_visual+0x20>
     bee:	00 00       	nop
			_delay_ms(150);
			ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_XY(x, (FIELD_HEIGHT-1)-x), COLOUR_ORANGE);
     bf0:	61 2f       	mov	r22, r17
     bf2:	68 1b       	sub	r22, r24
     bf4:	4c e3       	ldi	r20, 0x3C	; 60
     bf6:	fd 2f       	mov	r31, r29
     bf8:	f8 1b       	sub	r31, r24
     bfa:	8f 2f       	mov	r24, r31
     bfc:	0e 94 62 06 	call	0xcc4	; 0xcc4 <ledmatrix_update_pixel>
     c00:	81 e0       	ldi	r24, 0x01	; 1
     c02:	8c 0f       	add	r24, r28


void game_visual(void) {
	int8_t x = 0;
	ledmatrix_clear();
	for(int8_t x = 0; x <= 7; x++) {
     c04:	88 30       	cpi	r24, 0x08	; 8
     c06:	59 f7       	brne	.-42     	; 0xbde <game_visual+0x10>
			_delay_ms(150);
			ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_XY(x, (FIELD_HEIGHT-1)-x), COLOUR_ORANGE);
		}
	}
	
	ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_XY(x, FIELD_HEIGHT-5), COLOUR_ORANGE);
     c08:	4c e3       	ldi	r20, 0x3C	; 60
     c0a:	67 e0       	ldi	r22, 0x07	; 7
     c0c:	8b e0       	ldi	r24, 0x0B	; 11
     c0e:	0e 94 62 06 	call	0xcc4	; 0xcc4 <ledmatrix_update_pixel>
	for(int8_t x = FIELD_WIDTH-1; x >=0 ; x--) {
     c12:	87 e0       	ldi	r24, 0x07	; 7
		if (x >= 0 && x < FIELD_WIDTH) {
			_delay_ms(150);
			ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_XY(x, x+5), COLOUR_YELLOW);
     c14:	d7 e0       	ldi	r29, 0x07	; 7
     c16:	c8 2f       	mov	r28, r24
		}
	}
	
	ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_XY(x, FIELD_HEIGHT-5), COLOUR_ORANGE);
	for(int8_t x = FIELD_WIDTH-1; x >=0 ; x--) {
		if (x >= 0 && x < FIELD_WIDTH) {
     c18:	88 30       	cpi	r24, 0x08	; 8
     c1a:	60 f4       	brcc	.+24     	; 0xc34 <game_visual+0x66>
     c1c:	eb e7       	ldi	r30, 0x7B	; 123
     c1e:	f2 e9       	ldi	r31, 0x92	; 146
     c20:	31 97       	sbiw	r30, 0x01	; 1
     c22:	f1 f7       	brne	.-4      	; 0xc20 <game_visual+0x52>
     c24:	00 c0       	rjmp	.+0      	; 0xc26 <game_visual+0x58>
     c26:	00 00       	nop
			_delay_ms(150);
			ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_XY(x, x+5), COLOUR_YELLOW);
     c28:	6d 2f       	mov	r22, r29
     c2a:	68 1b       	sub	r22, r24
     c2c:	4f ed       	ldi	r20, 0xDF	; 223
     c2e:	8b 5f       	subi	r24, 0xFB	; 251
     c30:	0e 94 62 06 	call	0xcc4	; 0xcc4 <ledmatrix_update_pixel>
     c34:	8f ef       	ldi	r24, 0xFF	; 255
     c36:	8c 0f       	add	r24, r28
			ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_XY(x, (FIELD_HEIGHT-1)-x), COLOUR_ORANGE);
		}
	}
	
	ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_XY(x, FIELD_HEIGHT-5), COLOUR_ORANGE);
	for(int8_t x = FIELD_WIDTH-1; x >=0 ; x--) {
     c38:	8f 3f       	cpi	r24, 0xFF	; 255
     c3a:	69 f7       	brne	.-38     	; 0xc16 <game_visual+0x48>
			_delay_ms(150);
			ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_XY(x, x+5), COLOUR_YELLOW);
		}
	}
	
	ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_XY(x, 0+x), COLOUR_YELLOW);
     c3c:	4f ed       	ldi	r20, 0xDF	; 223
     c3e:	67 e0       	ldi	r22, 0x07	; 7
     c40:	80 e0       	ldi	r24, 0x00	; 0
     c42:	0e 94 62 06 	call	0xcc4	; 0xcc4 <ledmatrix_update_pixel>
	for(int8_t x = 0; x <= 15; x++) {
     c46:	80 e0       	ldi	r24, 0x00	; 0
	
		if (x >= 0 && x < FIELD_WIDTH) {
			_delay_ms(150);
			ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_XY(x, (FIELD_HEIGHT-1)-x), COLOUR_ORANGE);
     c48:	17 e0       	ldi	r17, 0x07	; 7
     c4a:	df e0       	ldi	r29, 0x0F	; 15
     c4c:	c8 2f       	mov	r28, r24
	}
	
	ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_XY(x, 0+x), COLOUR_YELLOW);
	for(int8_t x = 0; x <= 15; x++) {
	
		if (x >= 0 && x < FIELD_WIDTH) {
     c4e:	88 30       	cpi	r24, 0x08	; 8
     c50:	70 f4       	brcc	.+28     	; 0xc6e <game_visual+0xa0>
     c52:	eb e7       	ldi	r30, 0x7B	; 123
     c54:	f2 e9       	ldi	r31, 0x92	; 146
     c56:	31 97       	sbiw	r30, 0x01	; 1
     c58:	f1 f7       	brne	.-4      	; 0xc56 <game_visual+0x88>
     c5a:	00 c0       	rjmp	.+0      	; 0xc5c <game_visual+0x8e>
     c5c:	00 00       	nop
			_delay_ms(150);
			ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_XY(x, (FIELD_HEIGHT-1)-x), COLOUR_ORANGE);
     c5e:	61 2f       	mov	r22, r17
     c60:	68 1b       	sub	r22, r24
     c62:	4c e3       	ldi	r20, 0x3C	; 60
     c64:	fd 2f       	mov	r31, r29
     c66:	f8 1b       	sub	r31, r24
     c68:	8f 2f       	mov	r24, r31
     c6a:	0e 94 62 06 	call	0xcc4	; 0xcc4 <ledmatrix_update_pixel>
     c6e:	81 e0       	ldi	r24, 0x01	; 1
     c70:	8c 0f       	add	r24, r28
			ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_XY(x, x+5), COLOUR_YELLOW);
		}
	}
	
	ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_XY(x, 0+x), COLOUR_YELLOW);
	for(int8_t x = 0; x <= 15; x++) {
     c72:	80 31       	cpi	r24, 0x10	; 16
     c74:	59 f7       	brne	.-42     	; 0xc4c <game_visual+0x7e>
			_delay_ms(150);
			ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_XY(x, (FIELD_HEIGHT-1)-x), COLOUR_ORANGE);
		}
	}
	
	ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_XY(x, FIELD_HEIGHT-5), COLOUR_ORANGE);
     c76:	4c e3       	ldi	r20, 0x3C	; 60
     c78:	67 e0       	ldi	r22, 0x07	; 7
     c7a:	8b e0       	ldi	r24, 0x0B	; 11
     c7c:	0e 94 62 06 	call	0xcc4	; 0xcc4 <ledmatrix_update_pixel>
	for(int8_t x = FIELD_WIDTH-1; x >=0 ; x--) {
     c80:	87 e0       	ldi	r24, 0x07	; 7
		if (x >= 0 && x < FIELD_WIDTH) {
			_delay_ms(150);
			ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_XY(x, x+2), COLOUR_YELLOW);
     c82:	d7 e0       	ldi	r29, 0x07	; 7
     c84:	c8 2f       	mov	r28, r24
		}
	}
	
	ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_XY(x, FIELD_HEIGHT-5), COLOUR_ORANGE);
	for(int8_t x = FIELD_WIDTH-1; x >=0 ; x--) {
		if (x >= 0 && x < FIELD_WIDTH) {
     c86:	88 30       	cpi	r24, 0x08	; 8
     c88:	60 f4       	brcc	.+24     	; 0xca2 <game_visual+0xd4>
     c8a:	eb e7       	ldi	r30, 0x7B	; 123
     c8c:	f2 e9       	ldi	r31, 0x92	; 146
     c8e:	31 97       	sbiw	r30, 0x01	; 1
     c90:	f1 f7       	brne	.-4      	; 0xc8e <game_visual+0xc0>
     c92:	00 c0       	rjmp	.+0      	; 0xc94 <game_visual+0xc6>
     c94:	00 00       	nop
			_delay_ms(150);
			ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_XY(x, x+2), COLOUR_YELLOW);
     c96:	6d 2f       	mov	r22, r29
     c98:	68 1b       	sub	r22, r24
     c9a:	4f ed       	ldi	r20, 0xDF	; 223
     c9c:	8e 5f       	subi	r24, 0xFE	; 254
     c9e:	0e 94 62 06 	call	0xcc4	; 0xcc4 <ledmatrix_update_pixel>
     ca2:	8f ef       	ldi	r24, 0xFF	; 255
     ca4:	8c 0f       	add	r24, r28
			ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_XY(x, (FIELD_HEIGHT-1)-x), COLOUR_ORANGE);
		}
	}
	
	ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_XY(x, FIELD_HEIGHT-5), COLOUR_ORANGE);
	for(int8_t x = FIELD_WIDTH-1; x >=0 ; x--) {
     ca6:	8f 3f       	cpi	r24, 0xFF	; 255
     ca8:	69 f7       	brne	.-38     	; 0xc84 <game_visual+0xb6>
		if (x >= 0 && x < FIELD_WIDTH) {
			_delay_ms(150);
			ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_XY(x, x+2), COLOUR_YELLOW);
		}
	}
	ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_XY(x, 14), COLOUR_YELLOW);
     caa:	4f ed       	ldi	r20, 0xDF	; 223
     cac:	67 e0       	ldi	r22, 0x07	; 7
     cae:	8e e0       	ldi	r24, 0x0E	; 14
     cb0:	0e 94 62 06 	call	0xcc4	; 0xcc4 <ledmatrix_update_pixel>
	
}
     cb4:	df 91       	pop	r29
     cb6:	cf 91       	pop	r28
     cb8:	1f 91       	pop	r17
     cba:	08 95       	ret

00000cbc <ledmatrix_setup>:
	(void)spi_send_byte(0x08);
}

void ledmatrix_shift_display_down(void) {
	(void)spi_send_byte(CMD_SHIFT_DISPLAY);
	(void)spi_send_byte(0x04);
     cbc:	80 e8       	ldi	r24, 0x80	; 128
     cbe:	0e 94 96 0c 	call	0x192c	; 0x192c <spi_setup_master>
     cc2:	08 95       	ret

00000cc4 <ledmatrix_update_pixel>:
     cc4:	1f 93       	push	r17
     cc6:	cf 93       	push	r28
     cc8:	df 93       	push	r29
     cca:	80 31       	cpi	r24, 0x10	; 16
     ccc:	b0 f4       	brcc	.+44     	; 0xcfa <ledmatrix_update_pixel+0x36>
     cce:	68 30       	cpi	r22, 0x08	; 8
     cd0:	a0 f4       	brcc	.+40     	; 0xcfa <ledmatrix_update_pixel+0x36>
     cd2:	14 2f       	mov	r17, r20
     cd4:	c6 2f       	mov	r28, r22
     cd6:	d8 2f       	mov	r29, r24
     cd8:	81 e0       	ldi	r24, 0x01	; 1
     cda:	0e 94 be 0c 	call	0x197c	; 0x197c <spi_send_byte>
     cde:	6c 2f       	mov	r22, r28
     ce0:	67 70       	andi	r22, 0x07	; 7
     ce2:	80 e1       	ldi	r24, 0x10	; 16
     ce4:	68 9f       	mul	r22, r24
     ce6:	90 01       	movw	r18, r0
     ce8:	11 24       	eor	r1, r1
     cea:	8d 2f       	mov	r24, r29
     cec:	8f 70       	andi	r24, 0x0F	; 15
     cee:	82 2b       	or	r24, r18
     cf0:	0e 94 be 0c 	call	0x197c	; 0x197c <spi_send_byte>
     cf4:	81 2f       	mov	r24, r17
     cf6:	0e 94 be 0c 	call	0x197c	; 0x197c <spi_send_byte>
     cfa:	df 91       	pop	r29
     cfc:	cf 91       	pop	r28
     cfe:	1f 91       	pop	r17
     d00:	08 95       	ret

00000d02 <ledmatrix_update_column>:
     d02:	0f 93       	push	r16
     d04:	1f 93       	push	r17
     d06:	cf 93       	push	r28
     d08:	df 93       	push	r29
     d0a:	80 31       	cpi	r24, 0x10	; 16
     d0c:	90 f4       	brcc	.+36     	; 0xd32 <ledmatrix_update_column+0x30>
     d0e:	8b 01       	movw	r16, r22
     d10:	c8 2f       	mov	r28, r24
     d12:	83 e0       	ldi	r24, 0x03	; 3
     d14:	0e 94 be 0c 	call	0x197c	; 0x197c <spi_send_byte>
     d18:	8c 2f       	mov	r24, r28
     d1a:	8f 70       	andi	r24, 0x0F	; 15
     d1c:	0e 94 be 0c 	call	0x197c	; 0x197c <spi_send_byte>
     d20:	e8 01       	movw	r28, r16
     d22:	08 5f       	subi	r16, 0xF8	; 248
     d24:	1f 4f       	sbci	r17, 0xFF	; 255
     d26:	89 91       	ld	r24, Y+
     d28:	0e 94 be 0c 	call	0x197c	; 0x197c <spi_send_byte>
     d2c:	c0 17       	cp	r28, r16
     d2e:	d1 07       	cpc	r29, r17
     d30:	d1 f7       	brne	.-12     	; 0xd26 <ledmatrix_update_column+0x24>
     d32:	df 91       	pop	r29
     d34:	cf 91       	pop	r28
     d36:	1f 91       	pop	r17
     d38:	0f 91       	pop	r16
     d3a:	08 95       	ret

00000d3c <ledmatrix_shift_display_left>:
     d3c:	84 e0       	ldi	r24, 0x04	; 4
     d3e:	0e 94 be 0c 	call	0x197c	; 0x197c <spi_send_byte>
     d42:	82 e0       	ldi	r24, 0x02	; 2
     d44:	0e 94 be 0c 	call	0x197c	; 0x197c <spi_send_byte>
     d48:	08 95       	ret

00000d4a <ledmatrix_clear>:
}

void ledmatrix_clear(void) {
	(void)spi_send_byte(CMD_CLEAR_SCREEN);
     d4a:	8f e0       	ldi	r24, 0x0F	; 15
     d4c:	0e 94 be 0c 	call	0x197c	; 0x197c <spi_send_byte>
     d50:	08 95       	ret

00000d52 <initialise_hardware>:
	}
		


void initialise_hardware(void) {
	ledmatrix_setup();
     d52:	0e 94 5e 06 	call	0xcbc	; 0xcbc <ledmatrix_setup>
	init_button_interrupts();
     d56:	0e 94 07 01 	call	0x20e	; 0x20e <init_button_interrupts>
	// Setup serial port for 19200 baud communication with no echo
	// of incoming characters
	init_serial_stdio(19200,0);
     d5a:	40 e0       	ldi	r20, 0x00	; 0
     d5c:	60 e0       	ldi	r22, 0x00	; 0
     d5e:	7b e4       	ldi	r23, 0x4B	; 75
     d60:	80 e0       	ldi	r24, 0x00	; 0
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	0e 94 ae 0b 	call	0x175c	; 0x175c <init_serial_stdio>
	
	init_timer0();
     d68:	0e 94 de 0c 	call	0x19bc	; 0x19bc <init_timer0>
	
	// Turn on global interrupts
	
	sei();
     d6c:	78 94       	sei
     d6e:	08 95       	ret

00000d70 <splash_screen>:
}

void splash_screen(void) {
	// Clear terminal screen and output a message
	clear_terminal();
     d70:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <clear_terminal>
	move_cursor(10,10);
     d74:	6a e0       	ldi	r22, 0x0A	; 10
     d76:	70 e0       	ldi	r23, 0x00	; 0
     d78:	8a e0       	ldi	r24, 0x0A	; 10
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	0e 94 c4 0c 	call	0x1988	; 0x1988 <move_cursor>
	printf_P(PSTR("Asteroids"));
     d80:	89 ed       	ldi	r24, 0xD9	; 217
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	9f 93       	push	r25
     d86:	8f 93       	push	r24
     d88:	0e 94 b0 12 	call	0x2560	; 0x2560 <printf_P>
	move_cursor(10,12);
     d8c:	6c e0       	ldi	r22, 0x0C	; 12
     d8e:	70 e0       	ldi	r23, 0x00	; 0
     d90:	8a e0       	ldi	r24, 0x0A	; 10
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	0e 94 c4 0c 	call	0x1988	; 0x1988 <move_cursor>
	printf_P(PSTR("CSSE2010/7201 project by Pacifique Rukikza; S4521717"));
     d98:	84 ea       	ldi	r24, 0xA4	; 164
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	9f 93       	push	r25
     d9e:	8f 93       	push	r24
     da0:	0e 94 b0 12 	call	0x2560	; 0x2560 <printf_P>
	
	// Output the scrolling message to the LED matrix
	// and wait for a push button to be pushed.
	ledmatrix_clear();
     da4:	0e 94 a5 06 	call	0xd4a	; 0xd4a <ledmatrix_clear>
     da8:	0f 90       	pop	r0
     daa:	0f 90       	pop	r0
     dac:	0f 90       	pop	r0
     dae:	0f 90       	pop	r0
	while(1) {
		set_scrolling_display_text("45217171", COLOUR_GREEN);
     db0:	60 ef       	ldi	r22, 0xF0	; 240
     db2:	88 e2       	ldi	r24, 0x28	; 40
     db4:	91 e0       	ldi	r25, 0x01	; 1
     db6:	0e 94 77 0a 	call	0x14ee	; 0x14ee <set_scrolling_display_text>
		// Scroll the message until it has scrolled off the 
		// display or a button is pushed
		while(scroll_display()) {
     dba:	0d c0       	rjmp	.+26     	; 0xdd6 <splash_screen+0x66>
     dbc:	2f e7       	ldi	r18, 0x7F	; 127
     dbe:	89 ea       	ldi	r24, 0xA9	; 169
     dc0:	93 e0       	ldi	r25, 0x03	; 3
     dc2:	21 50       	subi	r18, 0x01	; 1
     dc4:	80 40       	sbci	r24, 0x00	; 0
     dc6:	90 40       	sbci	r25, 0x00	; 0
     dc8:	e1 f7       	brne	.-8      	; 0xdc2 <splash_screen+0x52>
     dca:	00 c0       	rjmp	.+0      	; 0xdcc <splash_screen+0x5c>
     dcc:	00 00       	nop
			_delay_ms(150);
			if(button_pushed() != NO_BUTTON_PUSHED) {
     dce:	0e 94 15 01 	call	0x22a	; 0x22a <button_pushed>
     dd2:	8f 3f       	cpi	r24, 0xFF	; 255
     dd4:	29 f4       	brne	.+10     	; 0xde0 <splash_screen+0x70>
	ledmatrix_clear();
	while(1) {
		set_scrolling_display_text("45217171", COLOUR_GREEN);
		// Scroll the message until it has scrolled off the 
		// display or a button is pushed
		while(scroll_display()) {
     dd6:	0e 94 86 0a 	call	0x150c	; 0x150c <scroll_display>
     dda:	81 11       	cpse	r24, r1
     ddc:	ef cf       	rjmp	.-34     	; 0xdbc <splash_screen+0x4c>
     dde:	e8 cf       	rjmp	.-48     	; 0xdb0 <splash_screen+0x40>
     de0:	08 95       	ret

00000de2 <new_game>:
	}
}

void new_game(void) {
	// Initialise the game and display
	initialise_game();
     de2:	0e 94 4a 02 	call	0x494	; 0x494 <initialise_game>

	// Clear the serial terminal
	clear_terminal();
     de6:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <clear_terminal>
	
	// Initialise the score
	init_score();
     dea:	0e 94 59 09 	call	0x12b2	; 0x12b2 <init_score>
	// Clear a button push or serial input if any are waiting
	// (The cast to void means the return value is ignored.)
	(void)button_pushed();
     dee:	0e 94 15 01 	call	0x22a	; 0x22a <button_pushed>
	clear_serial_input_buffer();
     df2:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <clear_serial_input_buffer>
     df6:	08 95       	ret

00000df8 <play_game>:
}

void play_game(void) {
     df8:	4f 92       	push	r4
     dfa:	5f 92       	push	r5
     dfc:	6f 92       	push	r6
     dfe:	7f 92       	push	r7
     e00:	8f 92       	push	r8
     e02:	9f 92       	push	r9
     e04:	af 92       	push	r10
     e06:	bf 92       	push	r11
     e08:	cf 92       	push	r12
     e0a:	df 92       	push	r13
     e0c:	ef 92       	push	r14
     e0e:	ff 92       	push	r15
     e10:	0f 93       	push	r16
     e12:	1f 93       	push	r17
     e14:	cf 93       	push	r28
     e16:	df 93       	push	r29
	uint8_t characters_into_escape_sequence = 0;
	
	
	// Get the current time and remember this as the last time the projectiles
	// were moved.
	current_time = get_current_time();
     e18:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <get_current_time>
     e1c:	60 93 a8 01 	sts	0x01A8, r22	; 0x8001a8 <current_time>
     e20:	70 93 a9 01 	sts	0x01A9, r23	; 0x8001a9 <current_time+0x1>
     e24:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <current_time+0x2>
     e28:	90 93 ab 01 	sts	0x01AB, r25	; 0x8001ab <current_time+0x3>
	last_move_time = current_time;
     e2c:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <current_time>
     e30:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <current_time+0x1>
     e34:	a0 91 aa 01 	lds	r26, 0x01AA	; 0x8001aa <current_time+0x2>
     e38:	b0 91 ab 01 	lds	r27, 0x01AB	; 0x8001ab <current_time+0x3>
     e3c:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <last_move_time>
     e40:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <last_move_time+0x1>
     e44:	a0 93 a2 01 	sts	0x01A2, r26	; 0x8001a2 <last_move_time+0x2>
     e48:	b0 93 a3 01 	sts	0x01A3, r27	; 0x8001a3 <last_move_time+0x3>
	asteroid_move_time = current_time;
     e4c:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <current_time>
     e50:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <current_time+0x1>
     e54:	a0 91 aa 01 	lds	r26, 0x01AA	; 0x8001aa <current_time+0x2>
     e58:	b0 91 ab 01 	lds	r27, 0x01AB	; 0x8001ab <current_time+0x3>
     e5c:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <asteroid_move_time>
     e60:	90 93 af 01 	sts	0x01AF, r25	; 0x8001af <asteroid_move_time+0x1>
     e64:	a0 93 b0 01 	sts	0x01B0, r26	; 0x8001b0 <asteroid_move_time+0x2>
     e68:	b0 93 b1 01 	sts	0x01B1, r27	; 0x8001b1 <asteroid_move_time+0x3>
	
	if(is_game_over()){
     e6c:	0e 94 4d 03 	call	0x69a	; 0x69a <is_game_over>
     e70:	88 23       	and	r24, r24
     e72:	31 f1       	breq	.+76     	; 0xec0 <play_game+0xc8>
		speed = 500;
     e74:	84 ef       	ldi	r24, 0xF4	; 244
     e76:	91 e0       	ldi	r25, 0x01	; 1
     e78:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <speed+0x1>
     e7c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <speed>
		asteroid_speed = 1000;
     e80:	88 ee       	ldi	r24, 0xE8	; 232
     e82:	93 e0       	ldi	r25, 0x03	; 3
     e84:	a0 e0       	ldi	r26, 0x00	; 0
     e86:	b0 e0       	ldi	r27, 0x00	; 0
     e88:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <asteroid_speed>
     e8c:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <asteroid_speed+0x1>
     e90:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <asteroid_speed+0x2>
     e94:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <asteroid_speed+0x3>
		//eeprom_write_word(0, ("Pacifique d%", get_score()));
		//ledmatrix_clear();
		
		
		if(button_pushed()){
     e98:	0e 94 15 01 	call	0x22a	; 0x22a <button_pushed>
     e9c:	88 23       	and	r24, r24
     e9e:	81 f0       	breq	.+32     	; 0xec0 <play_game+0xc8>
			
			PORTC |= 0X7C;
     ea0:	88 b1       	in	r24, 0x08	; 8
     ea2:	8c 67       	ori	r24, 0x7C	; 124
     ea4:	88 b9       	out	0x08, r24	; 8
			init_score();
     ea6:	0e 94 59 09 	call	0x12b2	; 0x12b2 <init_score>
			init_lives();
     eaa:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <init_lives>
			paused = 0;
     eae:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <paused>
			DDRD = 0;
     eb2:	1a b8       	out	0x0a, r1	; 10
			game_over(0);
     eb4:	80 e0       	ldi	r24, 0x00	; 0
     eb6:	0e 94 50 03 	call	0x6a0	; 0x6a0 <game_over>
			PORTD &=  ~( 1<<6 |1 << 7);
     eba:	8b b1       	in	r24, 0x0b	; 11
     ebc:	8f 73       	andi	r24, 0x3F	; 63
     ebe:	8b b9       	out	0x0b, r24	; 11
		// variables will be set to a value other than -1 if input is available.
		// (We don't initalise button to -1 since button_pushed() will return -1
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
     ec0:	c1 2c       	mov	r12, r1
		}
	}
	
	// We play the game until it's over
	while(!is_game_over()) {
		DDRD = (1<<4 | 1<<5 | 1<<6);
     ec2:	0f 2e       	mov	r0, r31
     ec4:	f0 e7       	ldi	r31, 0x70	; 112
     ec6:	df 2e       	mov	r13, r31
     ec8:	f0 2d       	mov	r31, r0
		// (We don't initalise button to -1 since button_pushed() will return -1
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
		escape_sequence_char = -1;
     eca:	ee 24       	eor	r14, r14
     ecc:	ea 94       	dec	r14
			// pressed again
			if(!paused){
				// Pausing
				paused = 1;
				pause_time = get_current_time();
				DDRD = ~(1 << 4);
     ece:	0f 2e       	mov	r0, r31
     ed0:	ff ee       	ldi	r31, 0xEF	; 239
     ed2:	8f 2e       	mov	r8, r31
     ed4:	f0 2d       	mov	r31, r0
		
		if(button == NO_BUTTON_PUSHED) {
			// No push button was pushed, see if there is any serial input
			if(serial_input_available()) {
				// Serial data was available - read the data from standard input
				serial_input = fgetc(stdin);
     ed6:	ca ed       	ldi	r28, 0xDA	; 218
     ed8:	d2 e0       	ldi	r29, 0x02	; 2
					// We've hit the first character in an escape sequence (escape)
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
					} else if(characters_into_escape_sequence == 1 && serial_input == '[') {
					// We've hit the second character in an escape sequence
					characters_into_escape_sequence++;
     eda:	68 94       	set
     edc:	99 24       	eor	r9, r9
     ede:	91 f8       	bld	r9, 1
			serial_input = fgetc(stdin);
			if(serial_input == 'p' || serial_input == 'P' || button==1 || escape_sequence_char=='B'){
				timePaused = get_current_time() - pause_time;
				current_time = get_current_time() + timePaused;
				paused = 0;
				DDRD = (1 << 4);
     ee0:	00 e1       	ldi	r16, 0x10	; 16
			game_playing();
			joy_stick();
			
			//crease the speed of the game as the score increases
			if(get_score() >= 10) {
				speed =  500 - get_score();
     ee2:	0f 2e       	mov	r0, r31
     ee4:	f4 ef       	ldi	r31, 0xF4	; 244
     ee6:	af 2e       	mov	r10, r31
     ee8:	bb 24       	eor	r11, r11
     eea:	b3 94       	inc	r11
     eec:	f0 2d       	mov	r31, r0
     eee:	60 c1       	rjmp	.+704    	; 0x11b0 <play_game+0x3b8>
		}
	}
	
	// We play the game until it's over
	while(!is_game_over()) {
		DDRD = (1<<4 | 1<<5 | 1<<6);
     ef0:	da b8       	out	0x0a, r13	; 10
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
		escape_sequence_char = -1;
		button = button_pushed();
     ef2:	0e 94 15 01 	call	0x22a	; 0x22a <button_pushed>
     ef6:	18 2f       	mov	r17, r24
		current_time = get_current_time();
     ef8:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <get_current_time>
     efc:	60 93 a8 01 	sts	0x01A8, r22	; 0x8001a8 <current_time>
     f00:	70 93 a9 01 	sts	0x01A9, r23	; 0x8001a9 <current_time+0x1>
     f04:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <current_time+0x2>
     f08:	90 93 ab 01 	sts	0x01AB, r25	; 0x8001ab <current_time+0x3>
		
		if(button == NO_BUTTON_PUSHED) {
     f0c:	1f 3f       	cpi	r17, 0xFF	; 255
     f0e:	09 f0       	breq	.+2      	; 0xf12 <play_game+0x11a>
     f10:	5b c1       	rjmp	.+694    	; 0x11c8 <play_game+0x3d0>
			// No push button was pushed, see if there is any serial input
			if(serial_input_available()) {
     f12:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <serial_input_available>
     f16:	88 23       	and	r24, r24
     f18:	09 f4       	brne	.+2      	; 0xf1c <play_game+0x124>
     f1a:	54 c1       	rjmp	.+680    	; 0x11c4 <play_game+0x3cc>
				// Serial data was available - read the data from standard input
				serial_input = fgetc(stdin);
     f1c:	88 81       	ld	r24, Y
     f1e:	99 81       	ldd	r25, Y+1	; 0x01
     f20:	0e 94 5c 12 	call	0x24b8	; 0x24b8 <fgetc>
				// Check if the character is part of an escape sequence
				if(characters_into_escape_sequence == 0 && serial_input == ESCAPE_CHAR) {
     f24:	c1 10       	cpse	r12, r1
     f26:	05 c0       	rjmp	.+10     	; 0xf32 <play_game+0x13a>
     f28:	8b 31       	cpi	r24, 0x1B	; 27
     f2a:	09 f4       	brne	.+2      	; 0xf2e <play_game+0x136>
     f2c:	47 c1       	rjmp	.+654    	; 0x11bc <play_game+0x3c4>
     f2e:	fe 2c       	mov	r15, r14
     f30:	0d c0       	rjmp	.+26     	; 0xf4c <play_game+0x154>
					// We've hit the first character in an escape sequence (escape)
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
					} else if(characters_into_escape_sequence == 1 && serial_input == '[') {
     f32:	21 e0       	ldi	r18, 0x01	; 1
     f34:	c2 12       	cpse	r12, r18
     f36:	05 c0       	rjmp	.+10     	; 0xf42 <play_game+0x14a>
     f38:	8b 35       	cpi	r24, 0x5B	; 91
     f3a:	09 f4       	brne	.+2      	; 0xf3e <play_game+0x146>
     f3c:	42 c1       	rjmp	.+644    	; 0x11c2 <play_game+0x3ca>
     f3e:	fe 2c       	mov	r15, r14
     f40:	05 c0       	rjmp	.+10     	; 0xf4c <play_game+0x154>
					// We've hit the second character in an escape sequence
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
					} else if(characters_into_escape_sequence == 2) {
     f42:	32 e0       	ldi	r19, 0x02	; 2
     f44:	c3 12       	cpse	r12, r19
     f46:	06 c0       	rjmp	.+12     	; 0xf54 <play_game+0x15c>
					// Third (and last) character in the escape sequence
					escape_sequence_char = serial_input;
     f48:	f8 2e       	mov	r15, r24
					serial_input = -1;  // Don't further process this character - we
     f4a:	8e 2d       	mov	r24, r14
				}
			}
		}
		
		// Process the input.
		if(button==3 || escape_sequence_char=='D' || serial_input=='L' || serial_input=='l') {
     f4c:	44 e4       	ldi	r20, 0x44	; 68
     f4e:	f4 12       	cpse	r15, r20
     f50:	02 c0       	rjmp	.+4      	; 0xf56 <play_game+0x15e>
     f52:	08 c0       	rjmp	.+16     	; 0xf64 <play_game+0x16c>
		// (We don't initalise button to -1 since button_pushed() will return -1
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
		escape_sequence_char = -1;
     f54:	fe 2c       	mov	r15, r14
				}
			}
		}
		
		// Process the input.
		if(button==3 || escape_sequence_char=='D' || serial_input=='L' || serial_input=='l') {
     f56:	98 2f       	mov	r25, r24
     f58:	9f 7d       	andi	r25, 0xDF	; 223
     f5a:	9c 34       	cpi	r25, 0x4C	; 76
     f5c:	09 f0       	breq	.+2      	; 0xf60 <play_game+0x168>
     f5e:	38 c1       	rjmp	.+624    	; 0x11d0 <play_game+0x3d8>
     f60:	c1 2c       	mov	r12, r1
     f62:	03 c0       	rjmp	.+6      	; 0xf6a <play_game+0x172>
     f64:	c1 2c       	mov	r12, r1
     f66:	01 c0       	rjmp	.+2      	; 0xf6a <play_game+0x172>
		// (We don't initalise button to -1 since button_pushed() will return -1
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
		escape_sequence_char = -1;
     f68:	fe 2c       	mov	r15, r14
		
		// Process the input.
		if(button==3 || escape_sequence_char=='D' || serial_input=='L' || serial_input=='l') {
			// Button 3 pressed OR left cursor key escape sequence completed OR
			// letter L (lowercase or uppercase) pressed - attempt to move left
			move_base(MOVE_LEFT);
     f6a:	80 e0       	ldi	r24, 0x00	; 0
     f6c:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <move_base>
     f70:	73 c0       	rjmp	.+230    	; 0x1058 <play_game+0x260>
			} else if(button==2 || escape_sequence_char=='A' || serial_input==' ') {
     f72:	80 32       	cpi	r24, 0x20	; 32
     f74:	41 f4       	brne	.+16     	; 0xf86 <play_game+0x18e>
     f76:	c1 2c       	mov	r12, r1
     f78:	03 c0       	rjmp	.+6      	; 0xf80 <play_game+0x188>
     f7a:	c1 2c       	mov	r12, r1
     f7c:	01 c0       	rjmp	.+2      	; 0xf80 <play_game+0x188>
		// (We don't initalise button to -1 since button_pushed() will return -1
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
		escape_sequence_char = -1;
     f7e:	fe 2c       	mov	r15, r14
			// letter L (lowercase or uppercase) pressed - attempt to move left
			move_base(MOVE_LEFT);
			} else if(button==2 || escape_sequence_char=='A' || serial_input==' ') {
			// Button 2 pressed or up cursor key escape sequence completed OR
			// space bar pressed - attempt to fire projectile
			fire_projectile();
     f80:	0e 94 0d 03 	call	0x61a	; 0x61a <fire_projectile>
     f84:	69 c0       	rjmp	.+210    	; 0x1058 <play_game+0x260>
     f86:	c1 2c       	mov	r12, r1
			} else if(button==1 || escape_sequence_char=='B') {
     f88:	11 30       	cpi	r17, 0x01	; 1
     f8a:	09 f4       	brne	.+2      	; 0xf8e <play_game+0x196>
     f8c:	65 c0       	rjmp	.+202    	; 0x1058 <play_game+0x260>
     f8e:	52 e4       	ldi	r21, 0x42	; 66
     f90:	f5 16       	cp	r15, r21
     f92:	09 f4       	brne	.+2      	; 0xf96 <play_game+0x19e>
     f94:	61 c0       	rjmp	.+194    	; 0x1058 <play_game+0x260>
			// Button 1 pressed OR down cursor key escape sequence completed
			// Ignore at present
			} else if(button==0 || escape_sequence_char=='C' || serial_input=='R' || serial_input=='r' ) {
     f96:	11 23       	and	r17, r17
     f98:	31 f0       	breq	.+12     	; 0xfa6 <play_game+0x1ae>
     f9a:	93 e4       	ldi	r25, 0x43	; 67
     f9c:	f9 16       	cp	r15, r25
     f9e:	19 f0       	breq	.+6      	; 0xfa6 <play_game+0x1ae>
     fa0:	8f 7d       	andi	r24, 0xDF	; 223
     fa2:	82 35       	cpi	r24, 0x52	; 82
     fa4:	21 f4       	brne	.+8      	; 0xfae <play_game+0x1b6>
			// Button 0 pressed OR right cursor key escape sequence completed OR
			// letter R (lowercase or uppercase) pressed - attempt to move right
			move_base(MOVE_RIGHT);
     fa6:	81 e0       	ldi	r24, 0x01	; 1
     fa8:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <move_base>
     fac:	55 c0       	rjmp	.+170    	; 0x1058 <play_game+0x260>
			} else if(serial_input == 'p' || serial_input == 'P' ) {
     fae:	80 35       	cpi	r24, 0x50	; 80
     fb0:	09 f0       	breq	.+2      	; 0xfb4 <play_game+0x1bc>
     fb2:	52 c0       	rjmp	.+164    	; 0x1058 <play_game+0x260>
			// Unimplemented feature - pause/unpause the game until 'p' or 'P' is
			// pressed again
			if(!paused){
     fb4:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <paused>
     fb8:	81 11       	cpse	r24, r1
     fba:	4e c0       	rjmp	.+156    	; 0x1058 <play_game+0x260>
				// Pausing
				paused = 1;
     fbc:	81 e0       	ldi	r24, 0x01	; 1
     fbe:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <paused>
				pause_time = get_current_time();
     fc2:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <get_current_time>
     fc6:	60 93 a4 01 	sts	0x01A4, r22	; 0x8001a4 <pause_time>
     fca:	70 93 a5 01 	sts	0x01A5, r23	; 0x8001a5 <pause_time+0x1>
     fce:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <pause_time+0x2>
     fd2:	90 93 a7 01 	sts	0x01A7, r25	; 0x8001a7 <pause_time+0x3>
				DDRD = ~(1 << 4);
     fd6:	8a b8       	out	0x0a, r8	; 10
     fd8:	3f c0       	rjmp	.+126    	; 0x1058 <play_game+0x260>
			}
		}
		// else - invalid input or we're part way through an escape sequence -
		// do nothing
		while(paused){
			serial_input = fgetc(stdin);
     fda:	88 81       	ld	r24, Y
     fdc:	99 81       	ldd	r25, Y+1	; 0x01
     fde:	0e 94 5c 12 	call	0x24b8	; 0x24b8 <fgetc>
			if(serial_input == 'p' || serial_input == 'P' || button==1 || escape_sequence_char=='B'){
     fe2:	8f 7d       	andi	r24, 0xDF	; 223
     fe4:	80 35       	cpi	r24, 0x50	; 80
     fe6:	29 f0       	breq	.+10     	; 0xff2 <play_game+0x1fa>
     fe8:	11 30       	cpi	r17, 0x01	; 1
     fea:	19 f0       	breq	.+6      	; 0xff2 <play_game+0x1fa>
     fec:	22 e4       	ldi	r18, 0x42	; 66
     fee:	f2 12       	cpse	r15, r18
     ff0:	33 c0       	rjmp	.+102    	; 0x1058 <play_game+0x260>
				timePaused = get_current_time() - pause_time;
     ff2:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <get_current_time>
     ff6:	40 90 a4 01 	lds	r4, 0x01A4	; 0x8001a4 <pause_time>
     ffa:	50 90 a5 01 	lds	r5, 0x01A5	; 0x8001a5 <pause_time+0x1>
     ffe:	60 90 a6 01 	lds	r6, 0x01A6	; 0x8001a6 <pause_time+0x2>
    1002:	70 90 a7 01 	lds	r7, 0x01A7	; 0x8001a7 <pause_time+0x3>
    1006:	dc 01       	movw	r26, r24
    1008:	cb 01       	movw	r24, r22
    100a:	84 19       	sub	r24, r4
    100c:	95 09       	sbc	r25, r5
    100e:	a6 09       	sbc	r26, r6
    1010:	b7 09       	sbc	r27, r7
    1012:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <timePaused>
    1016:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <timePaused+0x1>
    101a:	a0 93 9e 01 	sts	0x019E, r26	; 0x80019e <timePaused+0x2>
    101e:	b0 93 9f 01 	sts	0x019F, r27	; 0x80019f <timePaused+0x3>
				current_time = get_current_time() + timePaused;
    1022:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <get_current_time>
    1026:	40 90 9c 01 	lds	r4, 0x019C	; 0x80019c <timePaused>
    102a:	50 90 9d 01 	lds	r5, 0x019D	; 0x80019d <timePaused+0x1>
    102e:	60 90 9e 01 	lds	r6, 0x019E	; 0x80019e <timePaused+0x2>
    1032:	70 90 9f 01 	lds	r7, 0x019F	; 0x80019f <timePaused+0x3>
    1036:	dc 01       	movw	r26, r24
    1038:	cb 01       	movw	r24, r22
    103a:	84 0d       	add	r24, r4
    103c:	95 1d       	adc	r25, r5
    103e:	a6 1d       	adc	r26, r6
    1040:	b7 1d       	adc	r27, r7
    1042:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <current_time>
    1046:	90 93 a9 01 	sts	0x01A9, r25	; 0x8001a9 <current_time+0x1>
    104a:	a0 93 aa 01 	sts	0x01AA, r26	; 0x8001aa <current_time+0x2>
    104e:	b0 93 ab 01 	sts	0x01AB, r27	; 0x8001ab <current_time+0x3>
				paused = 0;
    1052:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <paused>
				DDRD = (1 << 4);
    1056:	0a b9       	out	0x0a, r16	; 10
				
			}
		}
		// else - invalid input or we're part way through an escape sequence -
		// do nothing
		while(paused){
    1058:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <paused>
    105c:	81 11       	cpse	r24, r1
    105e:	bd cf       	rjmp	.-134    	; 0xfda <play_game+0x1e2>
				
			}
			
		}
		
		if(!is_game_over() && current_time >= last_move_time + ((uint32_t) speed)) {
    1060:	0e 94 4d 03 	call	0x69a	; 0x69a <is_game_over>
    1064:	81 11       	cpse	r24, r1
    1066:	47 c0       	rjmp	.+142    	; 0x10f6 <play_game+0x2fe>
    1068:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <speed>
    106c:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <speed+0x1>
    1070:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <last_move_time>
    1074:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <last_move_time+0x1>
    1078:	a0 91 a2 01 	lds	r26, 0x01A2	; 0x8001a2 <last_move_time+0x2>
    107c:	b0 91 a3 01 	lds	r27, 0x01A3	; 0x8001a3 <last_move_time+0x3>
    1080:	40 91 a8 01 	lds	r20, 0x01A8	; 0x8001a8 <current_time>
    1084:	50 91 a9 01 	lds	r21, 0x01A9	; 0x8001a9 <current_time+0x1>
    1088:	60 91 aa 01 	lds	r22, 0x01AA	; 0x8001aa <current_time+0x2>
    108c:	70 91 ab 01 	lds	r23, 0x01AB	; 0x8001ab <current_time+0x3>
    1090:	29 01       	movw	r4, r18
    1092:	33 0f       	add	r19, r19
    1094:	66 08       	sbc	r6, r6
    1096:	77 08       	sbc	r7, r7
    1098:	84 0d       	add	r24, r4
    109a:	95 1d       	adc	r25, r5
    109c:	a6 1d       	adc	r26, r6
    109e:	b7 1d       	adc	r27, r7
    10a0:	48 17       	cp	r20, r24
    10a2:	59 07       	cpc	r21, r25
    10a4:	6a 07       	cpc	r22, r26
    10a6:	7b 07       	cpc	r23, r27
    10a8:	30 f1       	brcs	.+76     	; 0x10f6 <play_game+0x2fe>
			// 500ms (0.5 second) has passed since the last time we moved
			// the projectiles - move them - and keep track of the time we
			// moved them
			advance_projectiles();
    10aa:	0e 94 47 05 	call	0xa8e	; 0xa8e <advance_projectiles>
	
			game_playing();
    10ae:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <game_playing>
			joy_stick();
    10b2:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <joy_stick>
			
			//crease the speed of the game as the score increases
			if(get_score() >= 10) {
    10b6:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <get_score>
    10ba:	6a 30       	cpi	r22, 0x0A	; 10
    10bc:	71 05       	cpc	r23, r1
    10be:	81 05       	cpc	r24, r1
    10c0:	91 05       	cpc	r25, r1
    10c2:	48 f0       	brcs	.+18     	; 0x10d6 <play_game+0x2de>
				speed =  500 - get_score();
    10c4:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <get_score>
    10c8:	c5 01       	movw	r24, r10
    10ca:	86 1b       	sub	r24, r22
    10cc:	97 0b       	sbc	r25, r23
    10ce:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <speed+0x1>
    10d2:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <speed>
			}
			
			last_move_time = current_time;
    10d6:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <current_time>
    10da:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <current_time+0x1>
    10de:	a0 91 aa 01 	lds	r26, 0x01AA	; 0x8001aa <current_time+0x2>
    10e2:	b0 91 ab 01 	lds	r27, 0x01AB	; 0x8001ab <current_time+0x3>
    10e6:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <last_move_time>
    10ea:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <last_move_time+0x1>
    10ee:	a0 93 a2 01 	sts	0x01A2, r26	; 0x8001a2 <last_move_time+0x2>
    10f2:	b0 93 a3 01 	sts	0x01A3, r27	; 0x8001a3 <last_move_time+0x3>
		} 
		
		if(!is_game_over() && current_time >= asteroid_move_time + asteroid_speed) {
    10f6:	0e 94 4d 03 	call	0x69a	; 0x69a <is_game_over>
    10fa:	81 11       	cpse	r24, r1
    10fc:	59 c0       	rjmp	.+178    	; 0x11b0 <play_game+0x3b8>
    10fe:	40 90 ae 01 	lds	r4, 0x01AE	; 0x8001ae <asteroid_move_time>
    1102:	50 90 af 01 	lds	r5, 0x01AF	; 0x8001af <asteroid_move_time+0x1>
    1106:	60 90 b0 01 	lds	r6, 0x01B0	; 0x8001b0 <asteroid_move_time+0x2>
    110a:	70 90 b1 01 	lds	r7, 0x01B1	; 0x8001b1 <asteroid_move_time+0x3>
    110e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <asteroid_speed>
    1112:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <asteroid_speed+0x1>
    1116:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <asteroid_speed+0x2>
    111a:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <asteroid_speed+0x3>
    111e:	40 91 a8 01 	lds	r20, 0x01A8	; 0x8001a8 <current_time>
    1122:	50 91 a9 01 	lds	r21, 0x01A9	; 0x8001a9 <current_time+0x1>
    1126:	60 91 aa 01 	lds	r22, 0x01AA	; 0x8001aa <current_time+0x2>
    112a:	70 91 ab 01 	lds	r23, 0x01AB	; 0x8001ab <current_time+0x3>
    112e:	84 0d       	add	r24, r4
    1130:	95 1d       	adc	r25, r5
    1132:	a6 1d       	adc	r26, r6
    1134:	b7 1d       	adc	r27, r7
    1136:	48 17       	cp	r20, r24
    1138:	59 07       	cpc	r21, r25
    113a:	6a 07       	cpc	r22, r26
    113c:	7b 07       	cpc	r23, r27
    113e:	c0 f1       	brcs	.+112    	; 0x11b0 <play_game+0x3b8>
		// 500ms (0.5 second) has passed since the last time we moved
		// the projectiles - move them - and keep track of the time we
		// moved them
		//we descend the asteroids from top to bottom
		advance_asteroids();
    1140:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <advance_asteroids>
		game_playing();
    1144:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <game_playing>
		joy_stick();
    1148:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <joy_stick>
		
		//crease the speed of the game as the score increases
		if(get_score() >= 10) {
    114c:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <get_score>
    1150:	6a 30       	cpi	r22, 0x0A	; 10
    1152:	71 05       	cpc	r23, r1
    1154:	81 05       	cpc	r24, r1
    1156:	91 05       	cpc	r25, r1
    1158:	d8 f0       	brcs	.+54     	; 0x1190 <play_game+0x398>
			asteroid_speed =  1000 - 2*(get_score());
    115a:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <get_score>
    115e:	20 e0       	ldi	r18, 0x00	; 0
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	a9 01       	movw	r20, r18
    1164:	26 1b       	sub	r18, r22
    1166:	37 0b       	sbc	r19, r23
    1168:	48 0b       	sbc	r20, r24
    116a:	59 0b       	sbc	r21, r25
    116c:	da 01       	movw	r26, r20
    116e:	c9 01       	movw	r24, r18
    1170:	88 0f       	add	r24, r24
    1172:	99 1f       	adc	r25, r25
    1174:	aa 1f       	adc	r26, r26
    1176:	bb 1f       	adc	r27, r27
    1178:	88 51       	subi	r24, 0x18	; 24
    117a:	9c 4f       	sbci	r25, 0xFC	; 252
    117c:	af 4f       	sbci	r26, 0xFF	; 255
    117e:	bf 4f       	sbci	r27, 0xFF	; 255
    1180:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <asteroid_speed>
    1184:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <asteroid_speed+0x1>
    1188:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <asteroid_speed+0x2>
    118c:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <asteroid_speed+0x3>
		}
		
		asteroid_move_time = current_time;
    1190:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <current_time>
    1194:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <current_time+0x1>
    1198:	a0 91 aa 01 	lds	r26, 0x01AA	; 0x8001aa <current_time+0x2>
    119c:	b0 91 ab 01 	lds	r27, 0x01AB	; 0x8001ab <current_time+0x3>
    11a0:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <asteroid_move_time>
    11a4:	90 93 af 01 	sts	0x01AF, r25	; 0x8001af <asteroid_move_time+0x1>
    11a8:	a0 93 b0 01 	sts	0x01B0, r26	; 0x8001b0 <asteroid_move_time+0x2>
    11ac:	b0 93 b1 01 	sts	0x01B1, r27	; 0x8001b1 <asteroid_move_time+0x3>
			
		}
	}
	
	// We play the game until it's over
	while(!is_game_over()) {
    11b0:	0e 94 4d 03 	call	0x69a	; 0x69a <is_game_over>
    11b4:	88 23       	and	r24, r24
    11b6:	09 f4       	brne	.+2      	; 0x11ba <play_game+0x3c2>
    11b8:	9b ce       	rjmp	.-714    	; 0xef0 <play_game+0xf8>
    11ba:	14 c0       	rjmp	.+40     	; 0x11e4 <play_game+0x3ec>
				// Serial data was available - read the data from standard input
				serial_input = fgetc(stdin);
				// Check if the character is part of an escape sequence
				if(characters_into_escape_sequence == 0 && serial_input == ESCAPE_CHAR) {
					// We've hit the first character in an escape sequence (escape)
					characters_into_escape_sequence++;
    11bc:	cc 24       	eor	r12, r12
    11be:	c3 94       	inc	r12
    11c0:	01 c0       	rjmp	.+2      	; 0x11c4 <play_game+0x3cc>
					serial_input = -1; // Don't further process this character
					} else if(characters_into_escape_sequence == 1 && serial_input == '[') {
					// We've hit the second character in an escape sequence
					characters_into_escape_sequence++;
    11c2:	c9 2c       	mov	r12, r9
    11c4:	fe 2c       	mov	r15, r14
    11c6:	48 cf       	rjmp	.-368    	; 0x1058 <play_game+0x260>
				}
			}
		}
		
		// Process the input.
		if(button==3 || escape_sequence_char=='D' || serial_input=='L' || serial_input=='l') {
    11c8:	13 30       	cpi	r17, 0x03	; 3
    11ca:	09 f4       	brne	.+2      	; 0x11ce <play_game+0x3d6>
    11cc:	cd ce       	rjmp	.-614    	; 0xf68 <play_game+0x170>
    11ce:	04 c0       	rjmp	.+8      	; 0x11d8 <play_game+0x3e0>
			// Button 3 pressed OR left cursor key escape sequence completed OR
			// letter L (lowercase or uppercase) pressed - attempt to move left
			move_base(MOVE_LEFT);
			} else if(button==2 || escape_sequence_char=='A' || serial_input==' ') {
    11d0:	31 e4       	ldi	r19, 0x41	; 65
    11d2:	f3 12       	cpse	r15, r19
    11d4:	ce ce       	rjmp	.-612    	; 0xf72 <play_game+0x17a>
    11d6:	d1 ce       	rjmp	.-606    	; 0xf7a <play_game+0x182>
    11d8:	12 30       	cpi	r17, 0x02	; 2
    11da:	09 f4       	brne	.+2      	; 0x11de <play_game+0x3e6>
    11dc:	d0 ce       	rjmp	.-608    	; 0xf7e <play_game+0x186>
		// (We don't initalise button to -1 since button_pushed() will return -1
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
		escape_sequence_char = -1;
    11de:	fe 2c       	mov	r15, r14
		// variables will be set to a value other than -1 if input is available.
		// (We don't initalise button to -1 since button_pushed() will return -1
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
    11e0:	8e 2d       	mov	r24, r14
    11e2:	d2 ce       	rjmp	.-604    	; 0xf88 <play_game+0x190>
	}
		
	}

	// We get here if the game is over.
}
    11e4:	df 91       	pop	r29
    11e6:	cf 91       	pop	r28
    11e8:	1f 91       	pop	r17
    11ea:	0f 91       	pop	r16
    11ec:	ff 90       	pop	r15
    11ee:	ef 90       	pop	r14
    11f0:	df 90       	pop	r13
    11f2:	cf 90       	pop	r12
    11f4:	bf 90       	pop	r11
    11f6:	af 90       	pop	r10
    11f8:	9f 90       	pop	r9
    11fa:	8f 90       	pop	r8
    11fc:	7f 90       	pop	r7
    11fe:	6f 90       	pop	r6
    1200:	5f 90       	pop	r5
    1202:	4f 90       	pop	r4
    1204:	08 95       	ret

00001206 <handle_game_over>:



void handle_game_over() {
	move_cursor(10,14);
    1206:	6e e0       	ldi	r22, 0x0E	; 14
    1208:	70 e0       	ldi	r23, 0x00	; 0
    120a:	8a e0       	ldi	r24, 0x0A	; 10
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	0e 94 c4 0c 	call	0x1988	; 0x1988 <move_cursor>
	printf_P(PSTR("GAME OVER"));
    1212:	8a e9       	ldi	r24, 0x9A	; 154
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	9f 93       	push	r25
    1218:	8f 93       	push	r24
    121a:	0e 94 b0 12 	call	0x2560	; 0x2560 <printf_P>
	move_cursor(10,15);
    121e:	6f e0       	ldi	r22, 0x0F	; 15
    1220:	70 e0       	ldi	r23, 0x00	; 0
    1222:	8a e0       	ldi	r24, 0x0A	; 10
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	0e 94 c4 0c 	call	0x1988	; 0x1988 <move_cursor>
	printf_P(PSTR("Press a button to start again"));
    122a:	8c e7       	ldi	r24, 0x7C	; 124
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	9f 93       	push	r25
    1230:	8f 93       	push	r24
    1232:	0e 94 b0 12 	call	0x2560	; 0x2560 <printf_P>
	game_visual();
    1236:	0e 94 e7 05 	call	0xbce	; 0xbce <game_visual>
	
	while(button_pushed() == NO_BUTTON_PUSHED) {
    123a:	0f 90       	pop	r0
    123c:	0f 90       	pop	r0
    123e:	0f 90       	pop	r0
    1240:	0f 90       	pop	r0
    1242:	17 c0       	rjmp	.+46     	; 0x1272 <handle_game_over+0x6c>
		set_scrolling_display_text("GAME OVER", COLOUR_RED);
    1244:	6f e0       	ldi	r22, 0x0F	; 15
    1246:	81 e3       	ldi	r24, 0x31	; 49
    1248:	91 e0       	ldi	r25, 0x01	; 1
    124a:	0e 94 77 0a 	call	0x14ee	; 0x14ee <set_scrolling_display_text>
		// Scroll the message until it has scrolled off the
		// display or a button is pushed
		while(scroll_display()) {
    124e:	0d c0       	rjmp	.+26     	; 0x126a <handle_game_over+0x64>
    1250:	2f e7       	ldi	r18, 0x7F	; 127
    1252:	89 ea       	ldi	r24, 0xA9	; 169
    1254:	93 e0       	ldi	r25, 0x03	; 3
    1256:	21 50       	subi	r18, 0x01	; 1
    1258:	80 40       	sbci	r24, 0x00	; 0
    125a:	90 40       	sbci	r25, 0x00	; 0
    125c:	e1 f7       	brne	.-8      	; 0x1256 <handle_game_over+0x50>
    125e:	00 c0       	rjmp	.+0      	; 0x1260 <handle_game_over+0x5a>
    1260:	00 00       	nop
			_delay_ms(150);
			if(button_pushed() != NO_BUTTON_PUSHED) {
    1262:	0e 94 15 01 	call	0x22a	; 0x22a <button_pushed>
    1266:	8f 3f       	cpi	r24, 0xFF	; 255
    1268:	41 f4       	brne	.+16     	; 0x127a <handle_game_over+0x74>
	
	while(button_pushed() == NO_BUTTON_PUSHED) {
		set_scrolling_display_text("GAME OVER", COLOUR_RED);
		// Scroll the message until it has scrolled off the
		// display or a button is pushed
		while(scroll_display()) {
    126a:	0e 94 86 0a 	call	0x150c	; 0x150c <scroll_display>
    126e:	81 11       	cpse	r24, r1
    1270:	ef cf       	rjmp	.-34     	; 0x1250 <handle_game_over+0x4a>
	printf_P(PSTR("GAME OVER"));
	move_cursor(10,15);
	printf_P(PSTR("Press a button to start again"));
	game_visual();
	
	while(button_pushed() == NO_BUTTON_PUSHED) {
    1272:	0e 94 15 01 	call	0x22a	; 0x22a <button_pushed>
    1276:	8f 3f       	cpi	r24, 0xFF	; 255
    1278:	29 f3       	breq	.-54     	; 0x1244 <handle_game_over+0x3e>
    127a:	08 95       	ret

0000127c <main>:

/////////////////////////////// main //////////////////////////////////
int main(void) {
	// Setup hardware and call backs. This will turn on
	// interrupts.
	asteroid_speed = 1200;
    127c:	80 eb       	ldi	r24, 0xB0	; 176
    127e:	94 e0       	ldi	r25, 0x04	; 4
    1280:	a0 e0       	ldi	r26, 0x00	; 0
    1282:	b0 e0       	ldi	r27, 0x00	; 0
    1284:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <asteroid_speed>
    1288:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <asteroid_speed+0x1>
    128c:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <asteroid_speed+0x2>
    1290:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <asteroid_speed+0x3>
	DDRA = 0b01111100;
    1294:	8c e7       	ldi	r24, 0x7C	; 124
    1296:	81 b9       	out	0x01, r24	; 1
	DDRD = 0b11111000;
    1298:	88 ef       	ldi	r24, 0xF8	; 248
    129a:	8a b9       	out	0x0a, r24	; 10
	// Make pin OC1B be an output (port D, pin 4)
	
	initialise_hardware();
    129c:	0e 94 a9 06 	call	0xd52	; 0xd52 <initialise_hardware>
	//eeprom_read_word(0);
	// Show the splash screen message. Returns when display
	// is complete
	splash_screen();
    12a0:	0e 94 b8 06 	call	0xd70	; 0xd70 <splash_screen>
	while(1) {
		new_game();
    12a4:	0e 94 f1 06 	call	0xde2	; 0xde2 <new_game>
		play_game();
    12a8:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <play_game>
		handle_game_over();
    12ac:	0e 94 03 09 	call	0x1206	; 0x1206 <handle_game_over>
    12b0:	f9 cf       	rjmp	.-14     	; 0x12a4 <main+0x28>

000012b2 <init_score>:
#include "timer0.h"

volatile uint32_t score;

void init_score(void) {
	score = 0;
    12b2:	10 92 be 01 	sts	0x01BE, r1	; 0x8001be <score>
    12b6:	10 92 bf 01 	sts	0x01BF, r1	; 0x8001bf <score+0x1>
    12ba:	10 92 c0 01 	sts	0x01C0, r1	; 0x8001c0 <score+0x2>
    12be:	10 92 c1 01 	sts	0x01C1, r1	; 0x8001c1 <score+0x3>
	clear_terminal();
    12c2:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <clear_terminal>
	move_cursor(10,10);
    12c6:	6a e0       	ldi	r22, 0x0A	; 10
    12c8:	70 e0       	ldi	r23, 0x00	; 0
    12ca:	8a e0       	ldi	r24, 0x0A	; 10
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	0e 94 c4 0c 	call	0x1988	; 0x1988 <move_cursor>
	
	
}

uint32_t get_score(void) {
	return score;
    12d2:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <score>
    12d6:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <score+0x1>
    12da:	a0 91 c0 01 	lds	r26, 0x01C0	; 0x8001c0 <score+0x2>
    12de:	b0 91 c1 01 	lds	r27, 0x01C1	; 0x8001c1 <score+0x3>
void init_score(void) {
	score = 0;
	clear_terminal();
	move_cursor(10,10);

	printf("Score : %" PRIu32 , get_score());
    12e2:	bf 93       	push	r27
    12e4:	af 93       	push	r26
    12e6:	9f 93       	push	r25
    12e8:	8f 93       	push	r24
    12ea:	8b e3       	ldi	r24, 0x3B	; 59
    12ec:	91 e0       	ldi	r25, 0x01	; 1
    12ee:	9f 93       	push	r25
    12f0:	8f 93       	push	r24
    12f2:	0e 94 9a 12 	call	0x2534	; 0x2534 <printf>
	move_cursor(10,12);
    12f6:	6c e0       	ldi	r22, 0x0C	; 12
    12f8:	70 e0       	ldi	r23, 0x00	; 0
    12fa:	8a e0       	ldi	r24, 0x0A	; 10
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	0e 94 c4 0c 	call	0x1988	; 0x1988 <move_cursor>
	printf("Lives : %d" , (int8_t)get_lives());
    1302:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <get_lives>
    1306:	28 2f       	mov	r18, r24
    1308:	08 2e       	mov	r0, r24
    130a:	00 0c       	add	r0, r0
    130c:	33 0b       	sbc	r19, r19
    130e:	3f 93       	push	r19
    1310:	8f 93       	push	r24
    1312:	87 e4       	ldi	r24, 0x47	; 71
    1314:	91 e0       	ldi	r25, 0x01	; 1
    1316:	9f 93       	push	r25
    1318:	8f 93       	push	r24
    131a:	0e 94 9a 12 	call	0x2534	; 0x2534 <printf>
	
}
    131e:	8d b7       	in	r24, 0x3d	; 61
    1320:	9e b7       	in	r25, 0x3e	; 62
    1322:	0a 96       	adiw	r24, 0x0a	; 10
    1324:	0f b6       	in	r0, 0x3f	; 63
    1326:	f8 94       	cli
    1328:	9e bf       	out	0x3e, r25	; 62
    132a:	0f be       	out	0x3f, r0	; 63
    132c:	8d bf       	out	0x3d, r24	; 61
    132e:	08 95       	ret

00001330 <add_to_score>:


void add_to_score(uint16_t value) {
    1330:	cf 93       	push	r28
    1332:	df 93       	push	r29
    1334:	ec 01       	movw	r28, r24
	
	if(value == 5){
    1336:	05 97       	sbiw	r24, 0x05	; 5
    1338:	f9 f4       	brne	.+62     	; 0x1378 <add_to_score+0x48>
		PORTD |= 0b01111100;
    133a:	8b b1       	in	r24, 0x0b	; 11
    133c:	8c 67       	ori	r24, 0x7C	; 124
    133e:	8b b9       	out	0x0b, r24	; 11
	}
	
	score += value;
    1340:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <score>
    1344:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <score+0x1>
    1348:	a0 91 c0 01 	lds	r26, 0x01C0	; 0x8001c0 <score+0x2>
    134c:	b0 91 c1 01 	lds	r27, 0x01C1	; 0x8001c1 <score+0x3>
    1350:	05 96       	adiw	r24, 0x05	; 5
    1352:	a1 1d       	adc	r26, r1
    1354:	b1 1d       	adc	r27, r1
    1356:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <score>
    135a:	90 93 bf 01 	sts	0x01BF, r25	; 0x8001bf <score+0x1>
    135e:	a0 93 c0 01 	sts	0x01C0, r26	; 0x8001c0 <score+0x2>
    1362:	b0 93 c1 01 	sts	0x01C1, r27	; 0x8001c1 <score+0x3>
	clear_terminal();
    1366:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <clear_terminal>
	move_cursor(10,10);
    136a:	6a e0       	ldi	r22, 0x0A	; 10
    136c:	70 e0       	ldi	r23, 0x00	; 0
    136e:	8a e0       	ldi	r24, 0x0A	; 10
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	0e 94 c4 0c 	call	0x1988	; 0x1988 <move_cursor>
    1376:	1f c0       	rjmp	.+62     	; 0x13b6 <add_to_score+0x86>
	
	if(value == 5){
		PORTD |= 0b01111100;
	}
	
	score += value;
    1378:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <score>
    137c:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <score+0x1>
    1380:	a0 91 c0 01 	lds	r26, 0x01C0	; 0x8001c0 <score+0x2>
    1384:	b0 91 c1 01 	lds	r27, 0x01C1	; 0x8001c1 <score+0x3>
    1388:	8c 0f       	add	r24, r28
    138a:	9d 1f       	adc	r25, r29
    138c:	a1 1d       	adc	r26, r1
    138e:	b1 1d       	adc	r27, r1
    1390:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <score>
    1394:	90 93 bf 01 	sts	0x01BF, r25	; 0x8001bf <score+0x1>
    1398:	a0 93 c0 01 	sts	0x01C0, r26	; 0x8001c0 <score+0x2>
    139c:	b0 93 c1 01 	sts	0x01C1, r27	; 0x8001c1 <score+0x3>
	clear_terminal();
    13a0:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <clear_terminal>
	move_cursor(10,10);
    13a4:	6a e0       	ldi	r22, 0x0A	; 10
    13a6:	70 e0       	ldi	r23, 0x00	; 0
    13a8:	8a e0       	ldi	r24, 0x0A	; 10
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	0e 94 c4 0c 	call	0x1988	; 0x1988 <move_cursor>
	if(value < 9){
    13b0:	c9 30       	cpi	r28, 0x09	; 9
    13b2:	d1 05       	cpc	r29, r1
    13b4:	78 f5       	brcc	.+94     	; 0x1414 <add_to_score+0xe4>
	
	
}

uint32_t get_score(void) {
	return score;
    13b6:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <score>
    13ba:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <score+0x1>
    13be:	a0 91 c0 01 	lds	r26, 0x01C0	; 0x8001c0 <score+0x2>
    13c2:	b0 91 c1 01 	lds	r27, 0x01C1	; 0x8001c1 <score+0x3>
	
	score += value;
	clear_terminal();
	move_cursor(10,10);
	if(value < 9){
		printf("Score : %" PRIu32, get_score());
    13c6:	bf 93       	push	r27
    13c8:	af 93       	push	r26
    13ca:	9f 93       	push	r25
    13cc:	8f 93       	push	r24
    13ce:	8b e3       	ldi	r24, 0x3B	; 59
    13d0:	91 e0       	ldi	r25, 0x01	; 1
    13d2:	9f 93       	push	r25
    13d4:	8f 93       	push	r24
    13d6:	0e 94 9a 12 	call	0x2534	; 0x2534 <printf>
		move_cursor(10,12);
    13da:	6c e0       	ldi	r22, 0x0C	; 12
    13dc:	70 e0       	ldi	r23, 0x00	; 0
    13de:	8a e0       	ldi	r24, 0x0A	; 10
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	0e 94 c4 0c 	call	0x1988	; 0x1988 <move_cursor>
		printf("Lives : %d" , (int8_t)get_lives());
    13e6:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <get_lives>
    13ea:	28 2f       	mov	r18, r24
    13ec:	08 2e       	mov	r0, r24
    13ee:	00 0c       	add	r0, r0
    13f0:	33 0b       	sbc	r19, r19
    13f2:	3f 93       	push	r19
    13f4:	8f 93       	push	r24
    13f6:	87 e4       	ldi	r24, 0x47	; 71
    13f8:	91 e0       	ldi	r25, 0x01	; 1
    13fa:	9f 93       	push	r25
    13fc:	8f 93       	push	r24
    13fe:	0e 94 9a 12 	call	0x2534	; 0x2534 <printf>
    1402:	8d b7       	in	r24, 0x3d	; 61
    1404:	9e b7       	in	r25, 0x3e	; 62
    1406:	0a 96       	adiw	r24, 0x0a	; 10
    1408:	0f b6       	in	r0, 0x3f	; 63
    140a:	f8 94       	cli
    140c:	9e bf       	out	0x3e, r25	; 62
    140e:	0f be       	out	0x3f, r0	; 63
    1410:	8d bf       	out	0x3d, r24	; 61
    1412:	61 c0       	rjmp	.+194    	; 0x14d6 <add_to_score+0x1a6>
		
	} else if(value > 10 && value < 100 ) {
    1414:	2b 97       	sbiw	r28, 0x0b	; 11
    1416:	c9 35       	cpi	r28, 0x59	; 89
    1418:	d1 05       	cpc	r29, r1
    141a:	78 f5       	brcc	.+94     	; 0x147a <add_to_score+0x14a>
	
	
}

uint32_t get_score(void) {
	return score;
    141c:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <score>
    1420:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <score+0x1>
    1424:	a0 91 c0 01 	lds	r26, 0x01C0	; 0x8001c0 <score+0x2>
    1428:	b0 91 c1 01 	lds	r27, 0x01C1	; 0x8001c1 <score+0x3>
		printf("Score : %" PRIu32, get_score());
		move_cursor(10,12);
		printf("Lives : %d" , (int8_t)get_lives());
		
	} else if(value > 10 && value < 100 ) {
		printf("Score: %" PRIu32 " ", get_score());
    142c:	bf 93       	push	r27
    142e:	af 93       	push	r26
    1430:	9f 93       	push	r25
    1432:	8f 93       	push	r24
    1434:	82 e5       	ldi	r24, 0x52	; 82
    1436:	91 e0       	ldi	r25, 0x01	; 1
    1438:	9f 93       	push	r25
    143a:	8f 93       	push	r24
    143c:	0e 94 9a 12 	call	0x2534	; 0x2534 <printf>
		move_cursor(10,12);
    1440:	6c e0       	ldi	r22, 0x0C	; 12
    1442:	70 e0       	ldi	r23, 0x00	; 0
    1444:	8a e0       	ldi	r24, 0x0A	; 10
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	0e 94 c4 0c 	call	0x1988	; 0x1988 <move_cursor>
		printf("Lives : %d"  , (int8_t)get_lives());
    144c:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <get_lives>
    1450:	28 2f       	mov	r18, r24
    1452:	08 2e       	mov	r0, r24
    1454:	00 0c       	add	r0, r0
    1456:	33 0b       	sbc	r19, r19
    1458:	3f 93       	push	r19
    145a:	8f 93       	push	r24
    145c:	87 e4       	ldi	r24, 0x47	; 71
    145e:	91 e0       	ldi	r25, 0x01	; 1
    1460:	9f 93       	push	r25
    1462:	8f 93       	push	r24
    1464:	0e 94 9a 12 	call	0x2534	; 0x2534 <printf>
    1468:	8d b7       	in	r24, 0x3d	; 61
    146a:	9e b7       	in	r25, 0x3e	; 62
    146c:	0a 96       	adiw	r24, 0x0a	; 10
    146e:	0f b6       	in	r0, 0x3f	; 63
    1470:	f8 94       	cli
    1472:	9e bf       	out	0x3e, r25	; 62
    1474:	0f be       	out	0x3f, r0	; 63
    1476:	8d bf       	out	0x3d, r24	; 61
    1478:	2e c0       	rjmp	.+92     	; 0x14d6 <add_to_score+0x1a6>
	
	
}

uint32_t get_score(void) {
	return score;
    147a:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <score>
    147e:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <score+0x1>
    1482:	a0 91 c0 01 	lds	r26, 0x01C0	; 0x8001c0 <score+0x2>
    1486:	b0 91 c1 01 	lds	r27, 0x01C1	; 0x8001c1 <score+0x3>
		printf("Score: %" PRIu32 " ", get_score());
		move_cursor(10,12);
		printf("Lives : %d"  , (int8_t)get_lives());
		
	} else {
		printf("Score: %" PRIu32 "  ", get_score());
    148a:	bf 93       	push	r27
    148c:	af 93       	push	r26
    148e:	9f 93       	push	r25
    1490:	8f 93       	push	r24
    1492:	8e e5       	ldi	r24, 0x5E	; 94
    1494:	91 e0       	ldi	r25, 0x01	; 1
    1496:	9f 93       	push	r25
    1498:	8f 93       	push	r24
    149a:	0e 94 9a 12 	call	0x2534	; 0x2534 <printf>
		move_cursor(10,12);
    149e:	6c e0       	ldi	r22, 0x0C	; 12
    14a0:	70 e0       	ldi	r23, 0x00	; 0
    14a2:	8a e0       	ldi	r24, 0x0A	; 10
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	0e 94 c4 0c 	call	0x1988	; 0x1988 <move_cursor>
		printf("Lives : %d"  , (int8_t)get_lives());
    14aa:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <get_lives>
    14ae:	28 2f       	mov	r18, r24
    14b0:	08 2e       	mov	r0, r24
    14b2:	00 0c       	add	r0, r0
    14b4:	33 0b       	sbc	r19, r19
    14b6:	3f 93       	push	r19
    14b8:	8f 93       	push	r24
    14ba:	87 e4       	ldi	r24, 0x47	; 71
    14bc:	91 e0       	ldi	r25, 0x01	; 1
    14be:	9f 93       	push	r25
    14c0:	8f 93       	push	r24
    14c2:	0e 94 9a 12 	call	0x2534	; 0x2534 <printf>
    14c6:	8d b7       	in	r24, 0x3d	; 61
    14c8:	9e b7       	in	r25, 0x3e	; 62
    14ca:	0a 96       	adiw	r24, 0x0a	; 10
    14cc:	0f b6       	in	r0, 0x3f	; 63
    14ce:	f8 94       	cli
    14d0:	9e bf       	out	0x3e, r25	; 62
    14d2:	0f be       	out	0x3f, r0	; 63
    14d4:	8d bf       	out	0x3d, r24	; 61
	}
	
	
}
    14d6:	df 91       	pop	r29
    14d8:	cf 91       	pop	r28
    14da:	08 95       	ret

000014dc <get_score>:

uint32_t get_score(void) {
	return score;
    14dc:	60 91 be 01 	lds	r22, 0x01BE	; 0x8001be <score>
    14e0:	70 91 bf 01 	lds	r23, 0x01BF	; 0x8001bf <score+0x1>
    14e4:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <score+0x2>
    14e8:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <score+0x3>
}
    14ec:	08 95       	ret

000014ee <set_scrolling_display_text>:
 * is called while the string is still being displayed.
 * We reset the pointers to ensure the next column to be displayed
 * comes from the first character of this string.
 */
void set_scrolling_display_text(char* string_to_display, PixelColour c) {
	colour = c;
    14ee:	60 93 0a 01 	sts	0x010A, r22	; 0x80010a <colour>
	display_string = string_to_display;
    14f2:	90 93 77 01 	sts	0x0177, r25	; 0x800177 <display_string+0x1>
    14f6:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <display_string>
	next_col_ptr = 0;
    14fa:	10 92 79 01 	sts	0x0179, r1	; 0x800179 <next_col_ptr+0x1>
    14fe:	10 92 78 01 	sts	0x0178, r1	; 0x800178 <next_col_ptr>
	next_char_to_display = 0;
    1502:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <next_char_to_display+0x1>
    1506:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <next_char_to_display>
    150a:	08 95       	ret

0000150c <scroll_display>:
/*
 * Scroll the display. Should be called whenever the display
 * is to be scrolled. 
 * Returns 1 if still scrolling display.
 */
uint8_t scroll_display(void) {
    150c:	0f 93       	push	r16
    150e:	1f 93       	push	r17
    1510:	cf 93       	push	r28
    1512:	df 93       	push	r29
    1514:	cd b7       	in	r28, 0x3d	; 61
    1516:	de b7       	in	r29, 0x3e	; 62
    1518:	28 97       	sbiw	r28, 0x08	; 8
    151a:	0f b6       	in	r0, 0x3f	; 63
    151c:	f8 94       	cli
    151e:	de bf       	out	0x3e, r29	; 62
    1520:	0f be       	out	0x3f, r0	; 63
    1522:	cd bf       	out	0x3d, r28	; 61
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;

	if(next_col_ptr) {
    1524:	e0 91 78 01 	lds	r30, 0x0178	; 0x800178 <next_col_ptr>
    1528:	f0 91 79 01 	lds	r31, 0x0179	; 0x800179 <next_col_ptr+0x1>
    152c:	30 97       	sbiw	r30, 0x00	; 0
    152e:	81 f0       	breq	.+32     	; 0x1550 <scroll_display+0x44>
		/* We're currently outputting a character and next_col_ptr
		 * points to the display data for the next column. We
		 * extract that data from program memory.
		 */
		col_data = pgm_read_byte(next_col_ptr);
    1530:	14 91       	lpm	r17, Z

		if(col_data & 1) {
    1532:	10 ff       	sbrs	r17, 0
    1534:	06 c0       	rjmp	.+12     	; 0x1542 <scroll_display+0x36>
			/* Least significant bit is set - this is the last
			 * column of this character
			 */
			next_col_ptr = 0;
    1536:	10 92 79 01 	sts	0x0179, r1	; 0x800179 <next_col_ptr+0x1>
    153a:	10 92 78 01 	sts	0x0178, r1	; 0x800178 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    153e:	00 e0       	ldi	r16, 0x00	; 0
    1540:	6b c0       	rjmp	.+214    	; 0x1618 <scroll_display+0x10c>
			next_col_ptr = 0;
		} else {
			/* This is not the last column of this character - make
			 * the pointer point to the data for the next column.
			 */
			next_col_ptr++;
    1542:	31 96       	adiw	r30, 0x01	; 1
    1544:	f0 93 79 01 	sts	0x0179, r31	; 0x800179 <next_col_ptr+0x1>
    1548:	e0 93 78 01 	sts	0x0178, r30	; 0x800178 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    154c:	00 e0       	ldi	r16, 0x00	; 0
    154e:	64 c0       	rjmp	.+200    	; 0x1618 <scroll_display+0x10c>
			/* This is not the last column of this character - make
			 * the pointer point to the data for the next column.
			 */
			next_col_ptr++;
		}
	} else if(next_char_to_display) {
    1550:	e0 91 74 01 	lds	r30, 0x0174	; 0x800174 <next_char_to_display>
    1554:	f0 91 75 01 	lds	r31, 0x0175	; 0x800175 <next_char_to_display+0x1>
    1558:	30 97       	sbiw	r30, 0x00	; 0
    155a:	09 f4       	brne	.+2      	; 0x155e <scroll_display+0x52>
    155c:	49 c0       	rjmp	.+146    	; 0x15f0 <scroll_display+0xe4>
		 * the next character. We first get the next character to be 
		 * displayed and advance our next character pointer 
		 * (next_char_to_display) so that it points to the character 
		 * after.
		 */
		next_char = *(next_char_to_display++);
    155e:	cf 01       	movw	r24, r30
    1560:	01 96       	adiw	r24, 0x01	; 1
    1562:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <next_char_to_display+0x1>
    1566:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <next_char_to_display>
    156a:	e0 81       	ld	r30, Z
		if(next_char == 0) {
    156c:	e1 11       	cpse	r30, r1
    156e:	0a c0       	rjmp	.+20     	; 0x1584 <scroll_display+0x78>
			/* We reached the null character at the end of the string.
			 * There is no next character, reset our pointer to 
			 * the next character and set our countdown until the 
			 * message disappears from the display.
			 */
			next_char_to_display = 0;
    1570:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <next_char_to_display+0x1>
    1574:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <next_char_to_display>
			shift_countdown = 16;
    1578:	80 e1       	ldi	r24, 0x10	; 16
    157a:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <shift_countdown.1854>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    157e:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    1580:	10 e0       	ldi	r17, 0x00	; 0
    1582:	4a c0       	rjmp	.+148    	; 0x1618 <scroll_display+0x10c>
			 * the next character and set our countdown until the 
			 * message disappears from the display.
			 */
			next_char_to_display = 0;
			shift_countdown = 16;
		} else if (next_char >= 'a' && next_char <= 'z') {
    1584:	8f e9       	ldi	r24, 0x9F	; 159
    1586:	8e 0f       	add	r24, r30
    1588:	8a 31       	cpi	r24, 0x1A	; 26
    158a:	70 f4       	brcc	.+28     	; 0x15a8 <scroll_display+0x9c>
			/* Character is a lower case letter - the next column to 
			 * be displayed will be the first column of the letter
			 * data for that letter
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	ee 0f       	add	r30, r30
    1590:	ff 1f       	adc	r31, r31
    1592:	eb 5c       	subi	r30, 0xCB	; 203
    1594:	ff 4f       	sbci	r31, 0xFF	; 255
    1596:	85 91       	lpm	r24, Z+
    1598:	94 91       	lpm	r25, Z
    159a:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <next_col_ptr+0x1>
    159e:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    15a2:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    15a4:	10 e0       	ldi	r17, 0x00	; 0
    15a6:	38 c0       	rjmp	.+112    	; 0x1618 <scroll_display+0x10c>
			/* Character is a lower case letter - the next column to 
			 * be displayed will be the first column of the letter
			 * data for that letter
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
		} else if (next_char >= 'A' && next_char <= 'Z') {
    15a8:	8f eb       	ldi	r24, 0xBF	; 191
    15aa:	8e 0f       	add	r24, r30
    15ac:	8a 31       	cpi	r24, 0x1A	; 26
    15ae:	70 f4       	brcc	.+28     	; 0x15cc <scroll_display+0xc0>
			/* Upper case character */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'A']);
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	ee 0f       	add	r30, r30
    15b4:	ff 1f       	adc	r31, r31
    15b6:	eb 58       	subi	r30, 0x8B	; 139
    15b8:	ff 4f       	sbci	r31, 0xFF	; 255
    15ba:	85 91       	lpm	r24, Z+
    15bc:	94 91       	lpm	r25, Z
    15be:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <next_col_ptr+0x1>
    15c2:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    15c6:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    15c8:	10 e0       	ldi	r17, 0x00	; 0
    15ca:	26 c0       	rjmp	.+76     	; 0x1618 <scroll_display+0x10c>
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
		} else if (next_char >= 'A' && next_char <= 'Z') {
			/* Upper case character */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'A']);
		} else if (next_char >= '0' && next_char <= '9') {
    15cc:	80 ed       	ldi	r24, 0xD0	; 208
    15ce:	8e 0f       	add	r24, r30
    15d0:	8a 30       	cpi	r24, 0x0A	; 10
    15d2:	00 f5       	brcc	.+64     	; 0x1614 <scroll_display+0x108>
			/* Digit */
			next_col_ptr = (const uint8_t*)pgm_read_word(&numbers[next_char - '0']);
    15d4:	f0 e0       	ldi	r31, 0x00	; 0
    15d6:	ee 0f       	add	r30, r30
    15d8:	ff 1f       	adc	r31, r31
    15da:	ed 57       	subi	r30, 0x7D	; 125
    15dc:	ff 4f       	sbci	r31, 0xFF	; 255
    15de:	85 91       	lpm	r24, Z+
    15e0:	94 91       	lpm	r25, Z
    15e2:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <next_col_ptr+0x1>
    15e6:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    15ea:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    15ec:	10 e0       	ldi	r17, 0x00	; 0
    15ee:	14 c0       	rjmp	.+40     	; 0x1618 <scroll_display+0x10c>
	} else {
		/* We're not outputting a column of dots and there is 
		 * no next character. Move on to the string that we
		 * have stored (if any).
		 */
		if(!display_string) {
    15f0:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <display_string>
    15f4:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <display_string+0x1>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    15f8:	01 e0       	ldi	r16, 0x01	; 1
    15fa:	00 97       	sbiw	r24, 0x00	; 0
    15fc:	09 f0       	breq	.+2      	; 0x1600 <scroll_display+0xf4>
    15fe:	00 e0       	ldi	r16, 0x00	; 0
			/* May be finished - flag this and adjust below if we're still
			 * showing pixels
			 */
			finished = 1;
		}
		next_char_to_display = display_string;
    1600:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <next_char_to_display+0x1>
    1604:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <next_char_to_display>
		display_string = 0;
    1608:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <display_string+0x1>
    160c:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <display_string>
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    1610:	10 e0       	ldi	r17, 0x00	; 0
    1612:	02 c0       	rjmp	.+4      	; 0x1618 <scroll_display+0x10c>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1614:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    1616:	10 e0       	ldi	r17, 0x00	; 0
	/* Shift the current display one pixel to the left and insert the 
	 * new column data at column 15.
	 * Adjust our "finished" variable if we've finished scrolling the
	 * message off the display
	 */
	ledmatrix_shift_display_left();
    1618:	0e 94 9e 06 	call	0xd3c	; 0xd3c <ledmatrix_shift_display_left>
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
		// If the relevant font bit is set, we make this a red pixel, otherwise blank
		if(col_data & 0x80) {
			column_colour_data[i] = colour;
    161c:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <colour>
    1620:	fe 01       	movw	r30, r28
    1622:	38 96       	adiw	r30, 0x08	; 8
    1624:	ce 01       	movw	r24, r28
    1626:	01 96       	adiw	r24, 0x01	; 1
	 */
	ledmatrix_shift_display_left();
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
		// If the relevant font bit is set, we make this a red pixel, otherwise blank
		if(col_data & 0x80) {
    1628:	11 23       	and	r17, r17
    162a:	14 f4       	brge	.+4      	; 0x1630 <scroll_display+0x124>
			column_colour_data[i] = colour;
    162c:	20 83       	st	Z, r18
    162e:	01 c0       	rjmp	.+2      	; 0x1632 <scroll_display+0x126>
		} else {
			column_colour_data[i] = 0;
    1630:	10 82       	st	Z, r1
		}
		col_data <<= 1;
    1632:	11 0f       	add	r17, r17
    1634:	31 97       	sbiw	r30, 0x01	; 1
	 * Adjust our "finished" variable if we've finished scrolling the
	 * message off the display
	 */
	ledmatrix_shift_display_left();
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
    1636:	e8 17       	cp	r30, r24
    1638:	f9 07       	cpc	r31, r25
    163a:	b1 f7       	brne	.-20     	; 0x1628 <scroll_display+0x11c>
		} else {
			column_colour_data[i] = 0;
		}
		col_data <<= 1;
	}
	column_colour_data[0] = 0;
    163c:	19 82       	std	Y+1, r1	; 0x01
	ledmatrix_update_column(15, column_colour_data);
    163e:	be 01       	movw	r22, r28
    1640:	6f 5f       	subi	r22, 0xFF	; 255
    1642:	7f 4f       	sbci	r23, 0xFF	; 255
    1644:	8f e0       	ldi	r24, 0x0F	; 15
    1646:	0e 94 81 06 	call	0xd02	; 0xd02 <ledmatrix_update_column>
	if(shift_countdown > 0) {
    164a:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <shift_countdown.1854>
    164e:	88 23       	and	r24, r24
    1650:	89 f0       	breq	.+34     	; 0x1674 <scroll_display+0x168>
		shift_countdown--;
    1652:	81 50       	subi	r24, 0x01	; 1
    1654:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <shift_countdown.1854>
	}
	finished = finished && (shift_countdown == 0);
    1658:	00 23       	and	r16, r16
    165a:	11 f0       	breq	.+4      	; 0x1660 <scroll_display+0x154>
    165c:	88 23       	and	r24, r24
    165e:	11 f0       	breq	.+4      	; 0x1664 <scroll_display+0x158>
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	03 c0       	rjmp	.+6      	; 0x166a <scroll_display+0x15e>
    1664:	91 e0       	ldi	r25, 0x01	; 1
    1666:	01 c0       	rjmp	.+2      	; 0x166a <scroll_display+0x15e>
    1668:	91 e0       	ldi	r25, 0x01	; 1
	return !finished;
    166a:	81 e0       	ldi	r24, 0x01	; 1
    166c:	99 23       	and	r25, r25
    166e:	29 f0       	breq	.+10     	; 0x167a <scroll_display+0x16e>
    1670:	80 e0       	ldi	r24, 0x00	; 0
    1672:	03 c0       	rjmp	.+6      	; 0x167a <scroll_display+0x16e>
	column_colour_data[0] = 0;
	ledmatrix_update_column(15, column_colour_data);
	if(shift_countdown > 0) {
		shift_countdown--;
	}
	finished = finished && (shift_countdown == 0);
    1674:	00 23       	and	r16, r16
    1676:	a1 f3       	breq	.-24     	; 0x1660 <scroll_display+0x154>
    1678:	f7 cf       	rjmp	.-18     	; 0x1668 <scroll_display+0x15c>
	return !finished;
}
    167a:	28 96       	adiw	r28, 0x08	; 8
    167c:	0f b6       	in	r0, 0x3f	; 63
    167e:	f8 94       	cli
    1680:	de bf       	out	0x3e, r29	; 62
    1682:	0f be       	out	0x3f, r0	; 63
    1684:	cd bf       	out	0x3d, r28	; 61
    1686:	df 91       	pop	r29
    1688:	cf 91       	pop	r28
    168a:	1f 91       	pop	r17
    168c:	0f 91       	pop	r16
    168e:	08 95       	ret

00001690 <uart_put_char>:
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
	bytes_in_input_buffer = 0;
}

static int uart_put_char(char c, FILE* stream) {
    1690:	cf 93       	push	r28
    1692:	c8 2f       	mov	r28, r24
	/* Add the character to the buffer for transmission (if there 
	 * is space to do so). If not we wait until the buffer has space.
	 * If the character is \n, we output \r (carriage return)
	 * also.
	*/
	if(c == '\n') {
    1694:	8a 30       	cpi	r24, 0x0A	; 10
    1696:	19 f4       	brne	.+6      	; 0x169e <uart_put_char+0xe>
		uart_put_char('\r', stream);
    1698:	8d e0       	ldi	r24, 0x0D	; 13
    169a:	0e 94 48 0b 	call	0x1690	; 0x1690 <uart_put_char>
	 * never be emptied if interrupts are disabled. If the buffer is full
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
    169e:	9f b7       	in	r25, 0x3f	; 63
    16a0:	90 78       	andi	r25, 0x80	; 128
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
    16a2:	02 c0       	rjmp	.+4      	; 0x16a8 <uart_put_char+0x18>
		if(!interrupts_enabled) {
    16a4:	99 23       	and	r25, r25
    16a6:	29 f1       	breq	.+74     	; 0x16f2 <uart_put_char+0x62>
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
    16a8:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <bytes_in_out_buffer>
    16ac:	8f 3f       	cpi	r24, 0xFF	; 255
    16ae:	d1 f3       	breq	.-12     	; 0x16a4 <uart_put_char+0x14>
	 * NOTE: we disable interrupts before modifying the buffer. This
	 * prevents the ISR from modifying the buffer at the same time.
	 * We reenable them if they were enabled when we entered the
	 * function.
	*/	
	cli();
    16b0:	f8 94       	cli
	out_buffer[out_insert_pos++] = c;
    16b2:	e0 91 c2 01 	lds	r30, 0x01C2	; 0x8001c2 <out_insert_pos>
    16b6:	81 e0       	ldi	r24, 0x01	; 1
    16b8:	8e 0f       	add	r24, r30
    16ba:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <out_insert_pos>
    16be:	f0 e0       	ldi	r31, 0x00	; 0
    16c0:	ec 53       	subi	r30, 0x3C	; 60
    16c2:	fe 4f       	sbci	r31, 0xFE	; 254
    16c4:	c0 83       	st	Z, r28
	bytes_in_out_buffer++;
    16c6:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <bytes_in_out_buffer>
    16ca:	8f 5f       	subi	r24, 0xFF	; 255
    16cc:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <bytes_in_out_buffer>
	if(out_insert_pos == OUTPUT_BUFFER_SIZE) {
    16d0:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <out_insert_pos>
    16d4:	8f 3f       	cpi	r24, 0xFF	; 255
    16d6:	11 f4       	brne	.+4      	; 0x16dc <uart_put_char+0x4c>
		/* Wrap around buffer pointer if necessary */
		out_insert_pos = 0;
    16d8:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <out_insert_pos>
	}
	/* Reenable interrupts (UDR Empty interrupt may have been
	 * disabled) - we ensure it is now enabled so that it will
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
    16dc:	e1 ec       	ldi	r30, 0xC1	; 193
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	80 81       	ld	r24, Z
    16e2:	80 62       	ori	r24, 0x20	; 32
    16e4:	80 83       	st	Z, r24
	if(interrupts_enabled) {
    16e6:	99 23       	and	r25, r25
    16e8:	39 f0       	breq	.+14     	; 0x16f8 <uart_put_char+0x68>
		sei();
    16ea:	78 94       	sei
	}
	return 0;
    16ec:	80 e0       	ldi	r24, 0x00	; 0
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	05 c0       	rjmp	.+10     	; 0x16fc <uart_put_char+0x6c>
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
		if(!interrupts_enabled) {
			return 1;
    16f2:	81 e0       	ldi	r24, 0x01	; 1
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	02 c0       	rjmp	.+4      	; 0x16fc <uart_put_char+0x6c>
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
	if(interrupts_enabled) {
		sei();
	}
	return 0;
    16f8:	80 e0       	ldi	r24, 0x00	; 0
    16fa:	90 e0       	ldi	r25, 0x00	; 0
}
    16fc:	cf 91       	pop	r28
    16fe:	08 95       	ret

00001700 <uart_get_char>:

int uart_get_char(FILE* stream) {
	/* Wait until we've received a character */
	while(bytes_in_input_buffer == 0) {
    1700:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <bytes_in_input_buffer>
    1704:	88 23       	and	r24, r24
    1706:	e1 f3       	breq	.-8      	; 0x1700 <uart_get_char>
	 * buffer. We reenable interrupts if they were on.
	 * The pending character is the one which is byte_in_input_buffer
	 * characters before the insert position (taking into account
	 * that we may need to wrap around).
	 */
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
    1708:	2f b7       	in	r18, 0x3f	; 63
    170a:	20 78       	andi	r18, 0x80	; 128
	cli();
    170c:	f8 94       	cli
	char c;
	if(input_insert_pos - bytes_in_input_buffer < 0) {
    170e:	80 91 c3 02 	lds	r24, 0x02C3	; 0x8002c3 <input_insert_pos>
    1712:	30 91 d5 02 	lds	r19, 0x02D5	; 0x8002d5 <bytes_in_input_buffer>
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	83 1b       	sub	r24, r19
    171a:	91 09       	sbc	r25, r1
    171c:	5a f4       	brpl	.+22     	; 0x1734 <uart_get_char+0x34>
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
    171e:	e0 91 c3 02 	lds	r30, 0x02C3	; 0x8002c3 <input_insert_pos>
    1722:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <bytes_in_input_buffer>
				+ INPUT_BUFFER_SIZE];
    1726:	f0 e0       	ldi	r31, 0x00	; 0
    1728:	e8 1b       	sub	r30, r24
    172a:	f1 09       	sbc	r31, r1
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
	cli();
	char c;
	if(input_insert_pos - bytes_in_input_buffer < 0) {
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
    172c:	ec 52       	subi	r30, 0x2C	; 44
    172e:	fd 4f       	sbci	r31, 0xFD	; 253
    1730:	80 81       	ld	r24, Z
    1732:	0a c0       	rjmp	.+20     	; 0x1748 <uart_get_char+0x48>
				+ INPUT_BUFFER_SIZE];
	} else {
		c = input_buffer[input_insert_pos - bytes_in_input_buffer];
    1734:	e0 91 c3 02 	lds	r30, 0x02C3	; 0x8002c3 <input_insert_pos>
    1738:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <bytes_in_input_buffer>
    173c:	f0 e0       	ldi	r31, 0x00	; 0
    173e:	e8 1b       	sub	r30, r24
    1740:	f1 09       	sbc	r31, r1
    1742:	ec 53       	subi	r30, 0x3C	; 60
    1744:	fd 4f       	sbci	r31, 0xFD	; 253
    1746:	80 81       	ld	r24, Z
	}
	
	/* Decrement our count of bytes in the input buffer */
	bytes_in_input_buffer--;
    1748:	90 91 d5 02 	lds	r25, 0x02D5	; 0x8002d5 <bytes_in_input_buffer>
    174c:	91 50       	subi	r25, 0x01	; 1
    174e:	90 93 d5 02 	sts	0x02D5, r25	; 0x8002d5 <bytes_in_input_buffer>
	if(interrupts_enabled) {
    1752:	22 23       	and	r18, r18
    1754:	09 f0       	breq	.+2      	; 0x1758 <uart_get_char+0x58>
		sei();
    1756:	78 94       	sei
	}	
	return c;
}
    1758:	90 e0       	ldi	r25, 0x00	; 0
    175a:	08 95       	ret

0000175c <init_serial_stdio>:
void init_serial_stdio(long baudrate, int8_t echo) {
	uint16_t ubrr;
	/*
	 * Initialise our buffers
	*/
	out_insert_pos = 0;
    175c:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <out_insert_pos>
	bytes_in_out_buffer = 0;
    1760:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <bytes_in_out_buffer>
	input_insert_pos = 0;
    1764:	10 92 c3 02 	sts	0x02C3, r1	; 0x8002c3 <input_insert_pos>
	bytes_in_input_buffer = 0;
    1768:	10 92 d5 02 	sts	0x02D5, r1	; 0x8002d5 <bytes_in_input_buffer>
	input_overrun = 0;
    176c:	10 92 d4 02 	sts	0x02D4, r1	; 0x8002d4 <input_overrun>
	
	/*
	 * Record whether we're going to echo characters or not
	*/
	do_echo = echo;
    1770:	40 93 7a 01 	sts	0x017A, r20	; 0x80017a <do_echo>
	/* Configure the serial port baud rate */
	/* (This differs from the datasheet formula so that we get 
	 * rounding to the nearest integer while using integer division
	 * (which truncates)).
	*/
	ubrr = ((SYSCLK / (8 * baudrate)) + 1)/2 - 1;
    1774:	dc 01       	movw	r26, r24
    1776:	cb 01       	movw	r24, r22
    1778:	88 0f       	add	r24, r24
    177a:	99 1f       	adc	r25, r25
    177c:	aa 1f       	adc	r26, r26
    177e:	bb 1f       	adc	r27, r27
    1780:	88 0f       	add	r24, r24
    1782:	99 1f       	adc	r25, r25
    1784:	aa 1f       	adc	r26, r26
    1786:	bb 1f       	adc	r27, r27
    1788:	9c 01       	movw	r18, r24
    178a:	ad 01       	movw	r20, r26
    178c:	22 0f       	add	r18, r18
    178e:	33 1f       	adc	r19, r19
    1790:	44 1f       	adc	r20, r20
    1792:	55 1f       	adc	r21, r21
    1794:	60 e0       	ldi	r22, 0x00	; 0
    1796:	72 e1       	ldi	r23, 0x12	; 18
    1798:	8a e7       	ldi	r24, 0x7A	; 122
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	0e 94 8c 11 	call	0x2318	; 0x2318 <__divmodsi4>
    17a0:	ba 01       	movw	r22, r20
    17a2:	a9 01       	movw	r20, r18
    17a4:	4f 5f       	subi	r20, 0xFF	; 255
    17a6:	5f 4f       	sbci	r21, 0xFF	; 255
    17a8:	6f 4f       	sbci	r22, 0xFF	; 255
    17aa:	7f 4f       	sbci	r23, 0xFF	; 255
    17ac:	db 01       	movw	r26, r22
    17ae:	ca 01       	movw	r24, r20
    17b0:	1a f4       	brpl	.+6      	; 0x17b8 <init_serial_stdio+0x5c>
    17b2:	01 96       	adiw	r24, 0x01	; 1
    17b4:	a1 1d       	adc	r26, r1
    17b6:	b1 1d       	adc	r27, r1
    17b8:	b5 95       	asr	r27
    17ba:	a7 95       	ror	r26
    17bc:	97 95       	ror	r25
    17be:	87 95       	ror	r24
    17c0:	01 97       	sbiw	r24, 0x01	; 1
	UBRR0 = ubrr;
    17c2:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    17c6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	 * the UDR empty interrupt here (we wait until we've got a
	 * character to transmit).
	 * NOTE: Interrupts must be enabled globally for this
	 * library to work, but we do not do this here.
	*/
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    17ca:	e1 ec       	ldi	r30, 0xC1	; 193
    17cc:	f0 e0       	ldi	r31, 0x00	; 0
    17ce:	88 e1       	ldi	r24, 0x18	; 24
    17d0:	80 83       	st	Z, r24
	
	/*
	 * Enable receive complete interrupt 
	*/
	UCSR0B  |= (1 <<RXCIE0);
    17d2:	80 81       	ld	r24, Z
    17d4:	80 68       	ori	r24, 0x80	; 128
    17d6:	80 83       	st	Z, r24

	/* Set up our stream so the put and get functions below are used 
	 * to write/read characters via the serial port when we use
	 * stdio functions
	*/
	stdout = &myStream;
    17d8:	ea ed       	ldi	r30, 0xDA	; 218
    17da:	f2 e0       	ldi	r31, 0x02	; 2
    17dc:	8b e0       	ldi	r24, 0x0B	; 11
    17de:	91 e0       	ldi	r25, 0x01	; 1
    17e0:	93 83       	std	Z+3, r25	; 0x03
    17e2:	82 83       	std	Z+2, r24	; 0x02
	stdin = &myStream;
    17e4:	91 83       	std	Z+1, r25	; 0x01
    17e6:	80 83       	st	Z, r24
    17e8:	08 95       	ret

000017ea <serial_input_available>:
}

int8_t serial_input_available(void) {
	return (bytes_in_input_buffer != 0);
    17ea:	90 91 d5 02 	lds	r25, 0x02D5	; 0x8002d5 <bytes_in_input_buffer>
    17ee:	81 e0       	ldi	r24, 0x01	; 1
    17f0:	91 11       	cpse	r25, r1
    17f2:	01 c0       	rjmp	.+2      	; 0x17f6 <serial_input_available+0xc>
    17f4:	80 e0       	ldi	r24, 0x00	; 0
}
    17f6:	08 95       	ret

000017f8 <clear_serial_input_buffer>:

void clear_serial_input_buffer(void) {
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
    17f8:	10 92 c3 02 	sts	0x02C3, r1	; 0x8002c3 <input_insert_pos>
	bytes_in_input_buffer = 0;
    17fc:	10 92 d5 02 	sts	0x02D5, r1	; 0x8002d5 <bytes_in_input_buffer>
    1800:	08 95       	ret

00001802 <__vector_21>:
/*
 * Define the interrupt handler for UART Data Register Empty (i.e. 
 * another character can be taken from our buffer and written out)
 */
ISR(USART0_UDRE_vect) 
{
    1802:	1f 92       	push	r1
    1804:	0f 92       	push	r0
    1806:	0f b6       	in	r0, 0x3f	; 63
    1808:	0f 92       	push	r0
    180a:	11 24       	eor	r1, r1
    180c:	2f 93       	push	r18
    180e:	8f 93       	push	r24
    1810:	9f 93       	push	r25
    1812:	ef 93       	push	r30
    1814:	ff 93       	push	r31
	/* Check if we have data in our buffer */
	if(bytes_in_out_buffer > 0) {
    1816:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <bytes_in_out_buffer>
    181a:	88 23       	and	r24, r24
    181c:	29 f1       	breq	.+74     	; 0x1868 <__vector_21+0x66>
		 * one which is "bytes_in_buffer" characters before the 
		 * insert_pos (taking into account that we may 
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
    181e:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <out_insert_pos>
    1822:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <bytes_in_out_buffer>
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	82 1b       	sub	r24, r18
    182a:	91 09       	sbc	r25, r1
    182c:	5a f4       	brpl	.+22     	; 0x1844 <__vector_21+0x42>
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
    182e:	e0 91 c2 01 	lds	r30, 0x01C2	; 0x8001c2 <out_insert_pos>
    1832:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <bytes_in_out_buffer>
				+ OUTPUT_BUFFER_SIZE];
    1836:	f0 e0       	ldi	r31, 0x00	; 0
    1838:	e8 1b       	sub	r30, r24
    183a:	f1 09       	sbc	r31, r1
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
    183c:	ed 53       	subi	r30, 0x3D	; 61
    183e:	fd 4f       	sbci	r31, 0xFD	; 253
    1840:	90 81       	ld	r25, Z
    1842:	0a c0       	rjmp	.+20     	; 0x1858 <__vector_21+0x56>
				+ OUTPUT_BUFFER_SIZE];
		} else {
			c = out_buffer[out_insert_pos - bytes_in_out_buffer];
    1844:	e0 91 c2 01 	lds	r30, 0x01C2	; 0x8001c2 <out_insert_pos>
    1848:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <bytes_in_out_buffer>
    184c:	f0 e0       	ldi	r31, 0x00	; 0
    184e:	e8 1b       	sub	r30, r24
    1850:	f1 09       	sbc	r31, r1
    1852:	ec 53       	subi	r30, 0x3C	; 60
    1854:	fe 4f       	sbci	r31, 0xFE	; 254
    1856:	90 81       	ld	r25, Z
		}
		/* Decrement our count of the number of bytes in the 
		 * buffer 
		 */
		bytes_in_out_buffer--;
    1858:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <bytes_in_out_buffer>
    185c:	81 50       	subi	r24, 0x01	; 1
    185e:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <bytes_in_out_buffer>
		
		/* Output the character via the UART */
		UDR0 = c;
    1862:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1866:	05 c0       	rjmp	.+10     	; 0x1872 <__vector_21+0x70>
		 * Register Empty interrupt because otherwise it 
		 * will trigger again immediately this ISR exits. 
		 * The interrupt is reenabled when a character is
		 * placed in the buffer.
		 */
		UCSR0B &= ~(1<<UDRIE0);
    1868:	e1 ec       	ldi	r30, 0xC1	; 193
    186a:	f0 e0       	ldi	r31, 0x00	; 0
    186c:	80 81       	ld	r24, Z
    186e:	8f 7d       	andi	r24, 0xDF	; 223
    1870:	80 83       	st	Z, r24
	}
}
    1872:	ff 91       	pop	r31
    1874:	ef 91       	pop	r30
    1876:	9f 91       	pop	r25
    1878:	8f 91       	pop	r24
    187a:	2f 91       	pop	r18
    187c:	0f 90       	pop	r0
    187e:	0f be       	out	0x3f, r0	; 63
    1880:	0f 90       	pop	r0
    1882:	1f 90       	pop	r1
    1884:	18 95       	reti

00001886 <__vector_20>:
 * we can read a character. The character is read and placed in
 * the input buffer.
 */

ISR(USART0_RX_vect) 
{
    1886:	1f 92       	push	r1
    1888:	0f 92       	push	r0
    188a:	0f b6       	in	r0, 0x3f	; 63
    188c:	0f 92       	push	r0
    188e:	11 24       	eor	r1, r1
    1890:	2f 93       	push	r18
    1892:	3f 93       	push	r19
    1894:	4f 93       	push	r20
    1896:	5f 93       	push	r21
    1898:	6f 93       	push	r22
    189a:	7f 93       	push	r23
    189c:	8f 93       	push	r24
    189e:	9f 93       	push	r25
    18a0:	af 93       	push	r26
    18a2:	bf 93       	push	r27
    18a4:	cf 93       	push	r28
    18a6:	ef 93       	push	r30
    18a8:	ff 93       	push	r31
	/* Read the character - we ignore the possibility of overrun. */
	char c;
	c = UDR0;
    18aa:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
		
	if(do_echo && bytes_in_out_buffer < OUTPUT_BUFFER_SIZE) {
    18ae:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <do_echo>
    18b2:	88 23       	and	r24, r24
    18b4:	49 f0       	breq	.+18     	; 0x18c8 <__vector_20+0x42>
    18b6:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <bytes_in_out_buffer>
    18ba:	8f 3f       	cpi	r24, 0xFF	; 255
    18bc:	29 f0       	breq	.+10     	; 0x18c8 <__vector_20+0x42>
		/* If echoing is enabled and there is output buffer
		 * space, echo the received character back to the UART.
		 * (If there is no output buffer space, characters
		 * will be lost.)
		 */
		uart_put_char(c, 0);
    18be:	60 e0       	ldi	r22, 0x00	; 0
    18c0:	70 e0       	ldi	r23, 0x00	; 0
    18c2:	8c 2f       	mov	r24, r28
    18c4:	0e 94 48 0b 	call	0x1690	; 0x1690 <uart_put_char>
	 * Check if we have space in our buffer. If not, set the overrun
	 * flag and throw away the character. (We never clear the 
	 * overrun flag - it's up to the programmer to check/clear
	 * this flag if desired.)
	 */
	if(bytes_in_input_buffer >= INPUT_BUFFER_SIZE) {
    18c8:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <bytes_in_input_buffer>
    18cc:	80 31       	cpi	r24, 0x10	; 16
    18ce:	20 f0       	brcs	.+8      	; 0x18d8 <__vector_20+0x52>
		input_overrun = 1;
    18d0:	81 e0       	ldi	r24, 0x01	; 1
    18d2:	80 93 d4 02 	sts	0x02D4, r24	; 0x8002d4 <input_overrun>
    18d6:	18 c0       	rjmp	.+48     	; 0x1908 <__vector_20+0x82>
	} else {
		/* If the character is a carriage return, turn it into a
		 * linefeed 
		*/
		if (c == '\r') {
    18d8:	cd 30       	cpi	r28, 0x0D	; 13
    18da:	09 f4       	brne	.+2      	; 0x18de <__vector_20+0x58>
			c = '\n';
    18dc:	ca e0       	ldi	r28, 0x0A	; 10
		}
		
		/* 
		 * There is room in the input buffer 
		 */
		input_buffer[input_insert_pos++] = c;
    18de:	e0 91 c3 02 	lds	r30, 0x02C3	; 0x8002c3 <input_insert_pos>
    18e2:	81 e0       	ldi	r24, 0x01	; 1
    18e4:	8e 0f       	add	r24, r30
    18e6:	80 93 c3 02 	sts	0x02C3, r24	; 0x8002c3 <input_insert_pos>
    18ea:	f0 e0       	ldi	r31, 0x00	; 0
    18ec:	ec 53       	subi	r30, 0x3C	; 60
    18ee:	fd 4f       	sbci	r31, 0xFD	; 253
    18f0:	c0 83       	st	Z, r28
		bytes_in_input_buffer++;
    18f2:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <bytes_in_input_buffer>
    18f6:	8f 5f       	subi	r24, 0xFF	; 255
    18f8:	80 93 d5 02 	sts	0x02D5, r24	; 0x8002d5 <bytes_in_input_buffer>
		if(input_insert_pos == INPUT_BUFFER_SIZE) {
    18fc:	80 91 c3 02 	lds	r24, 0x02C3	; 0x8002c3 <input_insert_pos>
    1900:	80 31       	cpi	r24, 0x10	; 16
    1902:	11 f4       	brne	.+4      	; 0x1908 <__vector_20+0x82>
			/* Wrap around buffer pointer if necessary */
			input_insert_pos = 0;
    1904:	10 92 c3 02 	sts	0x02C3, r1	; 0x8002c3 <input_insert_pos>
		}
	}
}
    1908:	ff 91       	pop	r31
    190a:	ef 91       	pop	r30
    190c:	cf 91       	pop	r28
    190e:	bf 91       	pop	r27
    1910:	af 91       	pop	r26
    1912:	9f 91       	pop	r25
    1914:	8f 91       	pop	r24
    1916:	7f 91       	pop	r23
    1918:	6f 91       	pop	r22
    191a:	5f 91       	pop	r21
    191c:	4f 91       	pop	r20
    191e:	3f 91       	pop	r19
    1920:	2f 91       	pop	r18
    1922:	0f 90       	pop	r0
    1924:	0f be       	out	0x3f, r0	; 63
    1926:	0f 90       	pop	r0
    1928:	1f 90       	pop	r1
    192a:	18 95       	reti

0000192c <spi_setup_master>:
void spi_setup_master(uint8_t clockdivider) {
	// Set up SPI communication as a master
	// Make the SS, MOSI and SCK pins outputs. These are pins
	// 4, 5 and 7 of port B on the ATmega324A
	
	DDRB |= (1<<4)|(1<<5)|(1<<7);
    192c:	94 b1       	in	r25, 0x04	; 4
    192e:	90 6b       	ori	r25, 0xB0	; 176
    1930:	94 b9       	out	0x04, r25	; 4
	
	// Set the slave select (SS) line high
	PORTB |= (1<<4);
    1932:	2c 9a       	sbi	0x05, 4	; 5
	
	// Set up the SPI control registers SPCR and SPSR:
	// - SPE bit = 1 (SPI is enabled)
	// - MSTR bit = 1 (Master Mode)
	SPCR0 = (1<<SPE0)|(1<<MSTR0);
    1934:	90 e5       	ldi	r25, 0x50	; 80
    1936:	9c bd       	out	0x2c, r25	; 44
	
	// Set SPR0 and SPR1 bits in SPCR and SPI2X bit in SPSR
	// based on the given clock divider
	// Invalid values default to the slowest speed
	// We consider each bit in turn
	switch(clockdivider) {
    1938:	88 30       	cpi	r24, 0x08	; 8
    193a:	21 f0       	breq	.+8      	; 0x1944 <spi_setup_master+0x18>
    193c:	80 32       	cpi	r24, 0x20	; 32
    193e:	11 f0       	breq	.+4      	; 0x1944 <spi_setup_master+0x18>
    1940:	82 30       	cpi	r24, 0x02	; 2
    1942:	19 f4       	brne	.+6      	; 0x194a <spi_setup_master+0x1e>
		case 2:
		case 8:
		case 32:
			SPSR0 = (1<<SPI2X0);
    1944:	91 e0       	ldi	r25, 0x01	; 1
    1946:	9d bd       	out	0x2d, r25	; 45
			break;
    1948:	01 c0       	rjmp	.+2      	; 0x194c <spi_setup_master+0x20>
		default:
			SPSR0 = 0;
    194a:	1d bc       	out	0x2d, r1	; 45
			break;
	}
	switch(clockdivider) {
    194c:	80 32       	cpi	r24, 0x20	; 32
    194e:	69 f0       	breq	.+26     	; 0x196a <spi_setup_master+0x3e>
    1950:	28 f4       	brcc	.+10     	; 0x195c <spi_setup_master+0x30>
    1952:	88 30       	cpi	r24, 0x08	; 8
    1954:	71 f0       	breq	.+28     	; 0x1972 <spi_setup_master+0x46>
    1956:	80 31       	cpi	r24, 0x10	; 16
    1958:	61 f0       	breq	.+24     	; 0x1972 <spi_setup_master+0x46>
    195a:	0e c0       	rjmp	.+28     	; 0x1978 <spi_setup_master+0x4c>
    195c:	80 34       	cpi	r24, 0x40	; 64
    195e:	29 f0       	breq	.+10     	; 0x196a <spi_setup_master+0x3e>
    1960:	80 38       	cpi	r24, 0x80	; 128
    1962:	51 f4       	brne	.+20     	; 0x1978 <spi_setup_master+0x4c>
		case 128:
			SPCR0 |= (1<<SPR00);
    1964:	8c b5       	in	r24, 0x2c	; 44
    1966:	81 60       	ori	r24, 0x01	; 1
    1968:	8c bd       	out	0x2c, r24	; 44
			// Note this flows through to the next code block
		case 32:
		case 64:
			SPCR0 |= (1<<SPR10);
    196a:	8c b5       	in	r24, 0x2c	; 44
    196c:	82 60       	ori	r24, 0x02	; 2
    196e:	8c bd       	out	0x2c, r24	; 44
			break;
    1970:	03 c0       	rjmp	.+6      	; 0x1978 <spi_setup_master+0x4c>
		case 8:
		case 16:
			SPCR0 |= (1<<SPR00);
    1972:	8c b5       	in	r24, 0x2c	; 44
    1974:	81 60       	ori	r24, 0x01	; 1
    1976:	8c bd       	out	0x2c, r24	; 44
			break;
	}
	
	// Take SS (slave select) line low
	PORTB &= ~(1<<4);
    1978:	2c 98       	cbi	0x05, 4	; 5
    197a:	08 95       	ret

0000197c <spi_send_byte>:
	// the transfer. We then wait until the most significant byte of
	// SPSR0 (SPIF0 bit) is set - this indicates that the transfer is
	// complete. (The final read of SPSR0 followed by a read of SPDR0
	// will cause the SPIF bit to be reset to 0. See page 173 of the 
	// ATmega324A datasheet.)
	SPDR0 = byte;
    197c:	8e bd       	out	0x2e, r24	; 46
	while((SPSR0 & (1<<SPIF0)) == 0) {
    197e:	0d b4       	in	r0, 0x2d	; 45
    1980:	07 fe       	sbrs	r0, 7
    1982:	fd cf       	rjmp	.-6      	; 0x197e <spi_send_byte+0x2>
		; // wait
	}
	return SPDR0;
    1984:	8e b5       	in	r24, 0x2e	; 46
    1986:	08 95       	ret

00001988 <move_cursor>:
	printf_P(PSTR("\x1b[0m"));
}

void reverse_video(void) {
	printf_P(PSTR("\x1b[7m"));
}
    1988:	9f 93       	push	r25
    198a:	8f 93       	push	r24
    198c:	7f 93       	push	r23
    198e:	6f 93       	push	r22
    1990:	86 ec       	ldi	r24, 0xC6	; 198
    1992:	91 e0       	ldi	r25, 0x01	; 1
    1994:	9f 93       	push	r25
    1996:	8f 93       	push	r24
    1998:	0e 94 b0 12 	call	0x2560	; 0x2560 <printf_P>
    199c:	0f 90       	pop	r0
    199e:	0f 90       	pop	r0
    19a0:	0f 90       	pop	r0
    19a2:	0f 90       	pop	r0
    19a4:	0f 90       	pop	r0
    19a6:	0f 90       	pop	r0
    19a8:	08 95       	ret

000019aa <clear_terminal>:

void clear_terminal(void) {
	printf_P(PSTR("\x1b[2J"));
    19aa:	81 ec       	ldi	r24, 0xC1	; 193
    19ac:	91 e0       	ldi	r25, 0x01	; 1
    19ae:	9f 93       	push	r25
    19b0:	8f 93       	push	r24
    19b2:	0e 94 b0 12 	call	0x2560	; 0x2560 <printf_P>
}
    19b6:	0f 90       	pop	r0
    19b8:	0f 90       	pop	r0
    19ba:	08 95       	ret

000019bc <init_timer0>:

// Return the width of a pulse (in clock cycles) given a duty cycle (%) and
// the period of the clock (measured in clock cycles)
uint16_t duty_cycle_to_pulse_width(float dutycycle, uint16_t clockperiod) {
	return (dutycycle * clockperiod) / 100;
}
    19bc:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <clockTicks>
    19c0:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <clockTicks+0x1>
    19c4:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <clockTicks+0x2>
    19c8:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <clockTicks+0x3>
    19cc:	8f ef       	ldi	r24, 0xFF	; 255
    19ce:	87 b9       	out	0x07, r24	; 7
    19d0:	16 bc       	out	0x26, r1	; 38
    19d2:	8c e7       	ldi	r24, 0x7C	; 124
    19d4:	87 bd       	out	0x27, r24	; 39
    19d6:	82 e0       	ldi	r24, 0x02	; 2
    19d8:	84 bd       	out	0x24, r24	; 36
    19da:	83 e0       	ldi	r24, 0x03	; 3
    19dc:	85 bd       	out	0x25, r24	; 37
    19de:	ee e6       	ldi	r30, 0x6E	; 110
    19e0:	f0 e0       	ldi	r31, 0x00	; 0
    19e2:	80 81       	ld	r24, Z
    19e4:	82 60       	ori	r24, 0x02	; 2
    19e6:	80 83       	st	Z, r24
    19e8:	85 b3       	in	r24, 0x15	; 21
    19ea:	82 70       	andi	r24, 0x02	; 2
    19ec:	85 bb       	out	0x15, r24	; 21
    19ee:	08 95       	ret

000019f0 <get_current_time>:
    19f0:	2f b7       	in	r18, 0x3f	; 63
    19f2:	f8 94       	cli
    19f4:	60 91 7c 01 	lds	r22, 0x017C	; 0x80017c <clockTicks>
    19f8:	70 91 7d 01 	lds	r23, 0x017D	; 0x80017d <clockTicks+0x1>
    19fc:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <clockTicks+0x2>
    1a00:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <clockTicks+0x3>
    1a04:	22 23       	and	r18, r18
    1a06:	0c f4       	brge	.+2      	; 0x1a0a <get_current_time+0x1a>
    1a08:	78 94       	sei
    1a0a:	08 95       	ret

00001a0c <score_display>:
    1a0c:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <seven_seg_cc>
    1a10:	81 e0       	ldi	r24, 0x01	; 1
    1a12:	89 27       	eor	r24, r25
    1a14:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <seven_seg_cc>
    1a18:	18 b8       	out	0x08, r1	; 8
    1a1a:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <get_score>
    1a1e:	64 36       	cpi	r22, 0x64	; 100
    1a20:	71 05       	cpc	r23, r1
    1a22:	81 05       	cpc	r24, r1
    1a24:	91 05       	cpc	r25, r1
    1a26:	68 f0       	brcs	.+26     	; 0x1a42 <score_display+0x36>
    1a28:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <get_score>
    1a2c:	24 e6       	ldi	r18, 0x64	; 100
    1a2e:	30 e0       	ldi	r19, 0x00	; 0
    1a30:	40 e0       	ldi	r20, 0x00	; 0
    1a32:	50 e0       	ldi	r21, 0x00	; 0
    1a34:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <__udivmodsi4>
    1a38:	70 93 bf 01 	sts	0x01BF, r23	; 0x8001bf <score+0x1>
    1a3c:	60 93 be 01 	sts	0x01BE, r22	; 0x8001be <score>
    1a40:	06 c0       	rjmp	.+12     	; 0x1a4e <score_display+0x42>
    1a42:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <get_score>
    1a46:	70 93 bf 01 	sts	0x01BF, r23	; 0x8001bf <score+0x1>
    1a4a:	60 93 be 01 	sts	0x01BE, r22	; 0x8001be <score>
    1a4e:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <digits_displayed>
    1a52:	88 23       	and	r24, r24
    1a54:	d9 f1       	breq	.+118    	; 0x1acc <score_display+0xc0>
    1a56:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <seven_seg_cc>
    1a5a:	81 11       	cpse	r24, r1
    1a5c:	23 c0       	rjmp	.+70     	; 0x1aa4 <score_display+0x98>
    1a5e:	12 98       	cbi	0x02, 2	; 2
    1a60:	40 91 be 01 	lds	r20, 0x01BE	; 0x8001be <score>
    1a64:	50 91 bf 01 	lds	r21, 0x01BF	; 0x8001bf <score+0x1>
    1a68:	9a 01       	movw	r18, r20
    1a6a:	ad ec       	ldi	r26, 0xCD	; 205
    1a6c:	bc ec       	ldi	r27, 0xCC	; 204
    1a6e:	0e 94 ab 11 	call	0x2356	; 0x2356 <__umulhisi3>
    1a72:	96 95       	lsr	r25
    1a74:	87 95       	ror	r24
    1a76:	96 95       	lsr	r25
    1a78:	87 95       	ror	r24
    1a7a:	96 95       	lsr	r25
    1a7c:	87 95       	ror	r24
    1a7e:	9c 01       	movw	r18, r24
    1a80:	22 0f       	add	r18, r18
    1a82:	33 1f       	adc	r19, r19
    1a84:	88 0f       	add	r24, r24
    1a86:	99 1f       	adc	r25, r25
    1a88:	88 0f       	add	r24, r24
    1a8a:	99 1f       	adc	r25, r25
    1a8c:	88 0f       	add	r24, r24
    1a8e:	99 1f       	adc	r25, r25
    1a90:	82 0f       	add	r24, r18
    1a92:	93 1f       	adc	r25, r19
    1a94:	48 1b       	sub	r20, r24
    1a96:	59 0b       	sbc	r21, r25
    1a98:	fa 01       	movw	r30, r20
    1a9a:	e7 5e       	subi	r30, 0xE7	; 231
    1a9c:	fe 4f       	sbci	r31, 0xFE	; 254
    1a9e:	80 81       	ld	r24, Z
    1aa0:	88 b9       	out	0x08, r24	; 8
    1aa2:	08 95       	ret
    1aa4:	12 9a       	sbi	0x02, 2	; 2
    1aa6:	20 91 be 01 	lds	r18, 0x01BE	; 0x8001be <score>
    1aaa:	30 91 bf 01 	lds	r19, 0x01BF	; 0x8001bf <score+0x1>
    1aae:	ad ec       	ldi	r26, 0xCD	; 205
    1ab0:	bc ec       	ldi	r27, 0xCC	; 204
    1ab2:	0e 94 ab 11 	call	0x2356	; 0x2356 <__umulhisi3>
    1ab6:	96 95       	lsr	r25
    1ab8:	87 95       	ror	r24
    1aba:	96 95       	lsr	r25
    1abc:	87 95       	ror	r24
    1abe:	96 95       	lsr	r25
    1ac0:	87 95       	ror	r24
    1ac2:	fc 01       	movw	r30, r24
    1ac4:	e7 5e       	subi	r30, 0xE7	; 231
    1ac6:	fe 4f       	sbci	r31, 0xFE	; 254
    1ac8:	80 81       	ld	r24, Z
    1aca:	88 b9       	out	0x08, r24	; 8
    1acc:	08 95       	ret

00001ace <__vector_16>:
    1ace:	1f 92       	push	r1
    1ad0:	0f 92       	push	r0
    1ad2:	0f b6       	in	r0, 0x3f	; 63
    1ad4:	0f 92       	push	r0
    1ad6:	11 24       	eor	r1, r1
    1ad8:	2f 93       	push	r18
    1ada:	3f 93       	push	r19
    1adc:	4f 93       	push	r20
    1ade:	5f 93       	push	r21
    1ae0:	6f 93       	push	r22
    1ae2:	7f 93       	push	r23
    1ae4:	8f 93       	push	r24
    1ae6:	9f 93       	push	r25
    1ae8:	af 93       	push	r26
    1aea:	bf 93       	push	r27
    1aec:	ef 93       	push	r30
    1aee:	ff 93       	push	r31
    1af0:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <score_display>
    1af4:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <clockTicks>
    1af8:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <clockTicks+0x1>
    1afc:	a0 91 7e 01 	lds	r26, 0x017E	; 0x80017e <clockTicks+0x2>
    1b00:	b0 91 7f 01 	lds	r27, 0x017F	; 0x80017f <clockTicks+0x3>
    1b04:	01 96       	adiw	r24, 0x01	; 1
    1b06:	a1 1d       	adc	r26, r1
    1b08:	b1 1d       	adc	r27, r1
    1b0a:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <clockTicks>
    1b0e:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <clockTicks+0x1>
    1b12:	a0 93 7e 01 	sts	0x017E, r26	; 0x80017e <clockTicks+0x2>
    1b16:	b0 93 7f 01 	sts	0x017F, r27	; 0x80017f <clockTicks+0x3>
    1b1a:	ff 91       	pop	r31
    1b1c:	ef 91       	pop	r30
    1b1e:	bf 91       	pop	r27
    1b20:	af 91       	pop	r26
    1b22:	9f 91       	pop	r25
    1b24:	8f 91       	pop	r24
    1b26:	7f 91       	pop	r23
    1b28:	6f 91       	pop	r22
    1b2a:	5f 91       	pop	r21
    1b2c:	4f 91       	pop	r20
    1b2e:	3f 91       	pop	r19
    1b30:	2f 91       	pop	r18
    1b32:	0f 90       	pop	r0
    1b34:	0f be       	out	0x3f, r0	; 63
    1b36:	0f 90       	pop	r0
    1b38:	1f 90       	pop	r1
    1b3a:	18 95       	reti

00001b3c <get_lives>:
    1b3c:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <lives>
    1b40:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <lives+0x1>
    1b44:	a0 91 26 01 	lds	r26, 0x0126	; 0x800126 <lives+0x2>
    1b48:	b0 91 27 01 	lds	r27, 0x0127	; 0x800127 <lives+0x3>
    1b4c:	08 95       	ret

00001b4e <set_lives>:
    1b4e:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <lives>
    1b52:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <lives+0x1>
    1b56:	a0 91 26 01 	lds	r26, 0x0126	; 0x800126 <lives+0x2>
    1b5a:	b0 91 27 01 	lds	r27, 0x0127	; 0x800127 <lives+0x3>
    1b5e:	01 97       	sbiw	r24, 0x01	; 1
    1b60:	a1 09       	sbc	r26, r1
    1b62:	b1 09       	sbc	r27, r1
    1b64:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <lives>
    1b68:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <lives+0x1>
    1b6c:	a0 93 26 01 	sts	0x0126, r26	; 0x800126 <lives+0x2>
    1b70:	b0 93 27 01 	sts	0x0127, r27	; 0x800127 <lives+0x3>
    1b74:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <lives>
    1b78:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <lives+0x1>
    1b7c:	a0 91 26 01 	lds	r26, 0x0126	; 0x800126 <lives+0x2>
    1b80:	b0 91 27 01 	lds	r27, 0x0127	; 0x800127 <lives+0x3>
    1b84:	03 97       	sbiw	r24, 0x03	; 3
    1b86:	a1 05       	cpc	r26, r1
    1b88:	b1 05       	cpc	r27, r1
    1b8a:	21 f4       	brne	.+8      	; 0x1b94 <set_lives+0x46>
    1b8c:	82 b1       	in	r24, 0x02	; 2
    1b8e:	8c 73       	andi	r24, 0x3C	; 60
    1b90:	82 b9       	out	0x02, r24	; 2
    1b92:	36 c0       	rjmp	.+108    	; 0x1c00 <set_lives+0xb2>
    1b94:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <lives>
    1b98:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <lives+0x1>
    1b9c:	a0 91 26 01 	lds	r26, 0x0126	; 0x800126 <lives+0x2>
    1ba0:	b0 91 27 01 	lds	r27, 0x0127	; 0x800127 <lives+0x3>
    1ba4:	02 97       	sbiw	r24, 0x02	; 2
    1ba6:	a1 05       	cpc	r26, r1
    1ba8:	b1 05       	cpc	r27, r1
    1baa:	21 f4       	brne	.+8      	; 0x1bb4 <set_lives+0x66>
    1bac:	82 b1       	in	r24, 0x02	; 2
    1bae:	84 73       	andi	r24, 0x34	; 52
    1bb0:	82 b9       	out	0x02, r24	; 2
    1bb2:	26 c0       	rjmp	.+76     	; 0x1c00 <set_lives+0xb2>
    1bb4:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <lives>
    1bb8:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <lives+0x1>
    1bbc:	a0 91 26 01 	lds	r26, 0x0126	; 0x800126 <lives+0x2>
    1bc0:	b0 91 27 01 	lds	r27, 0x0127	; 0x800127 <lives+0x3>
    1bc4:	01 97       	sbiw	r24, 0x01	; 1
    1bc6:	a1 05       	cpc	r26, r1
    1bc8:	b1 05       	cpc	r27, r1
    1bca:	21 f4       	brne	.+8      	; 0x1bd4 <set_lives+0x86>
    1bcc:	82 b1       	in	r24, 0x02	; 2
    1bce:	84 72       	andi	r24, 0x24	; 36
    1bd0:	82 b9       	out	0x02, r24	; 2
    1bd2:	16 c0       	rjmp	.+44     	; 0x1c00 <set_lives+0xb2>
    1bd4:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <lives>
    1bd8:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <lives+0x1>
    1bdc:	a0 91 26 01 	lds	r26, 0x0126	; 0x800126 <lives+0x2>
    1be0:	b0 91 27 01 	lds	r27, 0x0127	; 0x800127 <lives+0x3>
    1be4:	89 2b       	or	r24, r25
    1be6:	8a 2b       	or	r24, r26
    1be8:	8b 2b       	or	r24, r27
    1bea:	51 f4       	brne	.+20     	; 0x1c00 <set_lives+0xb2>
    1bec:	80 e0       	ldi	r24, 0x00	; 0
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	0e 94 98 09 	call	0x1330	; 0x1330 <add_to_score>
    1bf4:	82 b1       	in	r24, 0x02	; 2
    1bf6:	84 70       	andi	r24, 0x04	; 4
    1bf8:	82 b9       	out	0x02, r24	; 2
    1bfa:	81 e0       	ldi	r24, 0x01	; 1
    1bfc:	0e 94 50 03 	call	0x6a0	; 0x6a0 <game_over>
    1c00:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <get_score>
    1c04:	62 30       	cpi	r22, 0x02	; 2
    1c06:	71 05       	cpc	r23, r1
    1c08:	81 05       	cpc	r24, r1
    1c0a:	91 05       	cpc	r25, r1
    1c0c:	09 f4       	brne	.+2      	; 0x1c10 <set_lives+0xc2>
    1c0e:	5e 9a       	sbi	0x0b, 6	; 11
    1c10:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <get_score>
    1c14:	65 30       	cpi	r22, 0x05	; 5
    1c16:	71 05       	cpc	r23, r1
    1c18:	81 05       	cpc	r24, r1
    1c1a:	91 05       	cpc	r25, r1
    1c1c:	09 f4       	brne	.+2      	; 0x1c20 <set_lives+0xd2>
    1c1e:	5f 9a       	sbi	0x0b, 7	; 11
    1c20:	08 95       	ret

00001c22 <init_lives>:
    1c22:	84 e0       	ldi	r24, 0x04	; 4
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	a0 e0       	ldi	r26, 0x00	; 0
    1c28:	b0 e0       	ldi	r27, 0x00	; 0
    1c2a:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <lives>
    1c2e:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <lives+0x1>
    1c32:	a0 93 26 01 	sts	0x0126, r26	; 0x800126 <lives+0x2>
    1c36:	b0 93 27 01 	sts	0x0127, r27	; 0x800127 <lives+0x3>
    1c3a:	08 95       	ret

00001c3c <game_playing>:


void game_playing(void){
    1c3c:	8f 92       	push	r8
    1c3e:	9f 92       	push	r9
    1c40:	af 92       	push	r10
    1c42:	bf 92       	push	r11
    1c44:	cf 92       	push	r12
    1c46:	df 92       	push	r13
    1c48:	ef 92       	push	r14
    1c4a:	ff 92       	push	r15
    1c4c:	cf 93       	push	r28
    1c4e:	df 93       	push	r29
	uint16_t pulsewidth = duty_cycle_to_pulse_width(dutycycle, clockperiod);
	
	
	
	// Set the maximum count value for timer/counter 1 to be one less than the clockperiod
	OCR1A = clockperiod - 1;
    1c50:	8f e1       	ldi	r24, 0x1F	; 31
    1c52:	9e e4       	ldi	r25, 0x4E	; 78
    1c54:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1c58:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	// Set the count compare value based on the pulse width. The value will be 1 less
	// than the pulse width - unless the pulse width is 0.
	if(pulsewidth == 0) {
		OCR1B = 0;
		} else {
		OCR1B = pulsewidth - 1;
    1c5c:	8f e8       	ldi	r24, 0x8F	; 143
    1c5e:	91 e0       	ldi	r25, 0x01	; 1
    1c60:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    1c64:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
	
	// Set up timer/counter 1 for Fast PWM, counting from 0 to the value in OCR1A
	// before reseting to 0. Count at 1MHz (CLK/8).
	// Configure output OC1B to be clear on compare match and set on timer/counter
	// overflow (non-inverting mode).
	TCCR1A = (1 << COM1B1) | (0 <<COM1B0) | (1 <<WGM11) | (1 << WGM10);
    1c68:	83 e2       	ldi	r24, 0x23	; 35
    1c6a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR1B = (1 << WGM13) | (1 << WGM12) | (0 << CS12) | (1 << CS11) | (0 << CS10);
    1c6e:	8a e1       	ldi	r24, 0x1A	; 26
    1c70:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>

	// PWM output should now be happening - at the frequency and pulse width set above
	
	// Check the state of the buttons (on port C) every 100ms.
	if(button_pushed() == NO_BUTTON_PUSHED) {
    1c74:	0e 94 15 01 	call	0x22a	; 0x22a <button_pushed>
    1c78:	8f 3f       	cpi	r24, 0xFF	; 255
    1c7a:	09 f0       	breq	.+2      	; 0x1c7e <game_playing+0x42>
    1c7c:	7d c0       	rjmp	.+250    	; 0x1d78 <game_playing+0x13c>
    1c7e:	2f ef       	ldi	r18, 0xFF	; 255
    1c80:	80 e7       	ldi	r24, 0x70	; 112
    1c82:	92 e0       	ldi	r25, 0x02	; 2
    1c84:	21 50       	subi	r18, 0x01	; 1
    1c86:	80 40       	sbci	r24, 0x00	; 0
    1c88:	90 40       	sbci	r25, 0x00	; 0
    1c8a:	e1 f7       	brne	.-8      	; 0x1c84 <game_playing+0x48>
    1c8c:	00 c0       	rjmp	.+0      	; 0x1c8e <game_playing+0x52>
    1c8e:	00 00       	nop
		_delay_ms(100);
		
		if(PINB & 0x01) { // increase frequency by 5%, but highest frequency is 10000Hz
    1c90:	18 9b       	sbis	0x03, 0	; 3
    1c92:	03 c0       	rjmp	.+6      	; 0x1c9a <game_playing+0x5e>
			freq = freq*105UL/100UL;	// Constants made 32 bit to ensure 32 bit arithmetic
    1c94:	c4 e3       	ldi	r28, 0x34	; 52
    1c96:	d0 e0       	ldi	r29, 0x00	; 0
    1c98:	02 c0       	rjmp	.+4      	; 0x1c9e <game_playing+0x62>
	return (dutycycle * clockperiod) / 100;
}


void game_playing(void){
	uint16_t freq = 50;	// Hz
    1c9a:	c2 e3       	ldi	r28, 0x32	; 50
    1c9c:	d0 e0       	ldi	r29, 0x00	; 0
			freq = freq*105UL/100UL;	// Constants made 32 bit to ensure 32 bit arithmetic
			if(freq > 100) {
				freq = 100;
			}
		}
		if(PINB & 0x02) { // decrease frequency by 5%, but lowest frequency is 20Hz
    1c9e:	19 9b       	sbis	0x03, 1	; 3
    1ca0:	11 c0       	rjmp	.+34     	; 0x1cc4 <game_playing+0x88>
			freq = freq*95UL/100UL;		// Constants made 32 bits to ensure 32 bit arithmetic
    1ca2:	9e 01       	movw	r18, r28
    1ca4:	af e5       	ldi	r26, 0x5F	; 95
    1ca6:	b0 e0       	ldi	r27, 0x00	; 0
    1ca8:	0e 94 ab 11 	call	0x2356	; 0x2356 <__umulhisi3>
    1cac:	24 e6       	ldi	r18, 0x64	; 100
    1cae:	30 e0       	ldi	r19, 0x00	; 0
    1cb0:	40 e0       	ldi	r20, 0x00	; 0
    1cb2:	50 e0       	ldi	r21, 0x00	; 0
    1cb4:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <__udivmodsi4>
    1cb8:	e9 01       	movw	r28, r18
			if(freq < 10) {
    1cba:	2a 30       	cpi	r18, 0x0A	; 10
    1cbc:	31 05       	cpc	r19, r1
    1cbe:	10 f4       	brcc	.+4      	; 0x1cc4 <game_playing+0x88>
				freq = 10;
    1cc0:	ca e0       	ldi	r28, 0x0A	; 10
    1cc2:	d0 e0       	ldi	r29, 0x00	; 0
			}
		}
		if(PINB & 0x04) { // increase duty cycle by 0.1 if less than 10% or 1 if 10% or higher
    1cc4:	1a 9b       	sbis	0x03, 2	; 3
    1cc6:	50 c0       	rjmp	.+160    	; 0x1d68 <game_playing+0x12c>
			if(dutycycle < 10) {
				dutycycle += 0.1;
    1cc8:	0f 2e       	mov	r0, r31
    1cca:	f6 e6       	ldi	r31, 0x66	; 102
    1ccc:	8f 2e       	mov	r8, r31
    1cce:	98 2c       	mov	r9, r8
    1cd0:	f6 e0       	ldi	r31, 0x06	; 6
    1cd2:	af 2e       	mov	r10, r31
    1cd4:	f0 e4       	ldi	r31, 0x40	; 64
    1cd6:	bf 2e       	mov	r11, r31
    1cd8:	f0 2d       	mov	r31, r0
    1cda:	4b c0       	rjmp	.+150    	; 0x1d72 <game_playing+0x136>
				}
			}
		}
		if(PINB & 0x08) { // decrease duty cycle by 0.1 if less than 10% or 1 if 10% or higher
			if(dutycycle < 10) {
				dutycycle -= 0.1;
    1cdc:	2d ec       	ldi	r18, 0xCD	; 205
    1cde:	3c ec       	ldi	r19, 0xCC	; 204
    1ce0:	4c ec       	ldi	r20, 0xCC	; 204
    1ce2:	5d e3       	ldi	r21, 0x3D	; 61
    1ce4:	c5 01       	movw	r24, r10
    1ce6:	b4 01       	movw	r22, r8
    1ce8:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <__subsf3>
    1cec:	4b 01       	movw	r8, r22
    1cee:	5c 01       	movw	r10, r24
				if(dutycycle < 0) {
    1cf0:	20 e0       	ldi	r18, 0x00	; 0
    1cf2:	30 e0       	ldi	r19, 0x00	; 0
    1cf4:	a9 01       	movw	r20, r18
    1cf6:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <__cmpsf2>
    1cfa:	88 23       	and	r24, r24
    1cfc:	1c f4       	brge	.+6      	; 0x1d04 <game_playing+0xc8>
					dutycycle = 0;
    1cfe:	81 2c       	mov	r8, r1
    1d00:	91 2c       	mov	r9, r1
    1d02:	54 01       	movw	r10, r8
	lives = 4;
}
// For a given frequency (Hz), return the clock period (in terms of the
// number of clock cycles of a 1MHz clock)
uint16_t freq_to_clock_period(uint16_t freq) {
	return (1000000UL / freq);	// UL makes the constant an unsigned long (32 bits)
    1d04:	9e 01       	movw	r18, r28
    1d06:	40 e0       	ldi	r20, 0x00	; 0
    1d08:	50 e0       	ldi	r21, 0x00	; 0
    1d0a:	60 e4       	ldi	r22, 0x40	; 64
    1d0c:	72 e4       	ldi	r23, 0x42	; 66
    1d0e:	8f e0       	ldi	r24, 0x0F	; 15
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <__udivmodsi4>
    1d16:	69 01       	movw	r12, r18
    1d18:	7a 01       	movw	r14, r20
}

// Return the width of a pulse (in clock cycles) given a duty cycle (%) and
// the period of the clock (measured in clock cycles)
uint16_t duty_cycle_to_pulse_width(float dutycycle, uint16_t clockperiod) {
	return (dutycycle * clockperiod) / 100;
    1d1a:	b9 01       	movw	r22, r18
    1d1c:	80 e0       	ldi	r24, 0x00	; 0
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	0e 94 4b 10 	call	0x2096	; 0x2096 <__floatunsisf>
    1d24:	a5 01       	movw	r20, r10
    1d26:	94 01       	movw	r18, r8
    1d28:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__mulsf3>
    1d2c:	20 e0       	ldi	r18, 0x00	; 0
    1d2e:	30 e0       	ldi	r19, 0x00	; 0
    1d30:	48 ec       	ldi	r20, 0xC8	; 200
    1d32:	52 e4       	ldi	r21, 0x42	; 66
    1d34:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <__divsf3>
    1d38:	0e 94 1c 10 	call	0x2038	; 0x2038 <__fixunssfsi>
		// Work out the clock period and pulse width
		clockperiod = freq_to_clock_period(freq);
		pulsewidth = duty_cycle_to_pulse_width(dutycycle, clockperiod);
		
		// Update the PWM registers
		if(pulsewidth > 0) {
    1d3c:	61 15       	cp	r22, r1
    1d3e:	71 05       	cpc	r23, r1
    1d40:	39 f0       	breq	.+14     	; 0x1d50 <game_playing+0x114>
			// The compare value is one less than the number of clock cycles in the pulse width
			OCR1B = pulsewidth - 1;
    1d42:	61 50       	subi	r22, 0x01	; 1
    1d44:	71 09       	sbc	r23, r1
    1d46:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    1d4a:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    1d4e:	04 c0       	rjmp	.+8      	; 0x1d58 <game_playing+0x11c>
			} else {
			OCR1B = 0;
    1d50:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    1d54:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
		}
		// Note that a compare value of 0 results in special behaviour - see page 130 of the
		// datasheet (2018 version)
		
		// Set the maximum count value for timer/counter 1 to be one less than the clockperiod
		OCR1A = clockperiod - 1;
    1d58:	21 e0       	ldi	r18, 0x01	; 1
    1d5a:	c2 1a       	sub	r12, r18
    1d5c:	d1 08       	sbc	r13, r1
    1d5e:	d0 92 89 00 	sts	0x0089, r13	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1d62:	c0 92 88 00 	sts	0x0088, r12	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	}
	
}
    1d66:	08 c0       	rjmp	.+16     	; 0x1d78 <game_playing+0x13c>
}


void game_playing(void){
	uint16_t freq = 50;	// Hz
	float dutycycle = 2;	// %
    1d68:	81 2c       	mov	r8, r1
    1d6a:	91 2c       	mov	r9, r1
    1d6c:	54 01       	movw	r10, r8
    1d6e:	68 94       	set
    1d70:	b6 f8       	bld	r11, 6
				if(dutycycle > 10) {
					dutycycle = 10;
				}
			}
		}
		if(PINB & 0x08) { // decrease duty cycle by 0.1 if less than 10% or 1 if 10% or higher
    1d72:	1b 9b       	sbis	0x03, 3	; 3
    1d74:	c7 cf       	rjmp	.-114    	; 0x1d04 <game_playing+0xc8>
    1d76:	b2 cf       	rjmp	.-156    	; 0x1cdc <game_playing+0xa0>
		
		// Set the maximum count value for timer/counter 1 to be one less than the clockperiod
		OCR1A = clockperiod - 1;
	}
	
}
    1d78:	df 91       	pop	r29
    1d7a:	cf 91       	pop	r28
    1d7c:	ff 90       	pop	r15
    1d7e:	ef 90       	pop	r14
    1d80:	df 90       	pop	r13
    1d82:	cf 90       	pop	r12
    1d84:	bf 90       	pop	r11
    1d86:	af 90       	pop	r10
    1d88:	9f 90       	pop	r9
    1d8a:	8f 90       	pop	r8
    1d8c:	08 95       	ret

00001d8e <joy_stick>:


void joy_stick(void){
    1d8e:	af 92       	push	r10
    1d90:	bf 92       	push	r11
    1d92:	cf 92       	push	r12
    1d94:	df 92       	push	r13
    1d96:	ef 92       	push	r14
    1d98:	ff 92       	push	r15
    1d9a:	0f 93       	push	r16
    1d9c:	1f 93       	push	r17
    1d9e:	cf 93       	push	r28
    1da0:	df 93       	push	r29
    1da2:	cc 24       	eor	r12, r12
    1da4:	c3 94       	inc	r12
    1da6:	d1 2c       	mov	r13, r1
	
	for(x_or_y=0; x_or_y< 2; x_or_y++){
		// Set up ADC - AVCC reference, right adjust
	// Input selection doesn't matter yet - we'll swap this around in the while
	// loop below.
	ADMUX = (1<<REFS0);
    1da8:	0c e7       	ldi	r16, 0x7C	; 124
    1daa:	10 e0       	ldi	r17, 0x00	; 0
    1dac:	68 94       	set
    1dae:	aa 24       	eor	r10, r10
    1db0:	a6 f8       	bld	r10, 6
	// Turn on the ADC (but don't start a conversion yet). Choose a clock
	// divider of 64. (The ADC clock must be somewhere
	// between 50kHz and 200kHz. We will divide our 8MHz clock by 64
	// to give us 125kHz.)
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1);
    1db2:	ca e7       	ldi	r28, 0x7A	; 122
    1db4:	d0 e0       	ldi	r29, 0x00	; 0
    1db6:	0f 2e       	mov	r0, r31
    1db8:	f6 e8       	ldi	r31, 0x86	; 134
    1dba:	bf 2e       	mov	r11, r31
    1dbc:	f0 2d       	mov	r31, r0
	ADCSRA |= (1<<ADSC);
	
	while(ADCSRA & (1<<ADSC)) {
		; /* Wait until conversion finished */
	}
	value = ADC; // read the value
    1dbe:	0f 2e       	mov	r0, r31
    1dc0:	f8 e7       	ldi	r31, 0x78	; 120
    1dc2:	ef 2e       	mov	r14, r31
    1dc4:	f1 2c       	mov	r15, r1
    1dc6:	f0 2d       	mov	r31, r0
    1dc8:	02 c0       	rjmp	.+4      	; 0x1dce <joy_stick+0x40>
    1dca:	d3 94       	inc	r13
    1dcc:	c3 94       	inc	r12
	
	for(x_or_y=0; x_or_y< 2; x_or_y++){
		// Set up ADC - AVCC reference, right adjust
	// Input selection doesn't matter yet - we'll swap this around in the while
	// loop below.
	ADMUX = (1<<REFS0);
    1dce:	f8 01       	movw	r30, r16
    1dd0:	a0 82       	st	Z, r10
	// Turn on the ADC (but don't start a conversion yet). Choose a clock
	// divider of 64. (The ADC clock must be somewhere
	// between 50kHz and 200kHz. We will divide our 8MHz clock by 64
	// to give us 125kHz.)
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1);
    1dd2:	b8 82       	st	Y, r11
	/*  a welcome message
	*/
	// Set the ADC mux to choose ADC0 if x_or_y is 0, ADC1 if x_or_y is 1
	if(x_or_y == 0) {
    1dd4:	d1 10       	cpse	r13, r1
    1dd6:	04 c0       	rjmp	.+8      	; 0x1de0 <joy_stick+0x52>
		ADMUX &= ~1;
    1dd8:	80 81       	ld	r24, Z
    1dda:	8e 7f       	andi	r24, 0xFE	; 254
    1ddc:	80 83       	st	Z, r24
    1dde:	04 c0       	rjmp	.+8      	; 0x1de8 <joy_stick+0x5a>
		} else {
		ADMUX |= 1;
    1de0:	f8 01       	movw	r30, r16
    1de2:	80 81       	ld	r24, Z
    1de4:	81 60       	ori	r24, 0x01	; 1
    1de6:	80 83       	st	Z, r24
	}
	// Start the ADC conversion
	ADCSRA |= (1<<ADSC);
    1de8:	88 81       	ld	r24, Y
    1dea:	80 64       	ori	r24, 0x40	; 64
    1dec:	88 83       	st	Y, r24
	
	while(ADCSRA & (1<<ADSC)) {
    1dee:	88 81       	ld	r24, Y
    1df0:	86 fd       	sbrc	r24, 6
    1df2:	fd cf       	rjmp	.-6      	; 0x1dee <joy_stick+0x60>
		; /* Wait until conversion finished */
	}
	value = ADC; // read the value
    1df4:	f7 01       	movw	r30, r14
    1df6:	80 81       	ld	r24, Z
    1df8:	91 81       	ldd	r25, Z+1	; 0x01
    1dfa:	90 93 d9 02 	sts	0x02D9, r25	; 0x8002d9 <value+0x1>
    1dfe:	80 93 d8 02 	sts	0x02D8, r24	; 0x8002d8 <value>
	//temp = x_or_y ^ 1;
	if(x_or_y == 0) {
    1e02:	d1 10       	cpse	r13, r1
    1e04:	16 c0       	rjmp	.+44     	; 0x1e32 <joy_stick+0xa4>
		if(value < 515){
    1e06:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <value>
    1e0a:	90 91 d9 02 	lds	r25, 0x02D9	; 0x8002d9 <value+0x1>
    1e0e:	83 30       	cpi	r24, 0x03	; 3
    1e10:	92 40       	sbci	r25, 0x02	; 2
    1e12:	20 f4       	brcc	.+8      	; 0x1e1c <joy_stick+0x8e>
			move_base(MOVE_LEFT);
    1e14:	80 e0       	ldi	r24, 0x00	; 0
    1e16:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <move_base>
    1e1a:	d7 cf       	rjmp	.-82     	; 0x1dca <joy_stick+0x3c>
		
		} else if(value > 530) {
    1e1c:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <value>
    1e20:	90 91 d9 02 	lds	r25, 0x02D9	; 0x8002d9 <value+0x1>
    1e24:	83 31       	cpi	r24, 0x13	; 19
    1e26:	92 40       	sbci	r25, 0x02	; 2
    1e28:	80 f2       	brcs	.-96     	; 0x1dca <joy_stick+0x3c>
			move_base(MOVE_RIGHT);
    1e2a:	81 e0       	ldi	r24, 0x01	; 1
    1e2c:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <move_base>
    1e30:	cc cf       	rjmp	.-104    	; 0x1dca <joy_stick+0x3c>
		}
		
	} else {
		if(value < 500  || value > 520){
    1e32:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <value>
    1e36:	90 91 d9 02 	lds	r25, 0x02D9	; 0x8002d9 <value+0x1>
    1e3a:	84 3f       	cpi	r24, 0xF4	; 244
    1e3c:	91 40       	sbci	r25, 0x01	; 1
    1e3e:	38 f0       	brcs	.+14     	; 0x1e4e <joy_stick+0xc0>
    1e40:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <value>
    1e44:	90 91 d9 02 	lds	r25, 0x02D9	; 0x8002d9 <value+0x1>
    1e48:	89 30       	cpi	r24, 0x09	; 9
    1e4a:	92 40       	sbci	r25, 0x02	; 2
    1e4c:	10 f0       	brcs	.+4      	; 0x1e52 <joy_stick+0xc4>
			fire_projectile();
    1e4e:	0e 94 0d 03 	call	0x61a	; 0x61a <fire_projectile>

void joy_stick(void){
	
	uint8_t x_or_y = 0;	/* 0 = x, 1 = y */
	
	for(x_or_y=0; x_or_y< 2; x_or_y++){
    1e52:	21 e0       	ldi	r18, 0x01	; 1
    1e54:	2c 15       	cp	r18, r12
    1e56:	08 f0       	brcs	.+2      	; 0x1e5a <joy_stick+0xcc>
    1e58:	b8 cf       	rjmp	.-144    	; 0x1dca <joy_stick+0x3c>
			fire_projectile();
		}
	}
	
	}
}
    1e5a:	df 91       	pop	r29
    1e5c:	cf 91       	pop	r28
    1e5e:	1f 91       	pop	r17
    1e60:	0f 91       	pop	r16
    1e62:	ff 90       	pop	r15
    1e64:	ef 90       	pop	r14
    1e66:	df 90       	pop	r13
    1e68:	cf 90       	pop	r12
    1e6a:	bf 90       	pop	r11
    1e6c:	af 90       	pop	r10
    1e6e:	08 95       	ret

00001e70 <__subsf3>:
    1e70:	50 58       	subi	r21, 0x80	; 128

00001e72 <__addsf3>:
    1e72:	bb 27       	eor	r27, r27
    1e74:	aa 27       	eor	r26, r26
    1e76:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <__addsf3x>
    1e7a:	0c 94 c3 10 	jmp	0x2186	; 0x2186 <__fp_round>
    1e7e:	0e 94 b5 10 	call	0x216a	; 0x216a <__fp_pscA>
    1e82:	38 f0       	brcs	.+14     	; 0x1e92 <__addsf3+0x20>
    1e84:	0e 94 bc 10 	call	0x2178	; 0x2178 <__fp_pscB>
    1e88:	20 f0       	brcs	.+8      	; 0x1e92 <__addsf3+0x20>
    1e8a:	39 f4       	brne	.+14     	; 0x1e9a <__addsf3+0x28>
    1e8c:	9f 3f       	cpi	r25, 0xFF	; 255
    1e8e:	19 f4       	brne	.+6      	; 0x1e96 <__addsf3+0x24>
    1e90:	26 f4       	brtc	.+8      	; 0x1e9a <__addsf3+0x28>
    1e92:	0c 94 b2 10 	jmp	0x2164	; 0x2164 <__fp_nan>
    1e96:	0e f4       	brtc	.+2      	; 0x1e9a <__addsf3+0x28>
    1e98:	e0 95       	com	r30
    1e9a:	e7 fb       	bst	r30, 7
    1e9c:	0c 94 ac 10 	jmp	0x2158	; 0x2158 <__fp_inf>

00001ea0 <__addsf3x>:
    1ea0:	e9 2f       	mov	r30, r25
    1ea2:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <__fp_split3>
    1ea6:	58 f3       	brcs	.-42     	; 0x1e7e <__addsf3+0xc>
    1ea8:	ba 17       	cp	r27, r26
    1eaa:	62 07       	cpc	r22, r18
    1eac:	73 07       	cpc	r23, r19
    1eae:	84 07       	cpc	r24, r20
    1eb0:	95 07       	cpc	r25, r21
    1eb2:	20 f0       	brcs	.+8      	; 0x1ebc <__addsf3x+0x1c>
    1eb4:	79 f4       	brne	.+30     	; 0x1ed4 <__addsf3x+0x34>
    1eb6:	a6 f5       	brtc	.+104    	; 0x1f20 <__addsf3x+0x80>
    1eb8:	0c 94 f6 10 	jmp	0x21ec	; 0x21ec <__fp_zero>
    1ebc:	0e f4       	brtc	.+2      	; 0x1ec0 <__addsf3x+0x20>
    1ebe:	e0 95       	com	r30
    1ec0:	0b 2e       	mov	r0, r27
    1ec2:	ba 2f       	mov	r27, r26
    1ec4:	a0 2d       	mov	r26, r0
    1ec6:	0b 01       	movw	r0, r22
    1ec8:	b9 01       	movw	r22, r18
    1eca:	90 01       	movw	r18, r0
    1ecc:	0c 01       	movw	r0, r24
    1ece:	ca 01       	movw	r24, r20
    1ed0:	a0 01       	movw	r20, r0
    1ed2:	11 24       	eor	r1, r1
    1ed4:	ff 27       	eor	r31, r31
    1ed6:	59 1b       	sub	r21, r25
    1ed8:	99 f0       	breq	.+38     	; 0x1f00 <__addsf3x+0x60>
    1eda:	59 3f       	cpi	r21, 0xF9	; 249
    1edc:	50 f4       	brcc	.+20     	; 0x1ef2 <__addsf3x+0x52>
    1ede:	50 3e       	cpi	r21, 0xE0	; 224
    1ee0:	68 f1       	brcs	.+90     	; 0x1f3c <__addsf3x+0x9c>
    1ee2:	1a 16       	cp	r1, r26
    1ee4:	f0 40       	sbci	r31, 0x00	; 0
    1ee6:	a2 2f       	mov	r26, r18
    1ee8:	23 2f       	mov	r18, r19
    1eea:	34 2f       	mov	r19, r20
    1eec:	44 27       	eor	r20, r20
    1eee:	58 5f       	subi	r21, 0xF8	; 248
    1ef0:	f3 cf       	rjmp	.-26     	; 0x1ed8 <__addsf3x+0x38>
    1ef2:	46 95       	lsr	r20
    1ef4:	37 95       	ror	r19
    1ef6:	27 95       	ror	r18
    1ef8:	a7 95       	ror	r26
    1efa:	f0 40       	sbci	r31, 0x00	; 0
    1efc:	53 95       	inc	r21
    1efe:	c9 f7       	brne	.-14     	; 0x1ef2 <__addsf3x+0x52>
    1f00:	7e f4       	brtc	.+30     	; 0x1f20 <__addsf3x+0x80>
    1f02:	1f 16       	cp	r1, r31
    1f04:	ba 0b       	sbc	r27, r26
    1f06:	62 0b       	sbc	r22, r18
    1f08:	73 0b       	sbc	r23, r19
    1f0a:	84 0b       	sbc	r24, r20
    1f0c:	ba f0       	brmi	.+46     	; 0x1f3c <__addsf3x+0x9c>
    1f0e:	91 50       	subi	r25, 0x01	; 1
    1f10:	a1 f0       	breq	.+40     	; 0x1f3a <__addsf3x+0x9a>
    1f12:	ff 0f       	add	r31, r31
    1f14:	bb 1f       	adc	r27, r27
    1f16:	66 1f       	adc	r22, r22
    1f18:	77 1f       	adc	r23, r23
    1f1a:	88 1f       	adc	r24, r24
    1f1c:	c2 f7       	brpl	.-16     	; 0x1f0e <__addsf3x+0x6e>
    1f1e:	0e c0       	rjmp	.+28     	; 0x1f3c <__addsf3x+0x9c>
    1f20:	ba 0f       	add	r27, r26
    1f22:	62 1f       	adc	r22, r18
    1f24:	73 1f       	adc	r23, r19
    1f26:	84 1f       	adc	r24, r20
    1f28:	48 f4       	brcc	.+18     	; 0x1f3c <__addsf3x+0x9c>
    1f2a:	87 95       	ror	r24
    1f2c:	77 95       	ror	r23
    1f2e:	67 95       	ror	r22
    1f30:	b7 95       	ror	r27
    1f32:	f7 95       	ror	r31
    1f34:	9e 3f       	cpi	r25, 0xFE	; 254
    1f36:	08 f0       	brcs	.+2      	; 0x1f3a <__addsf3x+0x9a>
    1f38:	b0 cf       	rjmp	.-160    	; 0x1e9a <__addsf3+0x28>
    1f3a:	93 95       	inc	r25
    1f3c:	88 0f       	add	r24, r24
    1f3e:	08 f0       	brcs	.+2      	; 0x1f42 <__addsf3x+0xa2>
    1f40:	99 27       	eor	r25, r25
    1f42:	ee 0f       	add	r30, r30
    1f44:	97 95       	ror	r25
    1f46:	87 95       	ror	r24
    1f48:	08 95       	ret

00001f4a <__cmpsf2>:
    1f4a:	0e 94 88 10 	call	0x2110	; 0x2110 <__fp_cmp>
    1f4e:	08 f4       	brcc	.+2      	; 0x1f52 <__cmpsf2+0x8>
    1f50:	81 e0       	ldi	r24, 0x01	; 1
    1f52:	08 95       	ret

00001f54 <__divsf3>:
    1f54:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <__divsf3x>
    1f58:	0c 94 c3 10 	jmp	0x2186	; 0x2186 <__fp_round>
    1f5c:	0e 94 bc 10 	call	0x2178	; 0x2178 <__fp_pscB>
    1f60:	58 f0       	brcs	.+22     	; 0x1f78 <__divsf3+0x24>
    1f62:	0e 94 b5 10 	call	0x216a	; 0x216a <__fp_pscA>
    1f66:	40 f0       	brcs	.+16     	; 0x1f78 <__divsf3+0x24>
    1f68:	29 f4       	brne	.+10     	; 0x1f74 <__divsf3+0x20>
    1f6a:	5f 3f       	cpi	r21, 0xFF	; 255
    1f6c:	29 f0       	breq	.+10     	; 0x1f78 <__divsf3+0x24>
    1f6e:	0c 94 ac 10 	jmp	0x2158	; 0x2158 <__fp_inf>
    1f72:	51 11       	cpse	r21, r1
    1f74:	0c 94 f7 10 	jmp	0x21ee	; 0x21ee <__fp_szero>
    1f78:	0c 94 b2 10 	jmp	0x2164	; 0x2164 <__fp_nan>

00001f7c <__divsf3x>:
    1f7c:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <__fp_split3>
    1f80:	68 f3       	brcs	.-38     	; 0x1f5c <__divsf3+0x8>

00001f82 <__divsf3_pse>:
    1f82:	99 23       	and	r25, r25
    1f84:	b1 f3       	breq	.-20     	; 0x1f72 <__divsf3+0x1e>
    1f86:	55 23       	and	r21, r21
    1f88:	91 f3       	breq	.-28     	; 0x1f6e <__divsf3+0x1a>
    1f8a:	95 1b       	sub	r25, r21
    1f8c:	55 0b       	sbc	r21, r21
    1f8e:	bb 27       	eor	r27, r27
    1f90:	aa 27       	eor	r26, r26
    1f92:	62 17       	cp	r22, r18
    1f94:	73 07       	cpc	r23, r19
    1f96:	84 07       	cpc	r24, r20
    1f98:	38 f0       	brcs	.+14     	; 0x1fa8 <__divsf3_pse+0x26>
    1f9a:	9f 5f       	subi	r25, 0xFF	; 255
    1f9c:	5f 4f       	sbci	r21, 0xFF	; 255
    1f9e:	22 0f       	add	r18, r18
    1fa0:	33 1f       	adc	r19, r19
    1fa2:	44 1f       	adc	r20, r20
    1fa4:	aa 1f       	adc	r26, r26
    1fa6:	a9 f3       	breq	.-22     	; 0x1f92 <__divsf3_pse+0x10>
    1fa8:	35 d0       	rcall	.+106    	; 0x2014 <__divsf3_pse+0x92>
    1faa:	0e 2e       	mov	r0, r30
    1fac:	3a f0       	brmi	.+14     	; 0x1fbc <__divsf3_pse+0x3a>
    1fae:	e0 e8       	ldi	r30, 0x80	; 128
    1fb0:	32 d0       	rcall	.+100    	; 0x2016 <__divsf3_pse+0x94>
    1fb2:	91 50       	subi	r25, 0x01	; 1
    1fb4:	50 40       	sbci	r21, 0x00	; 0
    1fb6:	e6 95       	lsr	r30
    1fb8:	00 1c       	adc	r0, r0
    1fba:	ca f7       	brpl	.-14     	; 0x1fae <__divsf3_pse+0x2c>
    1fbc:	2b d0       	rcall	.+86     	; 0x2014 <__divsf3_pse+0x92>
    1fbe:	fe 2f       	mov	r31, r30
    1fc0:	29 d0       	rcall	.+82     	; 0x2014 <__divsf3_pse+0x92>
    1fc2:	66 0f       	add	r22, r22
    1fc4:	77 1f       	adc	r23, r23
    1fc6:	88 1f       	adc	r24, r24
    1fc8:	bb 1f       	adc	r27, r27
    1fca:	26 17       	cp	r18, r22
    1fcc:	37 07       	cpc	r19, r23
    1fce:	48 07       	cpc	r20, r24
    1fd0:	ab 07       	cpc	r26, r27
    1fd2:	b0 e8       	ldi	r27, 0x80	; 128
    1fd4:	09 f0       	breq	.+2      	; 0x1fd8 <__divsf3_pse+0x56>
    1fd6:	bb 0b       	sbc	r27, r27
    1fd8:	80 2d       	mov	r24, r0
    1fda:	bf 01       	movw	r22, r30
    1fdc:	ff 27       	eor	r31, r31
    1fde:	93 58       	subi	r25, 0x83	; 131
    1fe0:	5f 4f       	sbci	r21, 0xFF	; 255
    1fe2:	3a f0       	brmi	.+14     	; 0x1ff2 <__divsf3_pse+0x70>
    1fe4:	9e 3f       	cpi	r25, 0xFE	; 254
    1fe6:	51 05       	cpc	r21, r1
    1fe8:	78 f0       	brcs	.+30     	; 0x2008 <__divsf3_pse+0x86>
    1fea:	0c 94 ac 10 	jmp	0x2158	; 0x2158 <__fp_inf>
    1fee:	0c 94 f7 10 	jmp	0x21ee	; 0x21ee <__fp_szero>
    1ff2:	5f 3f       	cpi	r21, 0xFF	; 255
    1ff4:	e4 f3       	brlt	.-8      	; 0x1fee <__divsf3_pse+0x6c>
    1ff6:	98 3e       	cpi	r25, 0xE8	; 232
    1ff8:	d4 f3       	brlt	.-12     	; 0x1fee <__divsf3_pse+0x6c>
    1ffa:	86 95       	lsr	r24
    1ffc:	77 95       	ror	r23
    1ffe:	67 95       	ror	r22
    2000:	b7 95       	ror	r27
    2002:	f7 95       	ror	r31
    2004:	9f 5f       	subi	r25, 0xFF	; 255
    2006:	c9 f7       	brne	.-14     	; 0x1ffa <__divsf3_pse+0x78>
    2008:	88 0f       	add	r24, r24
    200a:	91 1d       	adc	r25, r1
    200c:	96 95       	lsr	r25
    200e:	87 95       	ror	r24
    2010:	97 f9       	bld	r25, 7
    2012:	08 95       	ret
    2014:	e1 e0       	ldi	r30, 0x01	; 1
    2016:	66 0f       	add	r22, r22
    2018:	77 1f       	adc	r23, r23
    201a:	88 1f       	adc	r24, r24
    201c:	bb 1f       	adc	r27, r27
    201e:	62 17       	cp	r22, r18
    2020:	73 07       	cpc	r23, r19
    2022:	84 07       	cpc	r24, r20
    2024:	ba 07       	cpc	r27, r26
    2026:	20 f0       	brcs	.+8      	; 0x2030 <__divsf3_pse+0xae>
    2028:	62 1b       	sub	r22, r18
    202a:	73 0b       	sbc	r23, r19
    202c:	84 0b       	sbc	r24, r20
    202e:	ba 0b       	sbc	r27, r26
    2030:	ee 1f       	adc	r30, r30
    2032:	88 f7       	brcc	.-30     	; 0x2016 <__divsf3_pse+0x94>
    2034:	e0 95       	com	r30
    2036:	08 95       	ret

00002038 <__fixunssfsi>:
    2038:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <__fp_splitA>
    203c:	88 f0       	brcs	.+34     	; 0x2060 <__fixunssfsi+0x28>
    203e:	9f 57       	subi	r25, 0x7F	; 127
    2040:	98 f0       	brcs	.+38     	; 0x2068 <__fixunssfsi+0x30>
    2042:	b9 2f       	mov	r27, r25
    2044:	99 27       	eor	r25, r25
    2046:	b7 51       	subi	r27, 0x17	; 23
    2048:	b0 f0       	brcs	.+44     	; 0x2076 <__fixunssfsi+0x3e>
    204a:	e1 f0       	breq	.+56     	; 0x2084 <__fixunssfsi+0x4c>
    204c:	66 0f       	add	r22, r22
    204e:	77 1f       	adc	r23, r23
    2050:	88 1f       	adc	r24, r24
    2052:	99 1f       	adc	r25, r25
    2054:	1a f0       	brmi	.+6      	; 0x205c <__fixunssfsi+0x24>
    2056:	ba 95       	dec	r27
    2058:	c9 f7       	brne	.-14     	; 0x204c <__fixunssfsi+0x14>
    205a:	14 c0       	rjmp	.+40     	; 0x2084 <__fixunssfsi+0x4c>
    205c:	b1 30       	cpi	r27, 0x01	; 1
    205e:	91 f0       	breq	.+36     	; 0x2084 <__fixunssfsi+0x4c>
    2060:	0e 94 f6 10 	call	0x21ec	; 0x21ec <__fp_zero>
    2064:	b1 e0       	ldi	r27, 0x01	; 1
    2066:	08 95       	ret
    2068:	0c 94 f6 10 	jmp	0x21ec	; 0x21ec <__fp_zero>
    206c:	67 2f       	mov	r22, r23
    206e:	78 2f       	mov	r23, r24
    2070:	88 27       	eor	r24, r24
    2072:	b8 5f       	subi	r27, 0xF8	; 248
    2074:	39 f0       	breq	.+14     	; 0x2084 <__fixunssfsi+0x4c>
    2076:	b9 3f       	cpi	r27, 0xF9	; 249
    2078:	cc f3       	brlt	.-14     	; 0x206c <__fixunssfsi+0x34>
    207a:	86 95       	lsr	r24
    207c:	77 95       	ror	r23
    207e:	67 95       	ror	r22
    2080:	b3 95       	inc	r27
    2082:	d9 f7       	brne	.-10     	; 0x207a <__fixunssfsi+0x42>
    2084:	3e f4       	brtc	.+14     	; 0x2094 <__fixunssfsi+0x5c>
    2086:	90 95       	com	r25
    2088:	80 95       	com	r24
    208a:	70 95       	com	r23
    208c:	61 95       	neg	r22
    208e:	7f 4f       	sbci	r23, 0xFF	; 255
    2090:	8f 4f       	sbci	r24, 0xFF	; 255
    2092:	9f 4f       	sbci	r25, 0xFF	; 255
    2094:	08 95       	ret

00002096 <__floatunsisf>:
    2096:	e8 94       	clt
    2098:	09 c0       	rjmp	.+18     	; 0x20ac <__floatsisf+0x12>

0000209a <__floatsisf>:
    209a:	97 fb       	bst	r25, 7
    209c:	3e f4       	brtc	.+14     	; 0x20ac <__floatsisf+0x12>
    209e:	90 95       	com	r25
    20a0:	80 95       	com	r24
    20a2:	70 95       	com	r23
    20a4:	61 95       	neg	r22
    20a6:	7f 4f       	sbci	r23, 0xFF	; 255
    20a8:	8f 4f       	sbci	r24, 0xFF	; 255
    20aa:	9f 4f       	sbci	r25, 0xFF	; 255
    20ac:	99 23       	and	r25, r25
    20ae:	a9 f0       	breq	.+42     	; 0x20da <__floatsisf+0x40>
    20b0:	f9 2f       	mov	r31, r25
    20b2:	96 e9       	ldi	r25, 0x96	; 150
    20b4:	bb 27       	eor	r27, r27
    20b6:	93 95       	inc	r25
    20b8:	f6 95       	lsr	r31
    20ba:	87 95       	ror	r24
    20bc:	77 95       	ror	r23
    20be:	67 95       	ror	r22
    20c0:	b7 95       	ror	r27
    20c2:	f1 11       	cpse	r31, r1
    20c4:	f8 cf       	rjmp	.-16     	; 0x20b6 <__floatsisf+0x1c>
    20c6:	fa f4       	brpl	.+62     	; 0x2106 <__floatsisf+0x6c>
    20c8:	bb 0f       	add	r27, r27
    20ca:	11 f4       	brne	.+4      	; 0x20d0 <__floatsisf+0x36>
    20cc:	60 ff       	sbrs	r22, 0
    20ce:	1b c0       	rjmp	.+54     	; 0x2106 <__floatsisf+0x6c>
    20d0:	6f 5f       	subi	r22, 0xFF	; 255
    20d2:	7f 4f       	sbci	r23, 0xFF	; 255
    20d4:	8f 4f       	sbci	r24, 0xFF	; 255
    20d6:	9f 4f       	sbci	r25, 0xFF	; 255
    20d8:	16 c0       	rjmp	.+44     	; 0x2106 <__floatsisf+0x6c>
    20da:	88 23       	and	r24, r24
    20dc:	11 f0       	breq	.+4      	; 0x20e2 <__floatsisf+0x48>
    20de:	96 e9       	ldi	r25, 0x96	; 150
    20e0:	11 c0       	rjmp	.+34     	; 0x2104 <__floatsisf+0x6a>
    20e2:	77 23       	and	r23, r23
    20e4:	21 f0       	breq	.+8      	; 0x20ee <__floatsisf+0x54>
    20e6:	9e e8       	ldi	r25, 0x8E	; 142
    20e8:	87 2f       	mov	r24, r23
    20ea:	76 2f       	mov	r23, r22
    20ec:	05 c0       	rjmp	.+10     	; 0x20f8 <__floatsisf+0x5e>
    20ee:	66 23       	and	r22, r22
    20f0:	71 f0       	breq	.+28     	; 0x210e <__floatsisf+0x74>
    20f2:	96 e8       	ldi	r25, 0x86	; 134
    20f4:	86 2f       	mov	r24, r22
    20f6:	70 e0       	ldi	r23, 0x00	; 0
    20f8:	60 e0       	ldi	r22, 0x00	; 0
    20fa:	2a f0       	brmi	.+10     	; 0x2106 <__floatsisf+0x6c>
    20fc:	9a 95       	dec	r25
    20fe:	66 0f       	add	r22, r22
    2100:	77 1f       	adc	r23, r23
    2102:	88 1f       	adc	r24, r24
    2104:	da f7       	brpl	.-10     	; 0x20fc <__floatsisf+0x62>
    2106:	88 0f       	add	r24, r24
    2108:	96 95       	lsr	r25
    210a:	87 95       	ror	r24
    210c:	97 f9       	bld	r25, 7
    210e:	08 95       	ret

00002110 <__fp_cmp>:
    2110:	99 0f       	add	r25, r25
    2112:	00 08       	sbc	r0, r0
    2114:	55 0f       	add	r21, r21
    2116:	aa 0b       	sbc	r26, r26
    2118:	e0 e8       	ldi	r30, 0x80	; 128
    211a:	fe ef       	ldi	r31, 0xFE	; 254
    211c:	16 16       	cp	r1, r22
    211e:	17 06       	cpc	r1, r23
    2120:	e8 07       	cpc	r30, r24
    2122:	f9 07       	cpc	r31, r25
    2124:	c0 f0       	brcs	.+48     	; 0x2156 <__fp_cmp+0x46>
    2126:	12 16       	cp	r1, r18
    2128:	13 06       	cpc	r1, r19
    212a:	e4 07       	cpc	r30, r20
    212c:	f5 07       	cpc	r31, r21
    212e:	98 f0       	brcs	.+38     	; 0x2156 <__fp_cmp+0x46>
    2130:	62 1b       	sub	r22, r18
    2132:	73 0b       	sbc	r23, r19
    2134:	84 0b       	sbc	r24, r20
    2136:	95 0b       	sbc	r25, r21
    2138:	39 f4       	brne	.+14     	; 0x2148 <__fp_cmp+0x38>
    213a:	0a 26       	eor	r0, r26
    213c:	61 f0       	breq	.+24     	; 0x2156 <__fp_cmp+0x46>
    213e:	23 2b       	or	r18, r19
    2140:	24 2b       	or	r18, r20
    2142:	25 2b       	or	r18, r21
    2144:	21 f4       	brne	.+8      	; 0x214e <__fp_cmp+0x3e>
    2146:	08 95       	ret
    2148:	0a 26       	eor	r0, r26
    214a:	09 f4       	brne	.+2      	; 0x214e <__fp_cmp+0x3e>
    214c:	a1 40       	sbci	r26, 0x01	; 1
    214e:	a6 95       	lsr	r26
    2150:	8f ef       	ldi	r24, 0xFF	; 255
    2152:	81 1d       	adc	r24, r1
    2154:	81 1d       	adc	r24, r1
    2156:	08 95       	ret

00002158 <__fp_inf>:
    2158:	97 f9       	bld	r25, 7
    215a:	9f 67       	ori	r25, 0x7F	; 127
    215c:	80 e8       	ldi	r24, 0x80	; 128
    215e:	70 e0       	ldi	r23, 0x00	; 0
    2160:	60 e0       	ldi	r22, 0x00	; 0
    2162:	08 95       	ret

00002164 <__fp_nan>:
    2164:	9f ef       	ldi	r25, 0xFF	; 255
    2166:	80 ec       	ldi	r24, 0xC0	; 192
    2168:	08 95       	ret

0000216a <__fp_pscA>:
    216a:	00 24       	eor	r0, r0
    216c:	0a 94       	dec	r0
    216e:	16 16       	cp	r1, r22
    2170:	17 06       	cpc	r1, r23
    2172:	18 06       	cpc	r1, r24
    2174:	09 06       	cpc	r0, r25
    2176:	08 95       	ret

00002178 <__fp_pscB>:
    2178:	00 24       	eor	r0, r0
    217a:	0a 94       	dec	r0
    217c:	12 16       	cp	r1, r18
    217e:	13 06       	cpc	r1, r19
    2180:	14 06       	cpc	r1, r20
    2182:	05 06       	cpc	r0, r21
    2184:	08 95       	ret

00002186 <__fp_round>:
    2186:	09 2e       	mov	r0, r25
    2188:	03 94       	inc	r0
    218a:	00 0c       	add	r0, r0
    218c:	11 f4       	brne	.+4      	; 0x2192 <__fp_round+0xc>
    218e:	88 23       	and	r24, r24
    2190:	52 f0       	brmi	.+20     	; 0x21a6 <__fp_round+0x20>
    2192:	bb 0f       	add	r27, r27
    2194:	40 f4       	brcc	.+16     	; 0x21a6 <__fp_round+0x20>
    2196:	bf 2b       	or	r27, r31
    2198:	11 f4       	brne	.+4      	; 0x219e <__fp_round+0x18>
    219a:	60 ff       	sbrs	r22, 0
    219c:	04 c0       	rjmp	.+8      	; 0x21a6 <__fp_round+0x20>
    219e:	6f 5f       	subi	r22, 0xFF	; 255
    21a0:	7f 4f       	sbci	r23, 0xFF	; 255
    21a2:	8f 4f       	sbci	r24, 0xFF	; 255
    21a4:	9f 4f       	sbci	r25, 0xFF	; 255
    21a6:	08 95       	ret

000021a8 <__fp_split3>:
    21a8:	57 fd       	sbrc	r21, 7
    21aa:	90 58       	subi	r25, 0x80	; 128
    21ac:	44 0f       	add	r20, r20
    21ae:	55 1f       	adc	r21, r21
    21b0:	59 f0       	breq	.+22     	; 0x21c8 <__fp_splitA+0x10>
    21b2:	5f 3f       	cpi	r21, 0xFF	; 255
    21b4:	71 f0       	breq	.+28     	; 0x21d2 <__fp_splitA+0x1a>
    21b6:	47 95       	ror	r20

000021b8 <__fp_splitA>:
    21b8:	88 0f       	add	r24, r24
    21ba:	97 fb       	bst	r25, 7
    21bc:	99 1f       	adc	r25, r25
    21be:	61 f0       	breq	.+24     	; 0x21d8 <__fp_splitA+0x20>
    21c0:	9f 3f       	cpi	r25, 0xFF	; 255
    21c2:	79 f0       	breq	.+30     	; 0x21e2 <__fp_splitA+0x2a>
    21c4:	87 95       	ror	r24
    21c6:	08 95       	ret
    21c8:	12 16       	cp	r1, r18
    21ca:	13 06       	cpc	r1, r19
    21cc:	14 06       	cpc	r1, r20
    21ce:	55 1f       	adc	r21, r21
    21d0:	f2 cf       	rjmp	.-28     	; 0x21b6 <__fp_split3+0xe>
    21d2:	46 95       	lsr	r20
    21d4:	f1 df       	rcall	.-30     	; 0x21b8 <__fp_splitA>
    21d6:	08 c0       	rjmp	.+16     	; 0x21e8 <__fp_splitA+0x30>
    21d8:	16 16       	cp	r1, r22
    21da:	17 06       	cpc	r1, r23
    21dc:	18 06       	cpc	r1, r24
    21de:	99 1f       	adc	r25, r25
    21e0:	f1 cf       	rjmp	.-30     	; 0x21c4 <__fp_splitA+0xc>
    21e2:	86 95       	lsr	r24
    21e4:	71 05       	cpc	r23, r1
    21e6:	61 05       	cpc	r22, r1
    21e8:	08 94       	sec
    21ea:	08 95       	ret

000021ec <__fp_zero>:
    21ec:	e8 94       	clt

000021ee <__fp_szero>:
    21ee:	bb 27       	eor	r27, r27
    21f0:	66 27       	eor	r22, r22
    21f2:	77 27       	eor	r23, r23
    21f4:	cb 01       	movw	r24, r22
    21f6:	97 f9       	bld	r25, 7
    21f8:	08 95       	ret

000021fa <__mulsf3>:
    21fa:	0e 94 10 11 	call	0x2220	; 0x2220 <__mulsf3x>
    21fe:	0c 94 c3 10 	jmp	0x2186	; 0x2186 <__fp_round>
    2202:	0e 94 b5 10 	call	0x216a	; 0x216a <__fp_pscA>
    2206:	38 f0       	brcs	.+14     	; 0x2216 <__mulsf3+0x1c>
    2208:	0e 94 bc 10 	call	0x2178	; 0x2178 <__fp_pscB>
    220c:	20 f0       	brcs	.+8      	; 0x2216 <__mulsf3+0x1c>
    220e:	95 23       	and	r25, r21
    2210:	11 f0       	breq	.+4      	; 0x2216 <__mulsf3+0x1c>
    2212:	0c 94 ac 10 	jmp	0x2158	; 0x2158 <__fp_inf>
    2216:	0c 94 b2 10 	jmp	0x2164	; 0x2164 <__fp_nan>
    221a:	11 24       	eor	r1, r1
    221c:	0c 94 f7 10 	jmp	0x21ee	; 0x21ee <__fp_szero>

00002220 <__mulsf3x>:
    2220:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <__fp_split3>
    2224:	70 f3       	brcs	.-36     	; 0x2202 <__mulsf3+0x8>

00002226 <__mulsf3_pse>:
    2226:	95 9f       	mul	r25, r21
    2228:	c1 f3       	breq	.-16     	; 0x221a <__mulsf3+0x20>
    222a:	95 0f       	add	r25, r21
    222c:	50 e0       	ldi	r21, 0x00	; 0
    222e:	55 1f       	adc	r21, r21
    2230:	62 9f       	mul	r22, r18
    2232:	f0 01       	movw	r30, r0
    2234:	72 9f       	mul	r23, r18
    2236:	bb 27       	eor	r27, r27
    2238:	f0 0d       	add	r31, r0
    223a:	b1 1d       	adc	r27, r1
    223c:	63 9f       	mul	r22, r19
    223e:	aa 27       	eor	r26, r26
    2240:	f0 0d       	add	r31, r0
    2242:	b1 1d       	adc	r27, r1
    2244:	aa 1f       	adc	r26, r26
    2246:	64 9f       	mul	r22, r20
    2248:	66 27       	eor	r22, r22
    224a:	b0 0d       	add	r27, r0
    224c:	a1 1d       	adc	r26, r1
    224e:	66 1f       	adc	r22, r22
    2250:	82 9f       	mul	r24, r18
    2252:	22 27       	eor	r18, r18
    2254:	b0 0d       	add	r27, r0
    2256:	a1 1d       	adc	r26, r1
    2258:	62 1f       	adc	r22, r18
    225a:	73 9f       	mul	r23, r19
    225c:	b0 0d       	add	r27, r0
    225e:	a1 1d       	adc	r26, r1
    2260:	62 1f       	adc	r22, r18
    2262:	83 9f       	mul	r24, r19
    2264:	a0 0d       	add	r26, r0
    2266:	61 1d       	adc	r22, r1
    2268:	22 1f       	adc	r18, r18
    226a:	74 9f       	mul	r23, r20
    226c:	33 27       	eor	r19, r19
    226e:	a0 0d       	add	r26, r0
    2270:	61 1d       	adc	r22, r1
    2272:	23 1f       	adc	r18, r19
    2274:	84 9f       	mul	r24, r20
    2276:	60 0d       	add	r22, r0
    2278:	21 1d       	adc	r18, r1
    227a:	82 2f       	mov	r24, r18
    227c:	76 2f       	mov	r23, r22
    227e:	6a 2f       	mov	r22, r26
    2280:	11 24       	eor	r1, r1
    2282:	9f 57       	subi	r25, 0x7F	; 127
    2284:	50 40       	sbci	r21, 0x00	; 0
    2286:	9a f0       	brmi	.+38     	; 0x22ae <__mulsf3_pse+0x88>
    2288:	f1 f0       	breq	.+60     	; 0x22c6 <__mulsf3_pse+0xa0>
    228a:	88 23       	and	r24, r24
    228c:	4a f0       	brmi	.+18     	; 0x22a0 <__mulsf3_pse+0x7a>
    228e:	ee 0f       	add	r30, r30
    2290:	ff 1f       	adc	r31, r31
    2292:	bb 1f       	adc	r27, r27
    2294:	66 1f       	adc	r22, r22
    2296:	77 1f       	adc	r23, r23
    2298:	88 1f       	adc	r24, r24
    229a:	91 50       	subi	r25, 0x01	; 1
    229c:	50 40       	sbci	r21, 0x00	; 0
    229e:	a9 f7       	brne	.-22     	; 0x228a <__mulsf3_pse+0x64>
    22a0:	9e 3f       	cpi	r25, 0xFE	; 254
    22a2:	51 05       	cpc	r21, r1
    22a4:	80 f0       	brcs	.+32     	; 0x22c6 <__mulsf3_pse+0xa0>
    22a6:	0c 94 ac 10 	jmp	0x2158	; 0x2158 <__fp_inf>
    22aa:	0c 94 f7 10 	jmp	0x21ee	; 0x21ee <__fp_szero>
    22ae:	5f 3f       	cpi	r21, 0xFF	; 255
    22b0:	e4 f3       	brlt	.-8      	; 0x22aa <__mulsf3_pse+0x84>
    22b2:	98 3e       	cpi	r25, 0xE8	; 232
    22b4:	d4 f3       	brlt	.-12     	; 0x22aa <__mulsf3_pse+0x84>
    22b6:	86 95       	lsr	r24
    22b8:	77 95       	ror	r23
    22ba:	67 95       	ror	r22
    22bc:	b7 95       	ror	r27
    22be:	f7 95       	ror	r31
    22c0:	e7 95       	ror	r30
    22c2:	9f 5f       	subi	r25, 0xFF	; 255
    22c4:	c1 f7       	brne	.-16     	; 0x22b6 <__mulsf3_pse+0x90>
    22c6:	fe 2b       	or	r31, r30
    22c8:	88 0f       	add	r24, r24
    22ca:	91 1d       	adc	r25, r1
    22cc:	96 95       	lsr	r25
    22ce:	87 95       	ror	r24
    22d0:	97 f9       	bld	r25, 7
    22d2:	08 95       	ret

000022d4 <__udivmodsi4>:
    22d4:	a1 e2       	ldi	r26, 0x21	; 33
    22d6:	1a 2e       	mov	r1, r26
    22d8:	aa 1b       	sub	r26, r26
    22da:	bb 1b       	sub	r27, r27
    22dc:	fd 01       	movw	r30, r26
    22de:	0d c0       	rjmp	.+26     	; 0x22fa <__udivmodsi4_ep>

000022e0 <__udivmodsi4_loop>:
    22e0:	aa 1f       	adc	r26, r26
    22e2:	bb 1f       	adc	r27, r27
    22e4:	ee 1f       	adc	r30, r30
    22e6:	ff 1f       	adc	r31, r31
    22e8:	a2 17       	cp	r26, r18
    22ea:	b3 07       	cpc	r27, r19
    22ec:	e4 07       	cpc	r30, r20
    22ee:	f5 07       	cpc	r31, r21
    22f0:	20 f0       	brcs	.+8      	; 0x22fa <__udivmodsi4_ep>
    22f2:	a2 1b       	sub	r26, r18
    22f4:	b3 0b       	sbc	r27, r19
    22f6:	e4 0b       	sbc	r30, r20
    22f8:	f5 0b       	sbc	r31, r21

000022fa <__udivmodsi4_ep>:
    22fa:	66 1f       	adc	r22, r22
    22fc:	77 1f       	adc	r23, r23
    22fe:	88 1f       	adc	r24, r24
    2300:	99 1f       	adc	r25, r25
    2302:	1a 94       	dec	r1
    2304:	69 f7       	brne	.-38     	; 0x22e0 <__udivmodsi4_loop>
    2306:	60 95       	com	r22
    2308:	70 95       	com	r23
    230a:	80 95       	com	r24
    230c:	90 95       	com	r25
    230e:	9b 01       	movw	r18, r22
    2310:	ac 01       	movw	r20, r24
    2312:	bd 01       	movw	r22, r26
    2314:	cf 01       	movw	r24, r30
    2316:	08 95       	ret

00002318 <__divmodsi4>:
    2318:	05 2e       	mov	r0, r21
    231a:	97 fb       	bst	r25, 7
    231c:	1e f4       	brtc	.+6      	; 0x2324 <__divmodsi4+0xc>
    231e:	00 94       	com	r0
    2320:	0e 94 a3 11 	call	0x2346	; 0x2346 <__negsi2>
    2324:	57 fd       	sbrc	r21, 7
    2326:	07 d0       	rcall	.+14     	; 0x2336 <__divmodsi4_neg2>
    2328:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <__udivmodsi4>
    232c:	07 fc       	sbrc	r0, 7
    232e:	03 d0       	rcall	.+6      	; 0x2336 <__divmodsi4_neg2>
    2330:	4e f4       	brtc	.+18     	; 0x2344 <__divmodsi4_exit>
    2332:	0c 94 a3 11 	jmp	0x2346	; 0x2346 <__negsi2>

00002336 <__divmodsi4_neg2>:
    2336:	50 95       	com	r21
    2338:	40 95       	com	r20
    233a:	30 95       	com	r19
    233c:	21 95       	neg	r18
    233e:	3f 4f       	sbci	r19, 0xFF	; 255
    2340:	4f 4f       	sbci	r20, 0xFF	; 255
    2342:	5f 4f       	sbci	r21, 0xFF	; 255

00002344 <__divmodsi4_exit>:
    2344:	08 95       	ret

00002346 <__negsi2>:
    2346:	90 95       	com	r25
    2348:	80 95       	com	r24
    234a:	70 95       	com	r23
    234c:	61 95       	neg	r22
    234e:	7f 4f       	sbci	r23, 0xFF	; 255
    2350:	8f 4f       	sbci	r24, 0xFF	; 255
    2352:	9f 4f       	sbci	r25, 0xFF	; 255
    2354:	08 95       	ret

00002356 <__umulhisi3>:
    2356:	a2 9f       	mul	r26, r18
    2358:	b0 01       	movw	r22, r0
    235a:	b3 9f       	mul	r27, r19
    235c:	c0 01       	movw	r24, r0
    235e:	a3 9f       	mul	r26, r19
    2360:	70 0d       	add	r23, r0
    2362:	81 1d       	adc	r24, r1
    2364:	11 24       	eor	r1, r1
    2366:	91 1d       	adc	r25, r1
    2368:	b2 9f       	mul	r27, r18
    236a:	70 0d       	add	r23, r0
    236c:	81 1d       	adc	r24, r1
    236e:	11 24       	eor	r1, r1
    2370:	91 1d       	adc	r25, r1
    2372:	08 95       	ret

00002374 <random_r>:
    2374:	8f 92       	push	r8
    2376:	9f 92       	push	r9
    2378:	af 92       	push	r10
    237a:	bf 92       	push	r11
    237c:	cf 92       	push	r12
    237e:	df 92       	push	r13
    2380:	ef 92       	push	r14
    2382:	ff 92       	push	r15
    2384:	cf 93       	push	r28
    2386:	df 93       	push	r29
    2388:	ec 01       	movw	r28, r24
    238a:	68 81       	ld	r22, Y
    238c:	79 81       	ldd	r23, Y+1	; 0x01
    238e:	8a 81       	ldd	r24, Y+2	; 0x02
    2390:	9b 81       	ldd	r25, Y+3	; 0x03
    2392:	61 15       	cp	r22, r1
    2394:	71 05       	cpc	r23, r1
    2396:	81 05       	cpc	r24, r1
    2398:	91 05       	cpc	r25, r1
    239a:	21 f4       	brne	.+8      	; 0x23a4 <random_r+0x30>
    239c:	64 e2       	ldi	r22, 0x24	; 36
    239e:	79 ed       	ldi	r23, 0xD9	; 217
    23a0:	8b e5       	ldi	r24, 0x5B	; 91
    23a2:	97 e0       	ldi	r25, 0x07	; 7
    23a4:	2d e1       	ldi	r18, 0x1D	; 29
    23a6:	33 ef       	ldi	r19, 0xF3	; 243
    23a8:	41 e0       	ldi	r20, 0x01	; 1
    23aa:	50 e0       	ldi	r21, 0x00	; 0
    23ac:	0e 94 8c 11 	call	0x2318	; 0x2318 <__divmodsi4>
    23b0:	49 01       	movw	r8, r18
    23b2:	5a 01       	movw	r10, r20
    23b4:	9b 01       	movw	r18, r22
    23b6:	ac 01       	movw	r20, r24
    23b8:	a7 ea       	ldi	r26, 0xA7	; 167
    23ba:	b1 e4       	ldi	r27, 0x41	; 65
    23bc:	0e 94 67 15 	call	0x2ace	; 0x2ace <__muluhisi3>
    23c0:	6b 01       	movw	r12, r22
    23c2:	7c 01       	movw	r14, r24
    23c4:	ac ee       	ldi	r26, 0xEC	; 236
    23c6:	b4 ef       	ldi	r27, 0xF4	; 244
    23c8:	a5 01       	movw	r20, r10
    23ca:	94 01       	movw	r18, r8
    23cc:	0e 94 75 15 	call	0x2aea	; 0x2aea <__mulohisi3>
    23d0:	dc 01       	movw	r26, r24
    23d2:	cb 01       	movw	r24, r22
    23d4:	8c 0d       	add	r24, r12
    23d6:	9d 1d       	adc	r25, r13
    23d8:	ae 1d       	adc	r26, r14
    23da:	bf 1d       	adc	r27, r15
    23dc:	b7 ff       	sbrs	r27, 7
    23de:	03 c0       	rjmp	.+6      	; 0x23e6 <random_r+0x72>
    23e0:	01 97       	sbiw	r24, 0x01	; 1
    23e2:	a1 09       	sbc	r26, r1
    23e4:	b0 48       	sbci	r27, 0x80	; 128
    23e6:	88 83       	st	Y, r24
    23e8:	99 83       	std	Y+1, r25	; 0x01
    23ea:	aa 83       	std	Y+2, r26	; 0x02
    23ec:	bb 83       	std	Y+3, r27	; 0x03
    23ee:	bc 01       	movw	r22, r24
    23f0:	cd 01       	movw	r24, r26
    23f2:	9f 77       	andi	r25, 0x7F	; 127
    23f4:	df 91       	pop	r29
    23f6:	cf 91       	pop	r28
    23f8:	ff 90       	pop	r15
    23fa:	ef 90       	pop	r14
    23fc:	df 90       	pop	r13
    23fe:	cf 90       	pop	r12
    2400:	bf 90       	pop	r11
    2402:	af 90       	pop	r10
    2404:	9f 90       	pop	r9
    2406:	8f 90       	pop	r8
    2408:	08 95       	ret

0000240a <random>:
    240a:	8f 92       	push	r8
    240c:	9f 92       	push	r9
    240e:	af 92       	push	r10
    2410:	bf 92       	push	r11
    2412:	cf 92       	push	r12
    2414:	df 92       	push	r13
    2416:	ef 92       	push	r14
    2418:	ff 92       	push	r15
    241a:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
    241e:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
    2422:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
    2426:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
    242a:	61 15       	cp	r22, r1
    242c:	71 05       	cpc	r23, r1
    242e:	81 05       	cpc	r24, r1
    2430:	91 05       	cpc	r25, r1
    2432:	21 f4       	brne	.+8      	; 0x243c <random+0x32>
    2434:	64 e2       	ldi	r22, 0x24	; 36
    2436:	79 ed       	ldi	r23, 0xD9	; 217
    2438:	8b e5       	ldi	r24, 0x5B	; 91
    243a:	97 e0       	ldi	r25, 0x07	; 7
    243c:	2d e1       	ldi	r18, 0x1D	; 29
    243e:	33 ef       	ldi	r19, 0xF3	; 243
    2440:	41 e0       	ldi	r20, 0x01	; 1
    2442:	50 e0       	ldi	r21, 0x00	; 0
    2444:	0e 94 8c 11 	call	0x2318	; 0x2318 <__divmodsi4>
    2448:	49 01       	movw	r8, r18
    244a:	5a 01       	movw	r10, r20
    244c:	9b 01       	movw	r18, r22
    244e:	ac 01       	movw	r20, r24
    2450:	a7 ea       	ldi	r26, 0xA7	; 167
    2452:	b1 e4       	ldi	r27, 0x41	; 65
    2454:	0e 94 67 15 	call	0x2ace	; 0x2ace <__muluhisi3>
    2458:	6b 01       	movw	r12, r22
    245a:	7c 01       	movw	r14, r24
    245c:	ac ee       	ldi	r26, 0xEC	; 236
    245e:	b4 ef       	ldi	r27, 0xF4	; 244
    2460:	a5 01       	movw	r20, r10
    2462:	94 01       	movw	r18, r8
    2464:	0e 94 75 15 	call	0x2aea	; 0x2aea <__mulohisi3>
    2468:	dc 01       	movw	r26, r24
    246a:	cb 01       	movw	r24, r22
    246c:	8c 0d       	add	r24, r12
    246e:	9d 1d       	adc	r25, r13
    2470:	ae 1d       	adc	r26, r14
    2472:	bf 1d       	adc	r27, r15
    2474:	b7 ff       	sbrs	r27, 7
    2476:	03 c0       	rjmp	.+6      	; 0x247e <random+0x74>
    2478:	01 97       	sbiw	r24, 0x01	; 1
    247a:	a1 09       	sbc	r26, r1
    247c:	b0 48       	sbci	r27, 0x80	; 128
    247e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    2482:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    2486:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
    248a:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
    248e:	bc 01       	movw	r22, r24
    2490:	cd 01       	movw	r24, r26
    2492:	9f 77       	andi	r25, 0x7F	; 127
    2494:	ff 90       	pop	r15
    2496:	ef 90       	pop	r14
    2498:	df 90       	pop	r13
    249a:	cf 90       	pop	r12
    249c:	bf 90       	pop	r11
    249e:	af 90       	pop	r10
    24a0:	9f 90       	pop	r9
    24a2:	8f 90       	pop	r8
    24a4:	08 95       	ret

000024a6 <srandom>:
    24a6:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
    24aa:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
    24ae:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
    24b2:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
    24b6:	08 95       	ret

000024b8 <fgetc>:
    24b8:	cf 93       	push	r28
    24ba:	df 93       	push	r29
    24bc:	ec 01       	movw	r28, r24
    24be:	2b 81       	ldd	r18, Y+3	; 0x03
    24c0:	20 ff       	sbrs	r18, 0
    24c2:	33 c0       	rjmp	.+102    	; 0x252a <fgetc+0x72>
    24c4:	26 ff       	sbrs	r18, 6
    24c6:	0a c0       	rjmp	.+20     	; 0x24dc <fgetc+0x24>
    24c8:	2f 7b       	andi	r18, 0xBF	; 191
    24ca:	2b 83       	std	Y+3, r18	; 0x03
    24cc:	8e 81       	ldd	r24, Y+6	; 0x06
    24ce:	9f 81       	ldd	r25, Y+7	; 0x07
    24d0:	01 96       	adiw	r24, 0x01	; 1
    24d2:	9f 83       	std	Y+7, r25	; 0x07
    24d4:	8e 83       	std	Y+6, r24	; 0x06
    24d6:	8a 81       	ldd	r24, Y+2	; 0x02
    24d8:	90 e0       	ldi	r25, 0x00	; 0
    24da:	29 c0       	rjmp	.+82     	; 0x252e <fgetc+0x76>
    24dc:	22 ff       	sbrs	r18, 2
    24de:	0f c0       	rjmp	.+30     	; 0x24fe <fgetc+0x46>
    24e0:	e8 81       	ld	r30, Y
    24e2:	f9 81       	ldd	r31, Y+1	; 0x01
    24e4:	80 81       	ld	r24, Z
    24e6:	08 2e       	mov	r0, r24
    24e8:	00 0c       	add	r0, r0
    24ea:	99 0b       	sbc	r25, r25
    24ec:	00 97       	sbiw	r24, 0x00	; 0
    24ee:	19 f4       	brne	.+6      	; 0x24f6 <fgetc+0x3e>
    24f0:	20 62       	ori	r18, 0x20	; 32
    24f2:	2b 83       	std	Y+3, r18	; 0x03
    24f4:	1a c0       	rjmp	.+52     	; 0x252a <fgetc+0x72>
    24f6:	31 96       	adiw	r30, 0x01	; 1
    24f8:	f9 83       	std	Y+1, r31	; 0x01
    24fa:	e8 83       	st	Y, r30
    24fc:	0e c0       	rjmp	.+28     	; 0x251a <fgetc+0x62>
    24fe:	ea 85       	ldd	r30, Y+10	; 0x0a
    2500:	fb 85       	ldd	r31, Y+11	; 0x0b
    2502:	09 95       	icall
    2504:	97 ff       	sbrs	r25, 7
    2506:	09 c0       	rjmp	.+18     	; 0x251a <fgetc+0x62>
    2508:	2b 81       	ldd	r18, Y+3	; 0x03
    250a:	01 96       	adiw	r24, 0x01	; 1
    250c:	11 f0       	breq	.+4      	; 0x2512 <fgetc+0x5a>
    250e:	80 e2       	ldi	r24, 0x20	; 32
    2510:	01 c0       	rjmp	.+2      	; 0x2514 <fgetc+0x5c>
    2512:	80 e1       	ldi	r24, 0x10	; 16
    2514:	82 2b       	or	r24, r18
    2516:	8b 83       	std	Y+3, r24	; 0x03
    2518:	08 c0       	rjmp	.+16     	; 0x252a <fgetc+0x72>
    251a:	2e 81       	ldd	r18, Y+6	; 0x06
    251c:	3f 81       	ldd	r19, Y+7	; 0x07
    251e:	2f 5f       	subi	r18, 0xFF	; 255
    2520:	3f 4f       	sbci	r19, 0xFF	; 255
    2522:	3f 83       	std	Y+7, r19	; 0x07
    2524:	2e 83       	std	Y+6, r18	; 0x06
    2526:	99 27       	eor	r25, r25
    2528:	02 c0       	rjmp	.+4      	; 0x252e <fgetc+0x76>
    252a:	8f ef       	ldi	r24, 0xFF	; 255
    252c:	9f ef       	ldi	r25, 0xFF	; 255
    252e:	df 91       	pop	r29
    2530:	cf 91       	pop	r28
    2532:	08 95       	ret

00002534 <printf>:
    2534:	a0 e0       	ldi	r26, 0x00	; 0
    2536:	b0 e0       	ldi	r27, 0x00	; 0
    2538:	e0 ea       	ldi	r30, 0xA0	; 160
    253a:	f2 e1       	ldi	r31, 0x12	; 18
    253c:	0c 94 8a 15 	jmp	0x2b14	; 0x2b14 <__prologue_saves__+0x20>
    2540:	ae 01       	movw	r20, r28
    2542:	4b 5f       	subi	r20, 0xFB	; 251
    2544:	5f 4f       	sbci	r21, 0xFF	; 255
    2546:	fa 01       	movw	r30, r20
    2548:	61 91       	ld	r22, Z+
    254a:	71 91       	ld	r23, Z+
    254c:	af 01       	movw	r20, r30
    254e:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <__iob+0x2>
    2552:	90 91 dd 02 	lds	r25, 0x02DD	; 0x8002dd <__iob+0x3>
    2556:	0e 94 d6 12 	call	0x25ac	; 0x25ac <vfprintf>
    255a:	e2 e0       	ldi	r30, 0x02	; 2
    255c:	0c 94 a6 15 	jmp	0x2b4c	; 0x2b4c <__epilogue_restores__+0x20>

00002560 <printf_P>:
    2560:	a0 e0       	ldi	r26, 0x00	; 0
    2562:	b0 e0       	ldi	r27, 0x00	; 0
    2564:	e6 eb       	ldi	r30, 0xB6	; 182
    2566:	f2 e1       	ldi	r31, 0x12	; 18
    2568:	0c 94 88 15 	jmp	0x2b10	; 0x2b10 <__prologue_saves__+0x1c>
    256c:	ae 01       	movw	r20, r28
    256e:	49 5f       	subi	r20, 0xF9	; 249
    2570:	5f 4f       	sbci	r21, 0xFF	; 255
    2572:	da 01       	movw	r26, r20
    2574:	6d 91       	ld	r22, X+
    2576:	7d 91       	ld	r23, X+
    2578:	ad 01       	movw	r20, r26
    257a:	0a ed       	ldi	r16, 0xDA	; 218
    257c:	12 e0       	ldi	r17, 0x02	; 2
    257e:	f8 01       	movw	r30, r16
    2580:	82 81       	ldd	r24, Z+2	; 0x02
    2582:	93 81       	ldd	r25, Z+3	; 0x03
    2584:	dc 01       	movw	r26, r24
    2586:	13 96       	adiw	r26, 0x03	; 3
    2588:	2c 91       	ld	r18, X
    258a:	13 97       	sbiw	r26, 0x03	; 3
    258c:	28 60       	ori	r18, 0x08	; 8
    258e:	13 96       	adiw	r26, 0x03	; 3
    2590:	2c 93       	st	X, r18
    2592:	0e 94 d6 12 	call	0x25ac	; 0x25ac <vfprintf>
    2596:	d8 01       	movw	r26, r16
    2598:	12 96       	adiw	r26, 0x02	; 2
    259a:	ed 91       	ld	r30, X+
    259c:	fc 91       	ld	r31, X
    259e:	13 97       	sbiw	r26, 0x03	; 3
    25a0:	23 81       	ldd	r18, Z+3	; 0x03
    25a2:	27 7f       	andi	r18, 0xF7	; 247
    25a4:	23 83       	std	Z+3, r18	; 0x03
    25a6:	e4 e0       	ldi	r30, 0x04	; 4
    25a8:	0c 94 a4 15 	jmp	0x2b48	; 0x2b48 <__epilogue_restores__+0x1c>

000025ac <vfprintf>:
    25ac:	ab e0       	ldi	r26, 0x0B	; 11
    25ae:	b0 e0       	ldi	r27, 0x00	; 0
    25b0:	ec ed       	ldi	r30, 0xDC	; 220
    25b2:	f2 e1       	ldi	r31, 0x12	; 18
    25b4:	0c 94 7a 15 	jmp	0x2af4	; 0x2af4 <__prologue_saves__>
    25b8:	6c 01       	movw	r12, r24
    25ba:	7b 01       	movw	r14, r22
    25bc:	8a 01       	movw	r16, r20
    25be:	fc 01       	movw	r30, r24
    25c0:	17 82       	std	Z+7, r1	; 0x07
    25c2:	16 82       	std	Z+6, r1	; 0x06
    25c4:	83 81       	ldd	r24, Z+3	; 0x03
    25c6:	81 ff       	sbrs	r24, 1
    25c8:	cc c1       	rjmp	.+920    	; 0x2962 <vfprintf+0x3b6>
    25ca:	ce 01       	movw	r24, r28
    25cc:	01 96       	adiw	r24, 0x01	; 1
    25ce:	3c 01       	movw	r6, r24
    25d0:	f6 01       	movw	r30, r12
    25d2:	93 81       	ldd	r25, Z+3	; 0x03
    25d4:	f7 01       	movw	r30, r14
    25d6:	93 fd       	sbrc	r25, 3
    25d8:	85 91       	lpm	r24, Z+
    25da:	93 ff       	sbrs	r25, 3
    25dc:	81 91       	ld	r24, Z+
    25de:	7f 01       	movw	r14, r30
    25e0:	88 23       	and	r24, r24
    25e2:	09 f4       	brne	.+2      	; 0x25e6 <vfprintf+0x3a>
    25e4:	ba c1       	rjmp	.+884    	; 0x295a <vfprintf+0x3ae>
    25e6:	85 32       	cpi	r24, 0x25	; 37
    25e8:	39 f4       	brne	.+14     	; 0x25f8 <vfprintf+0x4c>
    25ea:	93 fd       	sbrc	r25, 3
    25ec:	85 91       	lpm	r24, Z+
    25ee:	93 ff       	sbrs	r25, 3
    25f0:	81 91       	ld	r24, Z+
    25f2:	7f 01       	movw	r14, r30
    25f4:	85 32       	cpi	r24, 0x25	; 37
    25f6:	29 f4       	brne	.+10     	; 0x2602 <vfprintf+0x56>
    25f8:	b6 01       	movw	r22, r12
    25fa:	90 e0       	ldi	r25, 0x00	; 0
    25fc:	0e 94 cd 14 	call	0x299a	; 0x299a <fputc>
    2600:	e7 cf       	rjmp	.-50     	; 0x25d0 <vfprintf+0x24>
    2602:	91 2c       	mov	r9, r1
    2604:	21 2c       	mov	r2, r1
    2606:	31 2c       	mov	r3, r1
    2608:	ff e1       	ldi	r31, 0x1F	; 31
    260a:	f3 15       	cp	r31, r3
    260c:	d8 f0       	brcs	.+54     	; 0x2644 <vfprintf+0x98>
    260e:	8b 32       	cpi	r24, 0x2B	; 43
    2610:	79 f0       	breq	.+30     	; 0x2630 <vfprintf+0x84>
    2612:	38 f4       	brcc	.+14     	; 0x2622 <vfprintf+0x76>
    2614:	80 32       	cpi	r24, 0x20	; 32
    2616:	79 f0       	breq	.+30     	; 0x2636 <vfprintf+0x8a>
    2618:	83 32       	cpi	r24, 0x23	; 35
    261a:	a1 f4       	brne	.+40     	; 0x2644 <vfprintf+0x98>
    261c:	23 2d       	mov	r18, r3
    261e:	20 61       	ori	r18, 0x10	; 16
    2620:	1d c0       	rjmp	.+58     	; 0x265c <vfprintf+0xb0>
    2622:	8d 32       	cpi	r24, 0x2D	; 45
    2624:	61 f0       	breq	.+24     	; 0x263e <vfprintf+0x92>
    2626:	80 33       	cpi	r24, 0x30	; 48
    2628:	69 f4       	brne	.+26     	; 0x2644 <vfprintf+0x98>
    262a:	23 2d       	mov	r18, r3
    262c:	21 60       	ori	r18, 0x01	; 1
    262e:	16 c0       	rjmp	.+44     	; 0x265c <vfprintf+0xb0>
    2630:	83 2d       	mov	r24, r3
    2632:	82 60       	ori	r24, 0x02	; 2
    2634:	38 2e       	mov	r3, r24
    2636:	e3 2d       	mov	r30, r3
    2638:	e4 60       	ori	r30, 0x04	; 4
    263a:	3e 2e       	mov	r3, r30
    263c:	2a c0       	rjmp	.+84     	; 0x2692 <vfprintf+0xe6>
    263e:	f3 2d       	mov	r31, r3
    2640:	f8 60       	ori	r31, 0x08	; 8
    2642:	1d c0       	rjmp	.+58     	; 0x267e <vfprintf+0xd2>
    2644:	37 fc       	sbrc	r3, 7
    2646:	2d c0       	rjmp	.+90     	; 0x26a2 <vfprintf+0xf6>
    2648:	20 ed       	ldi	r18, 0xD0	; 208
    264a:	28 0f       	add	r18, r24
    264c:	2a 30       	cpi	r18, 0x0A	; 10
    264e:	40 f0       	brcs	.+16     	; 0x2660 <vfprintf+0xb4>
    2650:	8e 32       	cpi	r24, 0x2E	; 46
    2652:	b9 f4       	brne	.+46     	; 0x2682 <vfprintf+0xd6>
    2654:	36 fc       	sbrc	r3, 6
    2656:	81 c1       	rjmp	.+770    	; 0x295a <vfprintf+0x3ae>
    2658:	23 2d       	mov	r18, r3
    265a:	20 64       	ori	r18, 0x40	; 64
    265c:	32 2e       	mov	r3, r18
    265e:	19 c0       	rjmp	.+50     	; 0x2692 <vfprintf+0xe6>
    2660:	36 fe       	sbrs	r3, 6
    2662:	06 c0       	rjmp	.+12     	; 0x2670 <vfprintf+0xc4>
    2664:	8a e0       	ldi	r24, 0x0A	; 10
    2666:	98 9e       	mul	r9, r24
    2668:	20 0d       	add	r18, r0
    266a:	11 24       	eor	r1, r1
    266c:	92 2e       	mov	r9, r18
    266e:	11 c0       	rjmp	.+34     	; 0x2692 <vfprintf+0xe6>
    2670:	ea e0       	ldi	r30, 0x0A	; 10
    2672:	2e 9e       	mul	r2, r30
    2674:	20 0d       	add	r18, r0
    2676:	11 24       	eor	r1, r1
    2678:	22 2e       	mov	r2, r18
    267a:	f3 2d       	mov	r31, r3
    267c:	f0 62       	ori	r31, 0x20	; 32
    267e:	3f 2e       	mov	r3, r31
    2680:	08 c0       	rjmp	.+16     	; 0x2692 <vfprintf+0xe6>
    2682:	8c 36       	cpi	r24, 0x6C	; 108
    2684:	21 f4       	brne	.+8      	; 0x268e <vfprintf+0xe2>
    2686:	83 2d       	mov	r24, r3
    2688:	80 68       	ori	r24, 0x80	; 128
    268a:	38 2e       	mov	r3, r24
    268c:	02 c0       	rjmp	.+4      	; 0x2692 <vfprintf+0xe6>
    268e:	88 36       	cpi	r24, 0x68	; 104
    2690:	41 f4       	brne	.+16     	; 0x26a2 <vfprintf+0xf6>
    2692:	f7 01       	movw	r30, r14
    2694:	93 fd       	sbrc	r25, 3
    2696:	85 91       	lpm	r24, Z+
    2698:	93 ff       	sbrs	r25, 3
    269a:	81 91       	ld	r24, Z+
    269c:	7f 01       	movw	r14, r30
    269e:	81 11       	cpse	r24, r1
    26a0:	b3 cf       	rjmp	.-154    	; 0x2608 <vfprintf+0x5c>
    26a2:	98 2f       	mov	r25, r24
    26a4:	9f 7d       	andi	r25, 0xDF	; 223
    26a6:	95 54       	subi	r25, 0x45	; 69
    26a8:	93 30       	cpi	r25, 0x03	; 3
    26aa:	28 f4       	brcc	.+10     	; 0x26b6 <vfprintf+0x10a>
    26ac:	0c 5f       	subi	r16, 0xFC	; 252
    26ae:	1f 4f       	sbci	r17, 0xFF	; 255
    26b0:	9f e3       	ldi	r25, 0x3F	; 63
    26b2:	99 83       	std	Y+1, r25	; 0x01
    26b4:	0d c0       	rjmp	.+26     	; 0x26d0 <vfprintf+0x124>
    26b6:	83 36       	cpi	r24, 0x63	; 99
    26b8:	31 f0       	breq	.+12     	; 0x26c6 <vfprintf+0x11a>
    26ba:	83 37       	cpi	r24, 0x73	; 115
    26bc:	71 f0       	breq	.+28     	; 0x26da <vfprintf+0x12e>
    26be:	83 35       	cpi	r24, 0x53	; 83
    26c0:	09 f0       	breq	.+2      	; 0x26c4 <vfprintf+0x118>
    26c2:	59 c0       	rjmp	.+178    	; 0x2776 <vfprintf+0x1ca>
    26c4:	21 c0       	rjmp	.+66     	; 0x2708 <vfprintf+0x15c>
    26c6:	f8 01       	movw	r30, r16
    26c8:	80 81       	ld	r24, Z
    26ca:	89 83       	std	Y+1, r24	; 0x01
    26cc:	0e 5f       	subi	r16, 0xFE	; 254
    26ce:	1f 4f       	sbci	r17, 0xFF	; 255
    26d0:	88 24       	eor	r8, r8
    26d2:	83 94       	inc	r8
    26d4:	91 2c       	mov	r9, r1
    26d6:	53 01       	movw	r10, r6
    26d8:	13 c0       	rjmp	.+38     	; 0x2700 <vfprintf+0x154>
    26da:	28 01       	movw	r4, r16
    26dc:	f2 e0       	ldi	r31, 0x02	; 2
    26de:	4f 0e       	add	r4, r31
    26e0:	51 1c       	adc	r5, r1
    26e2:	f8 01       	movw	r30, r16
    26e4:	a0 80       	ld	r10, Z
    26e6:	b1 80       	ldd	r11, Z+1	; 0x01
    26e8:	36 fe       	sbrs	r3, 6
    26ea:	03 c0       	rjmp	.+6      	; 0x26f2 <vfprintf+0x146>
    26ec:	69 2d       	mov	r22, r9
    26ee:	70 e0       	ldi	r23, 0x00	; 0
    26f0:	02 c0       	rjmp	.+4      	; 0x26f6 <vfprintf+0x14a>
    26f2:	6f ef       	ldi	r22, 0xFF	; 255
    26f4:	7f ef       	ldi	r23, 0xFF	; 255
    26f6:	c5 01       	movw	r24, r10
    26f8:	0e 94 c2 14 	call	0x2984	; 0x2984 <strnlen>
    26fc:	4c 01       	movw	r8, r24
    26fe:	82 01       	movw	r16, r4
    2700:	f3 2d       	mov	r31, r3
    2702:	ff 77       	andi	r31, 0x7F	; 127
    2704:	3f 2e       	mov	r3, r31
    2706:	16 c0       	rjmp	.+44     	; 0x2734 <vfprintf+0x188>
    2708:	28 01       	movw	r4, r16
    270a:	22 e0       	ldi	r18, 0x02	; 2
    270c:	42 0e       	add	r4, r18
    270e:	51 1c       	adc	r5, r1
    2710:	f8 01       	movw	r30, r16
    2712:	a0 80       	ld	r10, Z
    2714:	b1 80       	ldd	r11, Z+1	; 0x01
    2716:	36 fe       	sbrs	r3, 6
    2718:	03 c0       	rjmp	.+6      	; 0x2720 <vfprintf+0x174>
    271a:	69 2d       	mov	r22, r9
    271c:	70 e0       	ldi	r23, 0x00	; 0
    271e:	02 c0       	rjmp	.+4      	; 0x2724 <vfprintf+0x178>
    2720:	6f ef       	ldi	r22, 0xFF	; 255
    2722:	7f ef       	ldi	r23, 0xFF	; 255
    2724:	c5 01       	movw	r24, r10
    2726:	0e 94 b7 14 	call	0x296e	; 0x296e <strnlen_P>
    272a:	4c 01       	movw	r8, r24
    272c:	f3 2d       	mov	r31, r3
    272e:	f0 68       	ori	r31, 0x80	; 128
    2730:	3f 2e       	mov	r3, r31
    2732:	82 01       	movw	r16, r4
    2734:	33 fc       	sbrc	r3, 3
    2736:	1b c0       	rjmp	.+54     	; 0x276e <vfprintf+0x1c2>
    2738:	82 2d       	mov	r24, r2
    273a:	90 e0       	ldi	r25, 0x00	; 0
    273c:	88 16       	cp	r8, r24
    273e:	99 06       	cpc	r9, r25
    2740:	b0 f4       	brcc	.+44     	; 0x276e <vfprintf+0x1c2>
    2742:	b6 01       	movw	r22, r12
    2744:	80 e2       	ldi	r24, 0x20	; 32
    2746:	90 e0       	ldi	r25, 0x00	; 0
    2748:	0e 94 cd 14 	call	0x299a	; 0x299a <fputc>
    274c:	2a 94       	dec	r2
    274e:	f4 cf       	rjmp	.-24     	; 0x2738 <vfprintf+0x18c>
    2750:	f5 01       	movw	r30, r10
    2752:	37 fc       	sbrc	r3, 7
    2754:	85 91       	lpm	r24, Z+
    2756:	37 fe       	sbrs	r3, 7
    2758:	81 91       	ld	r24, Z+
    275a:	5f 01       	movw	r10, r30
    275c:	b6 01       	movw	r22, r12
    275e:	90 e0       	ldi	r25, 0x00	; 0
    2760:	0e 94 cd 14 	call	0x299a	; 0x299a <fputc>
    2764:	21 10       	cpse	r2, r1
    2766:	2a 94       	dec	r2
    2768:	21 e0       	ldi	r18, 0x01	; 1
    276a:	82 1a       	sub	r8, r18
    276c:	91 08       	sbc	r9, r1
    276e:	81 14       	cp	r8, r1
    2770:	91 04       	cpc	r9, r1
    2772:	71 f7       	brne	.-36     	; 0x2750 <vfprintf+0x1a4>
    2774:	e8 c0       	rjmp	.+464    	; 0x2946 <vfprintf+0x39a>
    2776:	84 36       	cpi	r24, 0x64	; 100
    2778:	11 f0       	breq	.+4      	; 0x277e <vfprintf+0x1d2>
    277a:	89 36       	cpi	r24, 0x69	; 105
    277c:	41 f5       	brne	.+80     	; 0x27ce <vfprintf+0x222>
    277e:	f8 01       	movw	r30, r16
    2780:	37 fe       	sbrs	r3, 7
    2782:	07 c0       	rjmp	.+14     	; 0x2792 <vfprintf+0x1e6>
    2784:	60 81       	ld	r22, Z
    2786:	71 81       	ldd	r23, Z+1	; 0x01
    2788:	82 81       	ldd	r24, Z+2	; 0x02
    278a:	93 81       	ldd	r25, Z+3	; 0x03
    278c:	0c 5f       	subi	r16, 0xFC	; 252
    278e:	1f 4f       	sbci	r17, 0xFF	; 255
    2790:	08 c0       	rjmp	.+16     	; 0x27a2 <vfprintf+0x1f6>
    2792:	60 81       	ld	r22, Z
    2794:	71 81       	ldd	r23, Z+1	; 0x01
    2796:	07 2e       	mov	r0, r23
    2798:	00 0c       	add	r0, r0
    279a:	88 0b       	sbc	r24, r24
    279c:	99 0b       	sbc	r25, r25
    279e:	0e 5f       	subi	r16, 0xFE	; 254
    27a0:	1f 4f       	sbci	r17, 0xFF	; 255
    27a2:	f3 2d       	mov	r31, r3
    27a4:	ff 76       	andi	r31, 0x6F	; 111
    27a6:	3f 2e       	mov	r3, r31
    27a8:	97 ff       	sbrs	r25, 7
    27aa:	09 c0       	rjmp	.+18     	; 0x27be <vfprintf+0x212>
    27ac:	90 95       	com	r25
    27ae:	80 95       	com	r24
    27b0:	70 95       	com	r23
    27b2:	61 95       	neg	r22
    27b4:	7f 4f       	sbci	r23, 0xFF	; 255
    27b6:	8f 4f       	sbci	r24, 0xFF	; 255
    27b8:	9f 4f       	sbci	r25, 0xFF	; 255
    27ba:	f0 68       	ori	r31, 0x80	; 128
    27bc:	3f 2e       	mov	r3, r31
    27be:	2a e0       	ldi	r18, 0x0A	; 10
    27c0:	30 e0       	ldi	r19, 0x00	; 0
    27c2:	a3 01       	movw	r20, r6
    27c4:	0e 94 09 15 	call	0x2a12	; 0x2a12 <__ultoa_invert>
    27c8:	88 2e       	mov	r8, r24
    27ca:	86 18       	sub	r8, r6
    27cc:	45 c0       	rjmp	.+138    	; 0x2858 <vfprintf+0x2ac>
    27ce:	85 37       	cpi	r24, 0x75	; 117
    27d0:	31 f4       	brne	.+12     	; 0x27de <vfprintf+0x232>
    27d2:	23 2d       	mov	r18, r3
    27d4:	2f 7e       	andi	r18, 0xEF	; 239
    27d6:	b2 2e       	mov	r11, r18
    27d8:	2a e0       	ldi	r18, 0x0A	; 10
    27da:	30 e0       	ldi	r19, 0x00	; 0
    27dc:	25 c0       	rjmp	.+74     	; 0x2828 <vfprintf+0x27c>
    27de:	93 2d       	mov	r25, r3
    27e0:	99 7f       	andi	r25, 0xF9	; 249
    27e2:	b9 2e       	mov	r11, r25
    27e4:	8f 36       	cpi	r24, 0x6F	; 111
    27e6:	c1 f0       	breq	.+48     	; 0x2818 <vfprintf+0x26c>
    27e8:	18 f4       	brcc	.+6      	; 0x27f0 <vfprintf+0x244>
    27ea:	88 35       	cpi	r24, 0x58	; 88
    27ec:	79 f0       	breq	.+30     	; 0x280c <vfprintf+0x260>
    27ee:	b5 c0       	rjmp	.+362    	; 0x295a <vfprintf+0x3ae>
    27f0:	80 37       	cpi	r24, 0x70	; 112
    27f2:	19 f0       	breq	.+6      	; 0x27fa <vfprintf+0x24e>
    27f4:	88 37       	cpi	r24, 0x78	; 120
    27f6:	21 f0       	breq	.+8      	; 0x2800 <vfprintf+0x254>
    27f8:	b0 c0       	rjmp	.+352    	; 0x295a <vfprintf+0x3ae>
    27fa:	e9 2f       	mov	r30, r25
    27fc:	e0 61       	ori	r30, 0x10	; 16
    27fe:	be 2e       	mov	r11, r30
    2800:	b4 fe       	sbrs	r11, 4
    2802:	0d c0       	rjmp	.+26     	; 0x281e <vfprintf+0x272>
    2804:	fb 2d       	mov	r31, r11
    2806:	f4 60       	ori	r31, 0x04	; 4
    2808:	bf 2e       	mov	r11, r31
    280a:	09 c0       	rjmp	.+18     	; 0x281e <vfprintf+0x272>
    280c:	34 fe       	sbrs	r3, 4
    280e:	0a c0       	rjmp	.+20     	; 0x2824 <vfprintf+0x278>
    2810:	29 2f       	mov	r18, r25
    2812:	26 60       	ori	r18, 0x06	; 6
    2814:	b2 2e       	mov	r11, r18
    2816:	06 c0       	rjmp	.+12     	; 0x2824 <vfprintf+0x278>
    2818:	28 e0       	ldi	r18, 0x08	; 8
    281a:	30 e0       	ldi	r19, 0x00	; 0
    281c:	05 c0       	rjmp	.+10     	; 0x2828 <vfprintf+0x27c>
    281e:	20 e1       	ldi	r18, 0x10	; 16
    2820:	30 e0       	ldi	r19, 0x00	; 0
    2822:	02 c0       	rjmp	.+4      	; 0x2828 <vfprintf+0x27c>
    2824:	20 e1       	ldi	r18, 0x10	; 16
    2826:	32 e0       	ldi	r19, 0x02	; 2
    2828:	f8 01       	movw	r30, r16
    282a:	b7 fe       	sbrs	r11, 7
    282c:	07 c0       	rjmp	.+14     	; 0x283c <vfprintf+0x290>
    282e:	60 81       	ld	r22, Z
    2830:	71 81       	ldd	r23, Z+1	; 0x01
    2832:	82 81       	ldd	r24, Z+2	; 0x02
    2834:	93 81       	ldd	r25, Z+3	; 0x03
    2836:	0c 5f       	subi	r16, 0xFC	; 252
    2838:	1f 4f       	sbci	r17, 0xFF	; 255
    283a:	06 c0       	rjmp	.+12     	; 0x2848 <vfprintf+0x29c>
    283c:	60 81       	ld	r22, Z
    283e:	71 81       	ldd	r23, Z+1	; 0x01
    2840:	80 e0       	ldi	r24, 0x00	; 0
    2842:	90 e0       	ldi	r25, 0x00	; 0
    2844:	0e 5f       	subi	r16, 0xFE	; 254
    2846:	1f 4f       	sbci	r17, 0xFF	; 255
    2848:	a3 01       	movw	r20, r6
    284a:	0e 94 09 15 	call	0x2a12	; 0x2a12 <__ultoa_invert>
    284e:	88 2e       	mov	r8, r24
    2850:	86 18       	sub	r8, r6
    2852:	fb 2d       	mov	r31, r11
    2854:	ff 77       	andi	r31, 0x7F	; 127
    2856:	3f 2e       	mov	r3, r31
    2858:	36 fe       	sbrs	r3, 6
    285a:	0d c0       	rjmp	.+26     	; 0x2876 <vfprintf+0x2ca>
    285c:	23 2d       	mov	r18, r3
    285e:	2e 7f       	andi	r18, 0xFE	; 254
    2860:	a2 2e       	mov	r10, r18
    2862:	89 14       	cp	r8, r9
    2864:	58 f4       	brcc	.+22     	; 0x287c <vfprintf+0x2d0>
    2866:	34 fe       	sbrs	r3, 4
    2868:	0b c0       	rjmp	.+22     	; 0x2880 <vfprintf+0x2d4>
    286a:	32 fc       	sbrc	r3, 2
    286c:	09 c0       	rjmp	.+18     	; 0x2880 <vfprintf+0x2d4>
    286e:	83 2d       	mov	r24, r3
    2870:	8e 7e       	andi	r24, 0xEE	; 238
    2872:	a8 2e       	mov	r10, r24
    2874:	05 c0       	rjmp	.+10     	; 0x2880 <vfprintf+0x2d4>
    2876:	b8 2c       	mov	r11, r8
    2878:	a3 2c       	mov	r10, r3
    287a:	03 c0       	rjmp	.+6      	; 0x2882 <vfprintf+0x2d6>
    287c:	b8 2c       	mov	r11, r8
    287e:	01 c0       	rjmp	.+2      	; 0x2882 <vfprintf+0x2d6>
    2880:	b9 2c       	mov	r11, r9
    2882:	a4 fe       	sbrs	r10, 4
    2884:	0f c0       	rjmp	.+30     	; 0x28a4 <vfprintf+0x2f8>
    2886:	fe 01       	movw	r30, r28
    2888:	e8 0d       	add	r30, r8
    288a:	f1 1d       	adc	r31, r1
    288c:	80 81       	ld	r24, Z
    288e:	80 33       	cpi	r24, 0x30	; 48
    2890:	21 f4       	brne	.+8      	; 0x289a <vfprintf+0x2ee>
    2892:	9a 2d       	mov	r25, r10
    2894:	99 7e       	andi	r25, 0xE9	; 233
    2896:	a9 2e       	mov	r10, r25
    2898:	09 c0       	rjmp	.+18     	; 0x28ac <vfprintf+0x300>
    289a:	a2 fe       	sbrs	r10, 2
    289c:	06 c0       	rjmp	.+12     	; 0x28aa <vfprintf+0x2fe>
    289e:	b3 94       	inc	r11
    28a0:	b3 94       	inc	r11
    28a2:	04 c0       	rjmp	.+8      	; 0x28ac <vfprintf+0x300>
    28a4:	8a 2d       	mov	r24, r10
    28a6:	86 78       	andi	r24, 0x86	; 134
    28a8:	09 f0       	breq	.+2      	; 0x28ac <vfprintf+0x300>
    28aa:	b3 94       	inc	r11
    28ac:	a3 fc       	sbrc	r10, 3
    28ae:	11 c0       	rjmp	.+34     	; 0x28d2 <vfprintf+0x326>
    28b0:	a0 fe       	sbrs	r10, 0
    28b2:	06 c0       	rjmp	.+12     	; 0x28c0 <vfprintf+0x314>
    28b4:	b2 14       	cp	r11, r2
    28b6:	88 f4       	brcc	.+34     	; 0x28da <vfprintf+0x32e>
    28b8:	28 0c       	add	r2, r8
    28ba:	92 2c       	mov	r9, r2
    28bc:	9b 18       	sub	r9, r11
    28be:	0e c0       	rjmp	.+28     	; 0x28dc <vfprintf+0x330>
    28c0:	b2 14       	cp	r11, r2
    28c2:	60 f4       	brcc	.+24     	; 0x28dc <vfprintf+0x330>
    28c4:	b6 01       	movw	r22, r12
    28c6:	80 e2       	ldi	r24, 0x20	; 32
    28c8:	90 e0       	ldi	r25, 0x00	; 0
    28ca:	0e 94 cd 14 	call	0x299a	; 0x299a <fputc>
    28ce:	b3 94       	inc	r11
    28d0:	f7 cf       	rjmp	.-18     	; 0x28c0 <vfprintf+0x314>
    28d2:	b2 14       	cp	r11, r2
    28d4:	18 f4       	brcc	.+6      	; 0x28dc <vfprintf+0x330>
    28d6:	2b 18       	sub	r2, r11
    28d8:	02 c0       	rjmp	.+4      	; 0x28de <vfprintf+0x332>
    28da:	98 2c       	mov	r9, r8
    28dc:	21 2c       	mov	r2, r1
    28de:	a4 fe       	sbrs	r10, 4
    28e0:	10 c0       	rjmp	.+32     	; 0x2902 <vfprintf+0x356>
    28e2:	b6 01       	movw	r22, r12
    28e4:	80 e3       	ldi	r24, 0x30	; 48
    28e6:	90 e0       	ldi	r25, 0x00	; 0
    28e8:	0e 94 cd 14 	call	0x299a	; 0x299a <fputc>
    28ec:	a2 fe       	sbrs	r10, 2
    28ee:	17 c0       	rjmp	.+46     	; 0x291e <vfprintf+0x372>
    28f0:	a1 fc       	sbrc	r10, 1
    28f2:	03 c0       	rjmp	.+6      	; 0x28fa <vfprintf+0x34e>
    28f4:	88 e7       	ldi	r24, 0x78	; 120
    28f6:	90 e0       	ldi	r25, 0x00	; 0
    28f8:	02 c0       	rjmp	.+4      	; 0x28fe <vfprintf+0x352>
    28fa:	88 e5       	ldi	r24, 0x58	; 88
    28fc:	90 e0       	ldi	r25, 0x00	; 0
    28fe:	b6 01       	movw	r22, r12
    2900:	0c c0       	rjmp	.+24     	; 0x291a <vfprintf+0x36e>
    2902:	8a 2d       	mov	r24, r10
    2904:	86 78       	andi	r24, 0x86	; 134
    2906:	59 f0       	breq	.+22     	; 0x291e <vfprintf+0x372>
    2908:	a1 fe       	sbrs	r10, 1
    290a:	02 c0       	rjmp	.+4      	; 0x2910 <vfprintf+0x364>
    290c:	8b e2       	ldi	r24, 0x2B	; 43
    290e:	01 c0       	rjmp	.+2      	; 0x2912 <vfprintf+0x366>
    2910:	80 e2       	ldi	r24, 0x20	; 32
    2912:	a7 fc       	sbrc	r10, 7
    2914:	8d e2       	ldi	r24, 0x2D	; 45
    2916:	b6 01       	movw	r22, r12
    2918:	90 e0       	ldi	r25, 0x00	; 0
    291a:	0e 94 cd 14 	call	0x299a	; 0x299a <fputc>
    291e:	89 14       	cp	r8, r9
    2920:	38 f4       	brcc	.+14     	; 0x2930 <vfprintf+0x384>
    2922:	b6 01       	movw	r22, r12
    2924:	80 e3       	ldi	r24, 0x30	; 48
    2926:	90 e0       	ldi	r25, 0x00	; 0
    2928:	0e 94 cd 14 	call	0x299a	; 0x299a <fputc>
    292c:	9a 94       	dec	r9
    292e:	f7 cf       	rjmp	.-18     	; 0x291e <vfprintf+0x372>
    2930:	8a 94       	dec	r8
    2932:	f3 01       	movw	r30, r6
    2934:	e8 0d       	add	r30, r8
    2936:	f1 1d       	adc	r31, r1
    2938:	80 81       	ld	r24, Z
    293a:	b6 01       	movw	r22, r12
    293c:	90 e0       	ldi	r25, 0x00	; 0
    293e:	0e 94 cd 14 	call	0x299a	; 0x299a <fputc>
    2942:	81 10       	cpse	r8, r1
    2944:	f5 cf       	rjmp	.-22     	; 0x2930 <vfprintf+0x384>
    2946:	22 20       	and	r2, r2
    2948:	09 f4       	brne	.+2      	; 0x294c <vfprintf+0x3a0>
    294a:	42 ce       	rjmp	.-892    	; 0x25d0 <vfprintf+0x24>
    294c:	b6 01       	movw	r22, r12
    294e:	80 e2       	ldi	r24, 0x20	; 32
    2950:	90 e0       	ldi	r25, 0x00	; 0
    2952:	0e 94 cd 14 	call	0x299a	; 0x299a <fputc>
    2956:	2a 94       	dec	r2
    2958:	f6 cf       	rjmp	.-20     	; 0x2946 <vfprintf+0x39a>
    295a:	f6 01       	movw	r30, r12
    295c:	86 81       	ldd	r24, Z+6	; 0x06
    295e:	97 81       	ldd	r25, Z+7	; 0x07
    2960:	02 c0       	rjmp	.+4      	; 0x2966 <vfprintf+0x3ba>
    2962:	8f ef       	ldi	r24, 0xFF	; 255
    2964:	9f ef       	ldi	r25, 0xFF	; 255
    2966:	2b 96       	adiw	r28, 0x0b	; 11
    2968:	e2 e1       	ldi	r30, 0x12	; 18
    296a:	0c 94 96 15 	jmp	0x2b2c	; 0x2b2c <__epilogue_restores__>

0000296e <strnlen_P>:
    296e:	fc 01       	movw	r30, r24
    2970:	05 90       	lpm	r0, Z+
    2972:	61 50       	subi	r22, 0x01	; 1
    2974:	70 40       	sbci	r23, 0x00	; 0
    2976:	01 10       	cpse	r0, r1
    2978:	d8 f7       	brcc	.-10     	; 0x2970 <strnlen_P+0x2>
    297a:	80 95       	com	r24
    297c:	90 95       	com	r25
    297e:	8e 0f       	add	r24, r30
    2980:	9f 1f       	adc	r25, r31
    2982:	08 95       	ret

00002984 <strnlen>:
    2984:	fc 01       	movw	r30, r24
    2986:	61 50       	subi	r22, 0x01	; 1
    2988:	70 40       	sbci	r23, 0x00	; 0
    298a:	01 90       	ld	r0, Z+
    298c:	01 10       	cpse	r0, r1
    298e:	d8 f7       	brcc	.-10     	; 0x2986 <strnlen+0x2>
    2990:	80 95       	com	r24
    2992:	90 95       	com	r25
    2994:	8e 0f       	add	r24, r30
    2996:	9f 1f       	adc	r25, r31
    2998:	08 95       	ret

0000299a <fputc>:
    299a:	0f 93       	push	r16
    299c:	1f 93       	push	r17
    299e:	cf 93       	push	r28
    29a0:	df 93       	push	r29
    29a2:	fb 01       	movw	r30, r22
    29a4:	23 81       	ldd	r18, Z+3	; 0x03
    29a6:	21 fd       	sbrc	r18, 1
    29a8:	03 c0       	rjmp	.+6      	; 0x29b0 <fputc+0x16>
    29aa:	8f ef       	ldi	r24, 0xFF	; 255
    29ac:	9f ef       	ldi	r25, 0xFF	; 255
    29ae:	2c c0       	rjmp	.+88     	; 0x2a08 <fputc+0x6e>
    29b0:	22 ff       	sbrs	r18, 2
    29b2:	16 c0       	rjmp	.+44     	; 0x29e0 <fputc+0x46>
    29b4:	46 81       	ldd	r20, Z+6	; 0x06
    29b6:	57 81       	ldd	r21, Z+7	; 0x07
    29b8:	24 81       	ldd	r18, Z+4	; 0x04
    29ba:	35 81       	ldd	r19, Z+5	; 0x05
    29bc:	42 17       	cp	r20, r18
    29be:	53 07       	cpc	r21, r19
    29c0:	44 f4       	brge	.+16     	; 0x29d2 <fputc+0x38>
    29c2:	a0 81       	ld	r26, Z
    29c4:	b1 81       	ldd	r27, Z+1	; 0x01
    29c6:	9d 01       	movw	r18, r26
    29c8:	2f 5f       	subi	r18, 0xFF	; 255
    29ca:	3f 4f       	sbci	r19, 0xFF	; 255
    29cc:	31 83       	std	Z+1, r19	; 0x01
    29ce:	20 83       	st	Z, r18
    29d0:	8c 93       	st	X, r24
    29d2:	26 81       	ldd	r18, Z+6	; 0x06
    29d4:	37 81       	ldd	r19, Z+7	; 0x07
    29d6:	2f 5f       	subi	r18, 0xFF	; 255
    29d8:	3f 4f       	sbci	r19, 0xFF	; 255
    29da:	37 83       	std	Z+7, r19	; 0x07
    29dc:	26 83       	std	Z+6, r18	; 0x06
    29de:	14 c0       	rjmp	.+40     	; 0x2a08 <fputc+0x6e>
    29e0:	8b 01       	movw	r16, r22
    29e2:	ec 01       	movw	r28, r24
    29e4:	fb 01       	movw	r30, r22
    29e6:	00 84       	ldd	r0, Z+8	; 0x08
    29e8:	f1 85       	ldd	r31, Z+9	; 0x09
    29ea:	e0 2d       	mov	r30, r0
    29ec:	09 95       	icall
    29ee:	89 2b       	or	r24, r25
    29f0:	e1 f6       	brne	.-72     	; 0x29aa <fputc+0x10>
    29f2:	d8 01       	movw	r26, r16
    29f4:	16 96       	adiw	r26, 0x06	; 6
    29f6:	8d 91       	ld	r24, X+
    29f8:	9c 91       	ld	r25, X
    29fa:	17 97       	sbiw	r26, 0x07	; 7
    29fc:	01 96       	adiw	r24, 0x01	; 1
    29fe:	17 96       	adiw	r26, 0x07	; 7
    2a00:	9c 93       	st	X, r25
    2a02:	8e 93       	st	-X, r24
    2a04:	16 97       	sbiw	r26, 0x06	; 6
    2a06:	ce 01       	movw	r24, r28
    2a08:	df 91       	pop	r29
    2a0a:	cf 91       	pop	r28
    2a0c:	1f 91       	pop	r17
    2a0e:	0f 91       	pop	r16
    2a10:	08 95       	ret

00002a12 <__ultoa_invert>:
    2a12:	fa 01       	movw	r30, r20
    2a14:	aa 27       	eor	r26, r26
    2a16:	28 30       	cpi	r18, 0x08	; 8
    2a18:	51 f1       	breq	.+84     	; 0x2a6e <__ultoa_invert+0x5c>
    2a1a:	20 31       	cpi	r18, 0x10	; 16
    2a1c:	81 f1       	breq	.+96     	; 0x2a7e <__ultoa_invert+0x6c>
    2a1e:	e8 94       	clt
    2a20:	6f 93       	push	r22
    2a22:	6e 7f       	andi	r22, 0xFE	; 254
    2a24:	6e 5f       	subi	r22, 0xFE	; 254
    2a26:	7f 4f       	sbci	r23, 0xFF	; 255
    2a28:	8f 4f       	sbci	r24, 0xFF	; 255
    2a2a:	9f 4f       	sbci	r25, 0xFF	; 255
    2a2c:	af 4f       	sbci	r26, 0xFF	; 255
    2a2e:	b1 e0       	ldi	r27, 0x01	; 1
    2a30:	3e d0       	rcall	.+124    	; 0x2aae <__ultoa_invert+0x9c>
    2a32:	b4 e0       	ldi	r27, 0x04	; 4
    2a34:	3c d0       	rcall	.+120    	; 0x2aae <__ultoa_invert+0x9c>
    2a36:	67 0f       	add	r22, r23
    2a38:	78 1f       	adc	r23, r24
    2a3a:	89 1f       	adc	r24, r25
    2a3c:	9a 1f       	adc	r25, r26
    2a3e:	a1 1d       	adc	r26, r1
    2a40:	68 0f       	add	r22, r24
    2a42:	79 1f       	adc	r23, r25
    2a44:	8a 1f       	adc	r24, r26
    2a46:	91 1d       	adc	r25, r1
    2a48:	a1 1d       	adc	r26, r1
    2a4a:	6a 0f       	add	r22, r26
    2a4c:	71 1d       	adc	r23, r1
    2a4e:	81 1d       	adc	r24, r1
    2a50:	91 1d       	adc	r25, r1
    2a52:	a1 1d       	adc	r26, r1
    2a54:	20 d0       	rcall	.+64     	; 0x2a96 <__ultoa_invert+0x84>
    2a56:	09 f4       	brne	.+2      	; 0x2a5a <__ultoa_invert+0x48>
    2a58:	68 94       	set
    2a5a:	3f 91       	pop	r19
    2a5c:	2a e0       	ldi	r18, 0x0A	; 10
    2a5e:	26 9f       	mul	r18, r22
    2a60:	11 24       	eor	r1, r1
    2a62:	30 19       	sub	r19, r0
    2a64:	30 5d       	subi	r19, 0xD0	; 208
    2a66:	31 93       	st	Z+, r19
    2a68:	de f6       	brtc	.-74     	; 0x2a20 <__ultoa_invert+0xe>
    2a6a:	cf 01       	movw	r24, r30
    2a6c:	08 95       	ret
    2a6e:	46 2f       	mov	r20, r22
    2a70:	47 70       	andi	r20, 0x07	; 7
    2a72:	40 5d       	subi	r20, 0xD0	; 208
    2a74:	41 93       	st	Z+, r20
    2a76:	b3 e0       	ldi	r27, 0x03	; 3
    2a78:	0f d0       	rcall	.+30     	; 0x2a98 <__ultoa_invert+0x86>
    2a7a:	c9 f7       	brne	.-14     	; 0x2a6e <__ultoa_invert+0x5c>
    2a7c:	f6 cf       	rjmp	.-20     	; 0x2a6a <__ultoa_invert+0x58>
    2a7e:	46 2f       	mov	r20, r22
    2a80:	4f 70       	andi	r20, 0x0F	; 15
    2a82:	40 5d       	subi	r20, 0xD0	; 208
    2a84:	4a 33       	cpi	r20, 0x3A	; 58
    2a86:	18 f0       	brcs	.+6      	; 0x2a8e <__ultoa_invert+0x7c>
    2a88:	49 5d       	subi	r20, 0xD9	; 217
    2a8a:	31 fd       	sbrc	r19, 1
    2a8c:	40 52       	subi	r20, 0x20	; 32
    2a8e:	41 93       	st	Z+, r20
    2a90:	02 d0       	rcall	.+4      	; 0x2a96 <__ultoa_invert+0x84>
    2a92:	a9 f7       	brne	.-22     	; 0x2a7e <__ultoa_invert+0x6c>
    2a94:	ea cf       	rjmp	.-44     	; 0x2a6a <__ultoa_invert+0x58>
    2a96:	b4 e0       	ldi	r27, 0x04	; 4
    2a98:	a6 95       	lsr	r26
    2a9a:	97 95       	ror	r25
    2a9c:	87 95       	ror	r24
    2a9e:	77 95       	ror	r23
    2aa0:	67 95       	ror	r22
    2aa2:	ba 95       	dec	r27
    2aa4:	c9 f7       	brne	.-14     	; 0x2a98 <__ultoa_invert+0x86>
    2aa6:	00 97       	sbiw	r24, 0x00	; 0
    2aa8:	61 05       	cpc	r22, r1
    2aaa:	71 05       	cpc	r23, r1
    2aac:	08 95       	ret
    2aae:	9b 01       	movw	r18, r22
    2ab0:	ac 01       	movw	r20, r24
    2ab2:	0a 2e       	mov	r0, r26
    2ab4:	06 94       	lsr	r0
    2ab6:	57 95       	ror	r21
    2ab8:	47 95       	ror	r20
    2aba:	37 95       	ror	r19
    2abc:	27 95       	ror	r18
    2abe:	ba 95       	dec	r27
    2ac0:	c9 f7       	brne	.-14     	; 0x2ab4 <__ultoa_invert+0xa2>
    2ac2:	62 0f       	add	r22, r18
    2ac4:	73 1f       	adc	r23, r19
    2ac6:	84 1f       	adc	r24, r20
    2ac8:	95 1f       	adc	r25, r21
    2aca:	a0 1d       	adc	r26, r0
    2acc:	08 95       	ret

00002ace <__muluhisi3>:
    2ace:	0e 94 ab 11 	call	0x2356	; 0x2356 <__umulhisi3>
    2ad2:	a5 9f       	mul	r26, r21
    2ad4:	90 0d       	add	r25, r0
    2ad6:	b4 9f       	mul	r27, r20
    2ad8:	90 0d       	add	r25, r0
    2ada:	a4 9f       	mul	r26, r20
    2adc:	80 0d       	add	r24, r0
    2ade:	91 1d       	adc	r25, r1
    2ae0:	11 24       	eor	r1, r1
    2ae2:	08 95       	ret

00002ae4 <__mulshisi3>:
    2ae4:	b7 ff       	sbrs	r27, 7
    2ae6:	0c 94 67 15 	jmp	0x2ace	; 0x2ace <__muluhisi3>

00002aea <__mulohisi3>:
    2aea:	0e 94 67 15 	call	0x2ace	; 0x2ace <__muluhisi3>
    2aee:	82 1b       	sub	r24, r18
    2af0:	93 0b       	sbc	r25, r19
    2af2:	08 95       	ret

00002af4 <__prologue_saves__>:
    2af4:	2f 92       	push	r2
    2af6:	3f 92       	push	r3
    2af8:	4f 92       	push	r4
    2afa:	5f 92       	push	r5
    2afc:	6f 92       	push	r6
    2afe:	7f 92       	push	r7
    2b00:	8f 92       	push	r8
    2b02:	9f 92       	push	r9
    2b04:	af 92       	push	r10
    2b06:	bf 92       	push	r11
    2b08:	cf 92       	push	r12
    2b0a:	df 92       	push	r13
    2b0c:	ef 92       	push	r14
    2b0e:	ff 92       	push	r15
    2b10:	0f 93       	push	r16
    2b12:	1f 93       	push	r17
    2b14:	cf 93       	push	r28
    2b16:	df 93       	push	r29
    2b18:	cd b7       	in	r28, 0x3d	; 61
    2b1a:	de b7       	in	r29, 0x3e	; 62
    2b1c:	ca 1b       	sub	r28, r26
    2b1e:	db 0b       	sbc	r29, r27
    2b20:	0f b6       	in	r0, 0x3f	; 63
    2b22:	f8 94       	cli
    2b24:	de bf       	out	0x3e, r29	; 62
    2b26:	0f be       	out	0x3f, r0	; 63
    2b28:	cd bf       	out	0x3d, r28	; 61
    2b2a:	09 94       	ijmp

00002b2c <__epilogue_restores__>:
    2b2c:	2a 88       	ldd	r2, Y+18	; 0x12
    2b2e:	39 88       	ldd	r3, Y+17	; 0x11
    2b30:	48 88       	ldd	r4, Y+16	; 0x10
    2b32:	5f 84       	ldd	r5, Y+15	; 0x0f
    2b34:	6e 84       	ldd	r6, Y+14	; 0x0e
    2b36:	7d 84       	ldd	r7, Y+13	; 0x0d
    2b38:	8c 84       	ldd	r8, Y+12	; 0x0c
    2b3a:	9b 84       	ldd	r9, Y+11	; 0x0b
    2b3c:	aa 84       	ldd	r10, Y+10	; 0x0a
    2b3e:	b9 84       	ldd	r11, Y+9	; 0x09
    2b40:	c8 84       	ldd	r12, Y+8	; 0x08
    2b42:	df 80       	ldd	r13, Y+7	; 0x07
    2b44:	ee 80       	ldd	r14, Y+6	; 0x06
    2b46:	fd 80       	ldd	r15, Y+5	; 0x05
    2b48:	0c 81       	ldd	r16, Y+4	; 0x04
    2b4a:	1b 81       	ldd	r17, Y+3	; 0x03
    2b4c:	aa 81       	ldd	r26, Y+2	; 0x02
    2b4e:	b9 81       	ldd	r27, Y+1	; 0x01
    2b50:	ce 0f       	add	r28, r30
    2b52:	d1 1d       	adc	r29, r1
    2b54:	0f b6       	in	r0, 0x3f	; 63
    2b56:	f8 94       	cli
    2b58:	de bf       	out	0x3e, r29	; 62
    2b5a:	0f be       	out	0x3f, r0	; 63
    2b5c:	cd bf       	out	0x3d, r28	; 61
    2b5e:	ed 01       	movw	r28, r26
    2b60:	08 95       	ret

00002b62 <_exit>:
    2b62:	f8 94       	cli

00002b64 <__stop_program>:
    2b64:	ff cf       	rjmp	.-2      	; 0x2b64 <__stop_program>
